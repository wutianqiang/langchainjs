"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExampleAsyncMiddleware = void 0;
class ExampleAsyncMiddlewareRequestHandler {
    constructor(logger) {
        this.logger = logger;
    }
    async onRequestMetadata(metadata) {
        this.logger.info('ExampleAsyncMiddleware.onRequestMetadata enter');
        await delay(500);
        this.logger.info('ExampleAsyncMiddleware.onRequestMetadata exit');
        return metadata;
    }
    async onRequestBody(request) {
        this.logger.info('ExampleAsyncMiddleware.onRequestBody enter');
        await delay(500);
        this.logger.info('ExampleAsyncMiddleware.onRequestBody exit');
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return request;
    }
    async onResponseMetadata(metadata) {
        this.logger.info('ExampleAsyncMiddleware.onResponseMetadata enter');
        await delay(500);
        this.logger.info('ExampleAsyncMiddleware.onResponseMetadata exit');
        return metadata;
    }
    async onResponseBody(response) {
        this.logger.info('ExampleAsyncMiddleware.onResponseBody enter');
        await delay(500);
        this.logger.info('ExampleAsyncMiddleware.onResponseBody exit');
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return response;
    }
    async onResponseStatus(status) {
        this.logger.info('ExampleAsyncMiddleware.onResponseStatus enter');
        await delay(500);
        this.logger.info('ExampleAsyncMiddleware.onResponseStatus exit');
        return status;
    }
}
/**
 * This class provides an example of how users can implement a Middleware that
 * requires async calls.
 */
class ExampleAsyncMiddleware {
    constructor(loggerFactory) {
        this.logger = loggerFactory.getLogger(this);
    }
    onNewRequest() {
        this.logger.info('ExampleAsyncMiddleware handling new request');
        return new ExampleAsyncMiddlewareRequestHandler(this.logger);
    }
}
exports.ExampleAsyncMiddleware = ExampleAsyncMiddleware;
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhhbXBsZS1hc3luYy1taWRkbGV3YXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbmZpZy9taWRkbGV3YXJlL2V4YW1wbGUtYXN5bmMtbWlkZGxld2FyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFNQSxNQUFNLG9DQUFvQztJQUd4QyxZQUFZLE1BQXFCO1FBQy9CLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxLQUFLLENBQUMsaUJBQWlCLENBQUMsUUFBa0I7UUFDeEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0RBQWdELENBQUMsQ0FBQztRQUNuRSxNQUFNLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO1FBQ2xFLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxLQUFLLENBQUMsYUFBYSxDQUFDLE9BQWdCO1FBQ2xDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLDRDQUE0QyxDQUFDLENBQUM7UUFDL0QsTUFBTSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsMkNBQTJDLENBQUMsQ0FBQztRQUM5RCwrREFBK0Q7UUFDL0QsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUVELEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxRQUFrQjtRQUN6QyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO1FBQ3BFLE1BQU0sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGdEQUFnRCxDQUFDLENBQUM7UUFDbkUsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQztJQUVELEtBQUssQ0FBQyxjQUFjLENBQUMsUUFBd0I7UUFDM0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsNkNBQTZDLENBQUMsQ0FBQztRQUNoRSxNQUFNLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO1FBQy9ELCtEQUErRDtRQUMvRCxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0lBRUQsS0FBSyxDQUFDLGdCQUFnQixDQUFDLE1BQW9CO1FBQ3pDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLCtDQUErQyxDQUFDLENBQUM7UUFDbEUsTUFBTSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsOENBQThDLENBQUMsQ0FBQztRQUNqRSxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0NBQ0Y7QUFFRDs7O0dBR0c7QUFDSCxNQUFhLHNCQUFzQjtJQUdqQyxZQUFZLGFBQW1DO1FBQzdDLElBQUksQ0FBQyxNQUFNLEdBQUcsYUFBYSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBQ0QsWUFBWTtRQUNWLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLDZDQUE2QyxDQUFDLENBQUM7UUFDaEUsT0FBTyxJQUFJLG9DQUFvQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMvRCxDQUFDO0NBQ0Y7QUFWRCx3REFVQztBQUVELFNBQVMsS0FBSyxDQUFDLEVBQVU7SUFDdkIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN6RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtNaWRkbGV3YXJlLCBNaWRkbGV3YXJlUmVxdWVzdEhhbmRsZXJ9IGZyb20gJy4vbWlkZGxld2FyZSc7XG5cbmltcG9ydCB7TWV0YWRhdGEsIFN0YXR1c09iamVjdH0gZnJvbSAnQGdycGMvZ3JwYy1qcyc7XG5pbXBvcnQge01lc3NhZ2V9IGZyb20gJ2dvb2dsZS1wcm90b2J1Zic7XG5pbXBvcnQge01vbWVudG9Mb2dnZXIsIE1vbWVudG9Mb2dnZXJGYWN0b3J5fSBmcm9tICcuLi8uLic7XG5cbmNsYXNzIEV4YW1wbGVBc3luY01pZGRsZXdhcmVSZXF1ZXN0SGFuZGxlciBpbXBsZW1lbnRzIE1pZGRsZXdhcmVSZXF1ZXN0SGFuZGxlciB7XG4gIHByaXZhdGUgcmVhZG9ubHkgbG9nZ2VyOiBNb21lbnRvTG9nZ2VyO1xuXG4gIGNvbnN0cnVjdG9yKGxvZ2dlcjogTW9tZW50b0xvZ2dlcikge1xuICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyO1xuICB9XG5cbiAgYXN5bmMgb25SZXF1ZXN0TWV0YWRhdGEobWV0YWRhdGE6IE1ldGFkYXRhKTogUHJvbWlzZTxNZXRhZGF0YT4ge1xuICAgIHRoaXMubG9nZ2VyLmluZm8oJ0V4YW1wbGVBc3luY01pZGRsZXdhcmUub25SZXF1ZXN0TWV0YWRhdGEgZW50ZXInKTtcbiAgICBhd2FpdCBkZWxheSg1MDApO1xuICAgIHRoaXMubG9nZ2VyLmluZm8oJ0V4YW1wbGVBc3luY01pZGRsZXdhcmUub25SZXF1ZXN0TWV0YWRhdGEgZXhpdCcpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfVxuXG4gIGFzeW5jIG9uUmVxdWVzdEJvZHkocmVxdWVzdDogTWVzc2FnZSk6IFByb21pc2U8TWVzc2FnZT4ge1xuICAgIHRoaXMubG9nZ2VyLmluZm8oJ0V4YW1wbGVBc3luY01pZGRsZXdhcmUub25SZXF1ZXN0Qm9keSBlbnRlcicpO1xuICAgIGF3YWl0IGRlbGF5KDUwMCk7XG4gICAgdGhpcy5sb2dnZXIuaW5mbygnRXhhbXBsZUFzeW5jTWlkZGxld2FyZS5vblJlcXVlc3RCb2R5IGV4aXQnKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1yZXR1cm5cbiAgICByZXR1cm4gcmVxdWVzdDtcbiAgfVxuXG4gIGFzeW5jIG9uUmVzcG9uc2VNZXRhZGF0YShtZXRhZGF0YTogTWV0YWRhdGEpOiBQcm9taXNlPE1ldGFkYXRhPiB7XG4gICAgdGhpcy5sb2dnZXIuaW5mbygnRXhhbXBsZUFzeW5jTWlkZGxld2FyZS5vblJlc3BvbnNlTWV0YWRhdGEgZW50ZXInKTtcbiAgICBhd2FpdCBkZWxheSg1MDApO1xuICAgIHRoaXMubG9nZ2VyLmluZm8oJ0V4YW1wbGVBc3luY01pZGRsZXdhcmUub25SZXNwb25zZU1ldGFkYXRhIGV4aXQnKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH1cblxuICBhc3luYyBvblJlc3BvbnNlQm9keShyZXNwb25zZTogTWVzc2FnZSB8IG51bGwpOiBQcm9taXNlPE1lc3NhZ2UgfCBudWxsPiB7XG4gICAgdGhpcy5sb2dnZXIuaW5mbygnRXhhbXBsZUFzeW5jTWlkZGxld2FyZS5vblJlc3BvbnNlQm9keSBlbnRlcicpO1xuICAgIGF3YWl0IGRlbGF5KDUwMCk7XG4gICAgdGhpcy5sb2dnZXIuaW5mbygnRXhhbXBsZUFzeW5jTWlkZGxld2FyZS5vblJlc3BvbnNlQm9keSBleGl0Jyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtcmV0dXJuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9XG5cbiAgYXN5bmMgb25SZXNwb25zZVN0YXR1cyhzdGF0dXM6IFN0YXR1c09iamVjdCk6IFByb21pc2U8U3RhdHVzT2JqZWN0PiB7XG4gICAgdGhpcy5sb2dnZXIuaW5mbygnRXhhbXBsZUFzeW5jTWlkZGxld2FyZS5vblJlc3BvbnNlU3RhdHVzIGVudGVyJyk7XG4gICAgYXdhaXQgZGVsYXkoNTAwKTtcbiAgICB0aGlzLmxvZ2dlci5pbmZvKCdFeGFtcGxlQXN5bmNNaWRkbGV3YXJlLm9uUmVzcG9uc2VTdGF0dXMgZXhpdCcpO1xuICAgIHJldHVybiBzdGF0dXM7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIHByb3ZpZGVzIGFuIGV4YW1wbGUgb2YgaG93IHVzZXJzIGNhbiBpbXBsZW1lbnQgYSBNaWRkbGV3YXJlIHRoYXRcbiAqIHJlcXVpcmVzIGFzeW5jIGNhbGxzLlxuICovXG5leHBvcnQgY2xhc3MgRXhhbXBsZUFzeW5jTWlkZGxld2FyZSBpbXBsZW1lbnRzIE1pZGRsZXdhcmUge1xuICBwcml2YXRlIHJlYWRvbmx5IGxvZ2dlcjogTW9tZW50b0xvZ2dlcjtcblxuICBjb25zdHJ1Y3Rvcihsb2dnZXJGYWN0b3J5OiBNb21lbnRvTG9nZ2VyRmFjdG9yeSkge1xuICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyRmFjdG9yeS5nZXRMb2dnZXIodGhpcyk7XG4gIH1cbiAgb25OZXdSZXF1ZXN0KCk6IE1pZGRsZXdhcmVSZXF1ZXN0SGFuZGxlciB7XG4gICAgdGhpcy5sb2dnZXIuaW5mbygnRXhhbXBsZUFzeW5jTWlkZGxld2FyZSBoYW5kbGluZyBuZXcgcmVxdWVzdCcpO1xuICAgIHJldHVybiBuZXcgRXhhbXBsZUFzeW5jTWlkZGxld2FyZVJlcXVlc3RIYW5kbGVyKHRoaXMubG9nZ2VyKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZWxheShtczogbnVtYmVyKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKTtcbn1cbiJdfQ==