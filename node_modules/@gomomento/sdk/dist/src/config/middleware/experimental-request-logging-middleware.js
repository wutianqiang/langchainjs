"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExperimentalRequestLoggingMiddleware = void 0;
class ExperimentalLoggingMiddlewareRequestHandler {
    constructor(logger, requestId) {
        this.logger = logger;
        this.requestId = requestId;
    }
    onRequestMetadata(metadata) {
        this.logger.debug('Logging middleware: request %s onRequestMetadata: %s', this.requestId, JSON.stringify(metadata.toJSON()));
        return Promise.resolve(metadata);
    }
    onRequestBody(request) {
        this.logger.debug('Logging middleware: request %s onRequestBody: request type: %s, request size: %s', this.requestId, 
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        request.constructor.name, request.serializeBinary().length);
        return Promise.resolve(request);
    }
    onResponseMetadata(metadata) {
        this.logger.debug('Logging middleware: request %s onResponseMetadata: %s', this.requestId, JSON.stringify(metadata.toJSON()));
        return Promise.resolve(metadata);
    }
    onResponseBody(response) {
        var _a, _b, _c, _d;
        this.logger.debug('Logging middleware: request %s onResponseBody: response type: %s, response size: %s', this.requestId, 
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        (_b = (_a = response === null || response === void 0 ? void 0 : response.constructor) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : 'null', (_d = (_c = response === null || response === void 0 ? void 0 : response.serializeBinary()) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0);
        return Promise.resolve(response);
    }
    onResponseStatus(status) {
        this.logger.debug('Logging middleware: request %s onResponseStatus: status code: %s', this.requestId, 
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        status.code);
        return Promise.resolve(status);
    }
}
/**
 * This middleware implements per-request logging which can be used for
 * debugging.  The log format is currently considered experimental; in a
 * future release, once the log format is considered stable, this class will
 * be renamed to remove the Experimental prefix.
 *
 * WARNING: enabling this middleware may have minor performance implications,
 * so enable with caution.
 *
 * In order for this middleware to produce output you will need to have
 * set up your {Configuration} with a {MomentoLoggerFactory} instance that
 * is configured to log at DEBUG level or lower.  See `advanced.ts` in the
 * examples directory for an example of how to set up your {Configuration} to
 * enable this middleware.
 */
class ExperimentalRequestLoggingMiddleware {
    constructor(loggerFactory) {
        this.logger = loggerFactory.getLogger(this);
        this.nextRequestId = 0;
    }
    onNewRequest() {
        this.nextRequestId++;
        return new ExperimentalLoggingMiddlewareRequestHandler(this.logger, this.nextRequestId.toString());
    }
}
exports.ExperimentalRequestLoggingMiddleware = ExperimentalRequestLoggingMiddleware;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwZXJpbWVudGFsLXJlcXVlc3QtbG9nZ2luZy1taWRkbGV3YXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbmZpZy9taWRkbGV3YXJlL2V4cGVyaW1lbnRhbC1yZXF1ZXN0LWxvZ2dpbmctbWlkZGxld2FyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFLQSxNQUFNLDJDQUEyQztJQUsvQyxZQUFZLE1BQXFCLEVBQUUsU0FBaUI7UUFDbEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDN0IsQ0FBQztJQUVELGlCQUFpQixDQUFDLFFBQWtCO1FBQ2xDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUNmLHNEQUFzRCxFQUN0RCxJQUFJLENBQUMsU0FBUyxFQUNkLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQ2xDLENBQUM7UUFDRixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUNELGFBQWEsQ0FBQyxPQUFnQjtRQUM1QixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FDZixrRkFBa0YsRUFDbEYsSUFBSSxDQUFDLFNBQVM7UUFDZCxzRUFBc0U7UUFDdEUsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQ3hCLE9BQU8sQ0FBQyxlQUFlLEVBQUUsQ0FBQyxNQUFNLENBQ2pDLENBQUM7UUFDRixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELGtCQUFrQixDQUFDLFFBQWtCO1FBQ25DLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUNmLHVEQUF1RCxFQUN2RCxJQUFJLENBQUMsU0FBUyxFQUNkLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQ2xDLENBQUM7UUFDRixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELGNBQWMsQ0FBQyxRQUF3Qjs7UUFDckMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQ2YscUZBQXFGLEVBQ3JGLElBQUksQ0FBQyxTQUFTO1FBQ2Qsc0VBQXNFO1FBQ3RFLE1BQUEsTUFBQSxRQUFRLGFBQVIsUUFBUSx1QkFBUixRQUFRLENBQUUsV0FBVywwQ0FBRSxJQUFJLG1DQUFJLE1BQU0sRUFDckMsTUFBQSxNQUFBLFFBQVEsYUFBUixRQUFRLHVCQUFSLFFBQVEsQ0FBRSxlQUFlLEVBQUUsMENBQUUsTUFBTSxtQ0FBSSxDQUFDLENBQ3pDLENBQUM7UUFDRixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELGdCQUFnQixDQUFDLE1BQW9CO1FBQ25DLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUNmLGtFQUFrRSxFQUNsRSxJQUFJLENBQUMsU0FBUztRQUNkLHNFQUFzRTtRQUN0RSxNQUFNLENBQUMsSUFBSSxDQUNaLENBQUM7UUFDRixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDakMsQ0FBQztDQUNGO0FBRUQ7Ozs7Ozs7Ozs7Ozs7O0dBY0c7QUFDSCxNQUFhLG9DQUFvQztJQUcvQyxZQUFZLGFBQW1DO1FBQzdDLElBQUksQ0FBQyxNQUFNLEdBQUcsYUFBYSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRUQsWUFBWTtRQUNWLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNyQixPQUFPLElBQUksMkNBQTJDLENBQ3BELElBQUksQ0FBQyxNQUFNLEVBQ1gsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsQ0FDOUIsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQWZELG9GQWVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtNaWRkbGV3YXJlLCBNaWRkbGV3YXJlUmVxdWVzdEhhbmRsZXJ9IGZyb20gJy4vbWlkZGxld2FyZSc7XG5pbXBvcnQge01ldGFkYXRhLCBTdGF0dXNPYmplY3R9IGZyb20gJ0BncnBjL2dycGMtanMnO1xuaW1wb3J0IHtNZXNzYWdlfSBmcm9tICdnb29nbGUtcHJvdG9idWYnO1xuaW1wb3J0IHtNb21lbnRvTG9nZ2VyLCBNb21lbnRvTG9nZ2VyRmFjdG9yeX0gZnJvbSAnLi4vLi4vJztcblxuY2xhc3MgRXhwZXJpbWVudGFsTG9nZ2luZ01pZGRsZXdhcmVSZXF1ZXN0SGFuZGxlclxuICBpbXBsZW1lbnRzIE1pZGRsZXdhcmVSZXF1ZXN0SGFuZGxlclxue1xuICBwcml2YXRlIHJlYWRvbmx5IGxvZ2dlcjogTW9tZW50b0xvZ2dlcjtcbiAgcHJpdmF0ZSByZWFkb25seSByZXF1ZXN0SWQ6IHN0cmluZztcbiAgY29uc3RydWN0b3IobG9nZ2VyOiBNb21lbnRvTG9nZ2VyLCByZXF1ZXN0SWQ6IHN0cmluZykge1xuICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyO1xuICAgIHRoaXMucmVxdWVzdElkID0gcmVxdWVzdElkO1xuICB9XG5cbiAgb25SZXF1ZXN0TWV0YWRhdGEobWV0YWRhdGE6IE1ldGFkYXRhKTogUHJvbWlzZTxNZXRhZGF0YT4ge1xuICAgIHRoaXMubG9nZ2VyLmRlYnVnKFxuICAgICAgJ0xvZ2dpbmcgbWlkZGxld2FyZTogcmVxdWVzdCAlcyBvblJlcXVlc3RNZXRhZGF0YTogJXMnLFxuICAgICAgdGhpcy5yZXF1ZXN0SWQsXG4gICAgICBKU09OLnN0cmluZ2lmeShtZXRhZGF0YS50b0pTT04oKSlcbiAgICApO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobWV0YWRhdGEpO1xuICB9XG4gIG9uUmVxdWVzdEJvZHkocmVxdWVzdDogTWVzc2FnZSk6IFByb21pc2U8TWVzc2FnZT4ge1xuICAgIHRoaXMubG9nZ2VyLmRlYnVnKFxuICAgICAgJ0xvZ2dpbmcgbWlkZGxld2FyZTogcmVxdWVzdCAlcyBvblJlcXVlc3RCb2R5OiByZXF1ZXN0IHR5cGU6ICVzLCByZXF1ZXN0IHNpemU6ICVzJyxcbiAgICAgIHRoaXMucmVxdWVzdElkLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgcmVxdWVzdC5jb25zdHJ1Y3Rvci5uYW1lLFxuICAgICAgcmVxdWVzdC5zZXJpYWxpemVCaW5hcnkoKS5sZW5ndGhcbiAgICApO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVxdWVzdCk7XG4gIH1cblxuICBvblJlc3BvbnNlTWV0YWRhdGEobWV0YWRhdGE6IE1ldGFkYXRhKTogUHJvbWlzZTxNZXRhZGF0YT4ge1xuICAgIHRoaXMubG9nZ2VyLmRlYnVnKFxuICAgICAgJ0xvZ2dpbmcgbWlkZGxld2FyZTogcmVxdWVzdCAlcyBvblJlc3BvbnNlTWV0YWRhdGE6ICVzJyxcbiAgICAgIHRoaXMucmVxdWVzdElkLFxuICAgICAgSlNPTi5zdHJpbmdpZnkobWV0YWRhdGEudG9KU09OKCkpXG4gICAgKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG1ldGFkYXRhKTtcbiAgfVxuXG4gIG9uUmVzcG9uc2VCb2R5KHJlc3BvbnNlOiBNZXNzYWdlIHwgbnVsbCk6IFByb21pc2U8TWVzc2FnZSB8IG51bGw+IHtcbiAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcbiAgICAgICdMb2dnaW5nIG1pZGRsZXdhcmU6IHJlcXVlc3QgJXMgb25SZXNwb25zZUJvZHk6IHJlc3BvbnNlIHR5cGU6ICVzLCByZXNwb25zZSBzaXplOiAlcycsXG4gICAgICB0aGlzLnJlcXVlc3RJZCxcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgIHJlc3BvbnNlPy5jb25zdHJ1Y3Rvcj8ubmFtZSA/PyAnbnVsbCcsXG4gICAgICByZXNwb25zZT8uc2VyaWFsaXplQmluYXJ5KCk/Lmxlbmd0aCA/PyAwXG4gICAgKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgfVxuXG4gIG9uUmVzcG9uc2VTdGF0dXMoc3RhdHVzOiBTdGF0dXNPYmplY3QpOiBQcm9taXNlPFN0YXR1c09iamVjdD4ge1xuICAgIHRoaXMubG9nZ2VyLmRlYnVnKFxuICAgICAgJ0xvZ2dpbmcgbWlkZGxld2FyZTogcmVxdWVzdCAlcyBvblJlc3BvbnNlU3RhdHVzOiBzdGF0dXMgY29kZTogJXMnLFxuICAgICAgdGhpcy5yZXF1ZXN0SWQsXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgICBzdGF0dXMuY29kZVxuICAgICk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShzdGF0dXMpO1xuICB9XG59XG5cbi8qKlxuICogVGhpcyBtaWRkbGV3YXJlIGltcGxlbWVudHMgcGVyLXJlcXVlc3QgbG9nZ2luZyB3aGljaCBjYW4gYmUgdXNlZCBmb3JcbiAqIGRlYnVnZ2luZy4gIFRoZSBsb2cgZm9ybWF0IGlzIGN1cnJlbnRseSBjb25zaWRlcmVkIGV4cGVyaW1lbnRhbDsgaW4gYVxuICogZnV0dXJlIHJlbGVhc2UsIG9uY2UgdGhlIGxvZyBmb3JtYXQgaXMgY29uc2lkZXJlZCBzdGFibGUsIHRoaXMgY2xhc3Mgd2lsbFxuICogYmUgcmVuYW1lZCB0byByZW1vdmUgdGhlIEV4cGVyaW1lbnRhbCBwcmVmaXguXG4gKlxuICogV0FSTklORzogZW5hYmxpbmcgdGhpcyBtaWRkbGV3YXJlIG1heSBoYXZlIG1pbm9yIHBlcmZvcm1hbmNlIGltcGxpY2F0aW9ucyxcbiAqIHNvIGVuYWJsZSB3aXRoIGNhdXRpb24uXG4gKlxuICogSW4gb3JkZXIgZm9yIHRoaXMgbWlkZGxld2FyZSB0byBwcm9kdWNlIG91dHB1dCB5b3Ugd2lsbCBuZWVkIHRvIGhhdmVcbiAqIHNldCB1cCB5b3VyIHtDb25maWd1cmF0aW9ufSB3aXRoIGEge01vbWVudG9Mb2dnZXJGYWN0b3J5fSBpbnN0YW5jZSB0aGF0XG4gKiBpcyBjb25maWd1cmVkIHRvIGxvZyBhdCBERUJVRyBsZXZlbCBvciBsb3dlci4gIFNlZSBgYWR2YW5jZWQudHNgIGluIHRoZVxuICogZXhhbXBsZXMgZGlyZWN0b3J5IGZvciBhbiBleGFtcGxlIG9mIGhvdyB0byBzZXQgdXAgeW91ciB7Q29uZmlndXJhdGlvbn0gdG9cbiAqIGVuYWJsZSB0aGlzIG1pZGRsZXdhcmUuXG4gKi9cbmV4cG9ydCBjbGFzcyBFeHBlcmltZW50YWxSZXF1ZXN0TG9nZ2luZ01pZGRsZXdhcmUgaW1wbGVtZW50cyBNaWRkbGV3YXJlIHtcbiAgcHJpdmF0ZSByZWFkb25seSBsb2dnZXI6IE1vbWVudG9Mb2dnZXI7XG4gIHByaXZhdGUgbmV4dFJlcXVlc3RJZDogbnVtYmVyO1xuICBjb25zdHJ1Y3Rvcihsb2dnZXJGYWN0b3J5OiBNb21lbnRvTG9nZ2VyRmFjdG9yeSkge1xuICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyRmFjdG9yeS5nZXRMb2dnZXIodGhpcyk7XG4gICAgdGhpcy5uZXh0UmVxdWVzdElkID0gMDtcbiAgfVxuXG4gIG9uTmV3UmVxdWVzdCgpOiBNaWRkbGV3YXJlUmVxdWVzdEhhbmRsZXIge1xuICAgIHRoaXMubmV4dFJlcXVlc3RJZCsrO1xuICAgIHJldHVybiBuZXcgRXhwZXJpbWVudGFsTG9nZ2luZ01pZGRsZXdhcmVSZXF1ZXN0SGFuZGxlcihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgdGhpcy5uZXh0UmVxdWVzdElkLnRvU3RyaW5nKClcbiAgICApO1xuICB9XG59XG4iXX0=