"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimpleCacheClient = exports.CacheClient = void 0;
const control_client_1 = require("./internal/control-client");
const data_client_1 = require("./internal/data-client");
const utils_1 = require("@gomomento/sdk-core/dist/src/internal/utils");
const AbstractCacheClient_1 = require("@gomomento/sdk-core/dist/src/internal/clients/cache/AbstractCacheClient");
/**
 * Momento Cache Client.
 *
 * Features include:
 * - Get, set, and delete data
 * - Create, delete, and list caches
 * - Create, revoke, and list signing keys
 */
class CacheClient extends AbstractCacheClient_1.AbstractCacheClient {
    /**
     * Creates an instance of CacheClient.
     */
    constructor(props) {
        const controlClient = new control_client_1.ControlClient({
            configuration: props.configuration,
            credentialProvider: props.credentialProvider,
        });
        // For high load, we get better performance with multiple clients.  Here we
        // are setting a default, hard-coded value for the number of clients to use,
        // because we haven't yet designed the API for users to use to configure
        // tunables:
        // https://github.com/momentohq/dev-eco-issue-tracker/issues/85
        // The choice of 6 as the initial value is a rough guess at a reasonable
        // default for the short-term, based on load testing results captured in:
        // https://github.com/momentohq/oncall-tracker/issues/186
        const numClients = 6;
        const dataClients = (0, utils_1.range)(numClients).map(() => new data_client_1.DataClient(props));
        super(controlClient, dataClients);
        this.notYetAbstractedControlClient = controlClient;
        this.logger = props.configuration.getLoggerFactory().getLogger(this);
        this.logger.info('Creating Momento CacheClient');
    }
    /**
     * Flushes / clears all the items of the given cache
     *
     * @param {string} cacheName - The cache to be flushed.
     * @returns {Promise<CacheFlush.Response>} -
     * {@link CacheFlush.Success} on success.
     * {@link CacheFlush.Error} on failure.
     */
    async flushCache(cacheName) {
        return await this.notYetAbstractedControlClient.flushCache(cacheName);
    }
    /**
     * Creates a Momento signing key.
     *
     * @param {number} ttlMinutes - The time to live in minutes until the Momento
     * signing key expires.
     * @returns {Promise<CreateSigningKey.Response>} -
     * {@link CreateSigningKey.Success} containing the key, key ID, endpoint, and
     * expiration date on success.
     * {@link CreateSigningKey.Error} on failure.
     */
    async createSigningKey(ttlMinutes) {
        const client = this.getNextDataClient();
        return await this.notYetAbstractedControlClient.createSigningKey(ttlMinutes, client.getEndpoint());
    }
    /**
     * Revokes a Momento signing key.
     *
     * @remarks
     * All tokens signed by this key will be invalid.
     *
     * @param {string} keyId - The ID of the key to revoke.
     * @returns {Promise<RevokeSigningKey.Response>} -
     * {@link RevokeSigningKey.Success} on success.
     * {@link RevokeSigningKey.Error} on failure.
     */
    async revokeSigningKey(keyId) {
        return await this.notYetAbstractedControlClient.revokeSigningKey(keyId);
    }
    /**
     * Lists all Momento signing keys for the provided auth token.
     *
     * @returns {Promise<ListSigningKeys.Response>} -
     * {@link ListSigningKeys.Success} containing the keys on success.
     * {@link ListSigningKeys.Error} on failure.
     */
    async listSigningKeys() {
        const client = this.getNextDataClient();
        return await this.notYetAbstractedControlClient.listSigningKeys(client.getEndpoint());
    }
    getNextDataClient() {
        const client = this.dataClients[this.nextDataClientIndex];
        this.nextDataClientIndex =
            (this.nextDataClientIndex + 1) % this.dataClients.length;
        return client;
    }
}
exports.CacheClient = CacheClient;
/**
 * @deprecated use {CacheClient} instead
 */
class SimpleCacheClient extends CacheClient {
}
exports.SimpleCacheClient = SimpleCacheClient;
//# sourceMappingURL=data:application/json;base64,