"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataClient = void 0;
const generated_types_1 = require("@gomomento/generated-types");
// older versions of node don't have the global util variables https://github.com/nodejs/node/issues/20365
const util_1 = require("util");
const headers_interceptor_1 = require("./grpc/headers-interceptor");
const client_timeout_interceptor_1 = require("./grpc/client-timeout-interceptor");
const retry_interceptor_1 = require("./grpc/retry-interceptor");
const cache_service_error_mapper_1 = require("../errors/cache-service-error-mapper");
const grpc_js_1 = require("@grpc/grpc-js");
const __1 = require("..");
const package_json_1 = require("../../package.json");
const idle_grpc_client_wrapper_1 = require("./grpc/idle-grpc-client-wrapper");
const middlewares_interceptor_1 = require("./grpc/middlewares-interceptor");
const cacheclient_1 = require("@gomomento/generated-types/dist/cacheclient");
const utils_1 = require("@gomomento/sdk-core/dist/src/internal/utils");
const grpc_response_types_1 = require("@gomomento/sdk-core/dist/src/messages/responses/grpc-response-types");
const errors_1 = require("@gomomento/sdk-core/dist/src/errors");
var grpcCache = generated_types_1.cache.cache_client;
var _Unbounded = cacheclient_1.cache_client._Unbounded;
var ECacheResult = cacheclient_1.cache_client.ECacheResult;
var _ItemGetTypeResponse = cacheclient_1.cache_client._ItemGetTypeResponse;
class DataClient {
    /**
     * @param {CacheClientProps} props
     */
    constructor(props) {
        this.configuration = props.configuration;
        this.credentialProvider = props.credentialProvider;
        this.logger = this.configuration.getLoggerFactory().getLogger(this);
        const grpcConfig = this.configuration
            .getTransportStrategy()
            .getGrpcConfig();
        this.requestTimeoutMs =
            grpcConfig.getDeadlineMillis() || DataClient.DEFAULT_REQUEST_TIMEOUT_MS;
        this.validateRequestTimeout(this.requestTimeoutMs);
        this.logger.debug(`Creating cache client using endpoint: '${this.credentialProvider.getCacheEndpoint()}'`);
        this.clientWrapper = new idle_grpc_client_wrapper_1.IdleGrpcClientWrapper({
            clientFactoryFn: () => new grpcCache.ScsClient(this.credentialProvider.getCacheEndpoint(), grpc_js_1.ChannelCredentials.createSsl(), {
                // default value for max session memory is 10mb.  Under high load, it is easy to exceed this,
                // after which point all requests will fail with a client-side RESOURCE_EXHAUSTED exception.
                'grpc-node.max_session_memory': grpcConfig.getMaxSessionMemoryMb(),
                // This flag controls whether channels use a shared global pool of subchannels, or whether
                // each channel gets its own subchannel pool.  The default value is 0, meaning a single global
                // pool.  Setting it to 1 provides significant performance improvements when we instantiate more
                // than one grpc client.
                'grpc.use_local_subchannel_pool': 1,
            }),
            configuration: this.configuration,
        });
        this.textEncoder = new util_1.TextEncoder();
        this.defaultTtlSeconds = props.defaultTtlSeconds;
        this.interceptors = this.initializeInterceptors(this.configuration.getLoggerFactory(), this.configuration.getMiddlewares());
    }
    getEndpoint() {
        const endpoint = this.credentialProvider.getCacheEndpoint();
        this.logger.debug(`Using cache endpoint: ${endpoint}`);
        return endpoint;
    }
    validateRequestTimeout(timeout) {
        this.logger.debug(`Request timeout ms: ${String(timeout)}`);
        if (timeout && timeout <= 0) {
            throw new __1.InvalidArgumentError('request timeout must be greater than zero.');
        }
    }
    convertECacheResult(result) {
        switch (result) {
            case grpcCache.ECacheResult.Hit:
                return grpc_response_types_1._ECacheResult.Hit;
            case grpcCache.ECacheResult.Invalid:
                return grpc_response_types_1._ECacheResult.Invalid;
            case grpcCache.ECacheResult.Miss:
                return grpc_response_types_1._ECacheResult.Miss;
            case grpcCache.ECacheResult.Ok:
                return grpc_response_types_1._ECacheResult.Ok;
        }
    }
    convertItemTypeResult(result) {
        switch (result) {
            case _ItemGetTypeResponse.ItemType.SCALAR:
                return __1.ItemType.SCALAR;
            case _ItemGetTypeResponse.ItemType.LIST:
                return __1.ItemType.LIST;
            case _ItemGetTypeResponse.ItemType.DICTIONARY:
                return __1.ItemType.DICTIONARY;
            case _ItemGetTypeResponse.ItemType.SET:
                return __1.ItemType.SET;
            case _ItemGetTypeResponse.ItemType.SORTED_SET:
                return __1.ItemType.SORTED_SET;
        }
    }
    async set(cacheName, key, value, ttl) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        }
        catch (err) {
            return new __1.CacheSet.Error((0, errors_1.normalizeSdkError)(err));
        }
        if (ttl && ttl < 0) {
            return new __1.CacheSet.Error(new __1.InvalidArgumentError('ttl must be a positive integer'));
        }
        const ttlToUse = ttl || this.defaultTtlSeconds;
        this.logger.trace(`Issuing 'set' request; key: ${key.toString()}, value length: ${value.length}, ttl: ${ttlToUse.toString()}`);
        const encodedKey = this.convert(key);
        const encodedValue = this.convert(value);
        return await this.sendSet(cacheName, encodedKey, encodedValue, ttlToUse);
    }
    async sendSet(cacheName, key, value, ttl) {
        const request = new grpcCache._SetRequest({
            cache_body: value,
            cache_key: key,
            ttl_milliseconds: ttl * 1000,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().Set(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheSet.Success());
                }
                else {
                    resolve(new __1.CacheSet.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async setFetch(cacheName, setName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSetName)(setName);
        }
        catch (err) {
            return new __1.CacheSetFetch.Error((0, errors_1.normalizeSdkError)(err));
        }
        return await this.sendSetFetch(cacheName, this.convert(setName));
    }
    async sendSetFetch(cacheName, setName) {
        const request = new grpcCache._SetFetchRequest({
            set_name: setName,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().SetFetch(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheSetFetch.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheSetFetch.Hit(resp.found.elements));
                }
                else {
                    resolve(new __1.CacheSetFetch.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async setAddElements(cacheName, setName, elements, ttl = __1.CollectionTtl.fromCacheTtl()) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSetName)(setName);
        }
        catch (err) {
            return new __1.CacheSetAddElements.Error((0, errors_1.normalizeSdkError)(err));
        }
        return await this.sendSetAddElements(cacheName, this.convert(setName), this.convertArray(elements), ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl());
    }
    async sendSetAddElements(cacheName, setName, elements, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._SetUnionRequest({
            set_name: setName,
            elements: elements,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().SetUnion(request, metadata, {
                interceptors: this.interceptors,
            }, err => {
                if (err) {
                    resolve(new __1.CacheSetAddElements.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
                else {
                    resolve(new __1.CacheSetAddElements.Success());
                }
            });
        });
    }
    async setRemoveElements(cacheName, setName, elements) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSetName)(setName);
        }
        catch (err) {
            return new __1.CacheSetRemoveElements.Error((0, errors_1.normalizeSdkError)(err));
        }
        return await this.sendSetRemoveElements(cacheName, this.convert(setName), this.convertArray(elements));
    }
    async sendSetRemoveElements(cacheName, setName, elements) {
        const subtrahend = new grpcCache._SetDifferenceRequest._Subtrahend({
            set: new grpcCache._SetDifferenceRequest._Subtrahend._Set({
                elements: elements,
            }),
        });
        const request = new grpcCache._SetDifferenceRequest({
            set_name: setName,
            subtrahend: subtrahend,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().SetDifference(request, metadata, {
                interceptors: this.interceptors,
            }, err => {
                if (err) {
                    resolve(new __1.CacheSetRemoveElements.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
                else {
                    resolve(new __1.CacheSetRemoveElements.Success());
                }
            });
        });
    }
    async setIfNotExists(cacheName, key, value, ttl) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
        }
        catch (err) {
            return new __1.CacheSetIfNotExists.Error((0, errors_1.normalizeSdkError)(err));
        }
        if (ttl && ttl < 0) {
            return new __1.CacheSetIfNotExists.Error(new __1.InvalidArgumentError('ttl must be a positive integer'));
        }
        this.logger.trace(`Issuing 'setIfNotExists' request; key: ${key.toString()}, field: ${value.toString()}, ttl: ${(_a = ttl === null || ttl === void 0 ? void 0 : ttl.toString()) !== null && _a !== void 0 ? _a : 'null'}`);
        const result = await this.sendSetIfNotExists(cacheName, this.convert(key), this.convert(value), ttl || this.defaultTtlSeconds * 1000);
        this.logger.trace(`'setIfNotExists' request result: ${result.toString()}`);
        return result;
    }
    async sendSetIfNotExists(cacheName, key, value, ttlMilliseconds) {
        const request = new grpcCache._SetIfNotExistsRequest({
            cache_key: key,
            cache_body: value,
            ttl_milliseconds: ttlMilliseconds,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().SetIfNotExists(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    switch (resp.result) {
                        case 'stored':
                            resolve(new __1.CacheSetIfNotExists.Stored());
                            break;
                        case 'not_stored':
                            resolve(new __1.CacheSetIfNotExists.NotStored());
                            break;
                        default:
                            resolve(new __1.CacheGet.Error(new __1.UnknownError('SetIfNotExists responded with an unknown result')));
                            break;
                    }
                }
                else {
                    resolve(new __1.CacheSetIfNotExists.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async delete(cacheName, key) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        }
        catch (err) {
            return new __1.CacheDelete.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'delete' request; key: ${key.toString()}`);
        return await this.sendDelete(cacheName, this.convert(key));
    }
    async sendDelete(cacheName, key) {
        const request = new grpcCache._DeleteRequest({
            cache_key: key,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().Delete(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheDelete.Success());
                }
                else {
                    resolve(new __1.CacheDelete.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async get(cacheName, key) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        }
        catch (err) {
            return new __1.CacheGet.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'get' request; key: ${key.toString()}`);
        const result = await this.sendGet(cacheName, this.convert(key));
        this.logger.trace(`'get' request result: ${result.toString()}`);
        return result;
    }
    async sendGet(cacheName, key) {
        const request = new grpcCache._GetRequest({
            cache_key: key,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().Get(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    switch (resp.result) {
                        case grpcCache.ECacheResult.Miss:
                            resolve(new __1.CacheGet.Miss());
                            break;
                        case grpcCache.ECacheResult.Hit:
                            resolve(new __1.CacheGet.Hit(resp.cache_body));
                            break;
                        case grpcCache.ECacheResult.Invalid:
                        case grpcCache.ECacheResult.Ok:
                            resolve(new __1.CacheGet.Error(new __1.UnknownError(resp.message)));
                            break;
                        default:
                            resolve(new __1.CacheGet.Error(new __1.UnknownError('An unknown error occurred: ' + resp.message)));
                            break;
                    }
                }
                else {
                    resolve(new __1.CacheGet.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async listConcatenateBack(cacheName, listName, values, truncateFrontToSize, ttl = __1.CollectionTtl.fromCacheTtl()) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        }
        catch (err) {
            return new __1.CacheListConcatenateBack.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'listConcatenateBack' request; listName: ${listName}, values length: ${values.length}, ${ttl.toString()}, truncateFrontToSize: ${(_a = truncateFrontToSize === null || truncateFrontToSize === void 0 ? void 0 : truncateFrontToSize.toString()) !== null && _a !== void 0 ? _a : 'null'}`);
        const result = await this.sendListConcatenateBack(cacheName, this.convert(listName), this.convertArray(values), ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl(), truncateFrontToSize);
        this.logger.trace(`'listConcatenateBack' request result: ${result.toString()}`);
        return result;
    }
    async sendListConcatenateBack(cacheName, listName, values, ttlMilliseconds, refreshTtl, truncateFrontToSize) {
        const request = new grpcCache._ListConcatenateBackRequest({
            list_name: listName,
            values: values,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
            truncate_front_to_size: truncateFrontToSize,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().ListConcatenateBack(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheListConcatenateBack.Success(resp.list_length));
                }
                else {
                    resolve(new __1.CacheListConcatenateBack.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async listConcatenateFront(cacheName, listName, values, truncateBackToSize, ttl = __1.CollectionTtl.fromCacheTtl()) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        }
        catch (err) {
            return new __1.CacheListConcatenateFront.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'listConcatenateFront' request; listName: ${listName}, values length: ${values.length}, ${ttl.toString()}, truncateBackToSize: ${(_a = truncateBackToSize === null || truncateBackToSize === void 0 ? void 0 : truncateBackToSize.toString()) !== null && _a !== void 0 ? _a : 'null'}`);
        const result = await this.sendListConcatenateFront(cacheName, this.convert(listName), this.convertArray(values), ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl(), truncateBackToSize);
        this.logger.trace(`'listConcatenateFront' request result: ${result.toString()}`);
        return result;
    }
    async sendListConcatenateFront(cacheName, listName, values, ttlMilliseconds, refreshTtl, truncateBackToSize) {
        const request = new grpcCache._ListConcatenateFrontRequest({
            list_name: listName,
            values: values,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
            truncate_back_to_size: truncateBackToSize,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().ListConcatenateFront(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheListConcatenateFront.Success(resp.list_length));
                }
                else {
                    resolve(new __1.CacheListConcatenateFront.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async listFetch(cacheName, listName, startIndex, endIndex) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
            (0, utils_1.validateListSliceStartEnd)(startIndex, endIndex);
        }
        catch (err) {
            return new __1.CacheListFetch.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'listFetch' request; listName: %s, startIndex: %s, endIndex: %s", listName, startIndex !== null && startIndex !== void 0 ? startIndex : 'null', endIndex !== null && endIndex !== void 0 ? endIndex : 'null');
        const result = await this.sendListFetch(cacheName, this.convert(listName), startIndex, endIndex);
        this.logger.trace("'listFetch' request result: %s", result.toString());
        return result;
    }
    async sendListFetch(cacheName, listName, start, end) {
        const request = new grpcCache._ListFetchRequest({
            list_name: listName,
        });
        if (start) {
            request.inclusive_start = start;
        }
        else {
            request.unbounded_start = new _Unbounded();
        }
        if (end) {
            request.exclusive_end = end;
        }
        else {
            request.unbounded_end = new _Unbounded();
        }
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().ListFetch(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheListFetch.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheListFetch.Hit(resp.found.values));
                }
                else {
                    resolve(new __1.CacheListFetch.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async listRetain(cacheName, listName, startIndex, endIndex, ttl = __1.CollectionTtl.fromCacheTtl()) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
            (0, utils_1.validateListSliceStartEnd)(startIndex, endIndex);
        }
        catch (err) {
            return new __1.CacheListRetain.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'listRetain' request; listName: %s, startIndex: %s, endIndex: %s, ttl: %s", listName, startIndex !== null && startIndex !== void 0 ? startIndex : 'null', endIndex !== null && endIndex !== void 0 ? endIndex : 'null', (_a = ttl.ttlSeconds.toString()) !== null && _a !== void 0 ? _a : 'null');
        const result = await this.sendListRetain(cacheName, this.convert(listName), startIndex, endIndex, ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl());
        this.logger.trace("'listRetain' request result: %s", result.toString());
        return result;
    }
    async sendListRetain(cacheName, listName, start, end, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._ListRetainRequest({
            list_name: listName,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
        });
        if (start) {
            request.inclusive_start = start;
        }
        else {
            request.unbounded_start = new _Unbounded();
        }
        if (end) {
            request.exclusive_end = end;
        }
        else {
            request.unbounded_end = new _Unbounded();
        }
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().ListRetain(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheListRetain.Success());
                }
                else {
                    resolve(new __1.CacheListRetain.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async listLength(cacheName, listName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        }
        catch (err) {
            return new __1.CacheListLength.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'listLength' request; listName: ${listName}`);
        const result = await this.sendListLength(cacheName, this.convert(listName));
        this.logger.trace(`'listLength' request result: ${result.toString()}`);
        return result;
    }
    async sendListLength(cacheName, listName) {
        const request = new grpcCache._ListLengthRequest({
            list_name: listName,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().ListLength(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheListLength.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    // Unlike listFetch, listLength will return found if there is no list,
                    // but there will be no length.
                    if (!resp.found.length) {
                        resolve(new __1.CacheListLength.Miss());
                    }
                    else {
                        resolve(new __1.CacheListLength.Hit(resp.found.length));
                    }
                }
                else {
                    resolve(new __1.CacheListLength.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async listPopBack(cacheName, listName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        }
        catch (err) {
            return new __1.CacheListPopBack.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'listPopBack' request");
        const result = await this.sendListPopBack(cacheName, this.convert(listName));
        this.logger.trace(`'listPopBack' request result: ${result.toString()}`);
        return result;
    }
    async sendListPopBack(cacheName, listName) {
        const request = new grpcCache._ListPopBackRequest({
            list_name: listName,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().ListPopBack(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheListPopBack.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheListPopBack.Hit(resp.found.back));
                }
                else {
                    resolve(new __1.CacheListPopBack.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async listPopFront(cacheName, listName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        }
        catch (err) {
            return new __1.CacheListPopFront.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'listPopFront' request");
        const result = await this.sendListPopFront(cacheName, this.convert(listName));
        this.logger.trace(`'listPopFront' request result: ${result.toString()}`);
        return result;
    }
    async sendListPopFront(cacheName, listName) {
        const request = new grpcCache._ListPopFrontRequest({
            list_name: listName,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().ListPopFront(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheListPopFront.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheListPopFront.Hit(resp.found.front));
                }
                else {
                    resolve(new __1.CacheListPopFront.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async listPushBack(cacheName, listName, value, truncateFrontToSize, ttl = __1.CollectionTtl.fromCacheTtl()) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        }
        catch (err) {
            return new __1.CacheListPushBack.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'listPushBack' request; listName: ${listName}, value length: ${value.length}, ${ttl.toString()}, truncateFrontToSize: ${(_a = truncateFrontToSize === null || truncateFrontToSize === void 0 ? void 0 : truncateFrontToSize.toString()) !== null && _a !== void 0 ? _a : 'null'}`);
        const result = await this.sendListPushBack(cacheName, this.convert(listName), this.convert(value), ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl(), truncateFrontToSize);
        this.logger.trace(`'listPushBack' request result: ${result.toString()}`);
        return result;
    }
    async sendListPushBack(cacheName, listName, value, ttlMilliseconds, refreshTtl, truncateFrontToSize) {
        const request = new grpcCache._ListPushBackRequest({
            list_name: listName,
            value: value,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
            truncate_front_to_size: truncateFrontToSize,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().ListPushBack(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheListPushBack.Success(resp.list_length));
                }
                else {
                    resolve(new __1.CacheListPushBack.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async listPushFront(cacheName, listName, value, truncateBackToSize, ttl = __1.CollectionTtl.fromCacheTtl()) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        }
        catch (err) {
            return new __1.CacheListPushFront.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'listPushFront' request; listName: ${listName}, value length: ${value.length}, ${ttl.toString()}, truncateBackToSize: ${(_a = truncateBackToSize === null || truncateBackToSize === void 0 ? void 0 : truncateBackToSize.toString()) !== null && _a !== void 0 ? _a : 'null'}`);
        const result = await this.sendListPushFront(cacheName, this.convert(listName), this.convert(value), ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl(), truncateBackToSize);
        this.logger.trace(`'listPushFront' request result: ${result.toString()}`);
        return result;
    }
    async sendListPushFront(cacheName, listName, value, ttlMilliseconds, refreshTtl, truncateBackToSize) {
        const request = new grpcCache._ListPushFrontRequest({
            list_name: listName,
            value: value,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
            truncate_back_to_size: truncateBackToSize,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().ListPushFront(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheListPushFront.Success(resp.list_length));
                }
                else {
                    resolve(new __1.CacheListPushFront.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async listRemoveValue(cacheName, listName, value) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        }
        catch (err) {
            return new __1.CacheListRemoveValue.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'listRemoveValue' request; listName: ${listName}, value length: ${value.length}`);
        const result = await this.sendListRemoveValue(cacheName, this.convert(listName), this.convert(value));
        this.logger.trace(`'listRemoveValue' request result: ${result.toString()}`);
        return result;
    }
    async sendListRemoveValue(cacheName, listName, value) {
        const request = new grpcCache._ListRemoveRequest({
            list_name: listName,
            all_elements_with_value: value,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().ListRemove(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheListRemoveValue.Success());
                }
                else {
                    resolve(new __1.CacheListRemoveValue.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async dictionaryFetch(cacheName, dictionaryName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return new __1.CacheDictionaryFetch.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'dictionaryFetch' request; dictionaryName: ${dictionaryName}`);
        const result = await this.sendDictionaryFetch(cacheName, this.convert(dictionaryName));
        this.logger.trace(`'dictionaryFetch' request result: ${result.toString()}`);
        return result;
    }
    async sendDictionaryFetch(cacheName, dictionaryName) {
        const request = new grpcCache._DictionaryFetchRequest({
            dictionary_name: dictionaryName,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().DictionaryFetch(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheDictionaryFetch.Hit(resp.found.items));
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheDictionaryFetch.Miss());
                }
                else {
                    resolve(new __1.CacheDictionaryFetch.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async dictionarySetField(cacheName, dictionaryName, field, value, ttl = __1.CollectionTtl.fromCacheTtl()) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return new __1.CacheDictionarySetField.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'dictionarySetField' request; field: ${field.toString()}, value length: ${value.length}, ttl: ${(_a = ttl.ttlSeconds.toString()) !== null && _a !== void 0 ? _a : 'null'}`);
        const result = await this.sendDictionarySetField(cacheName, this.convert(dictionaryName), this.convert(field), this.convert(value), ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl());
        this.logger.trace(`'dictionarySetField' request result: ${result.toString()}`);
        return result;
    }
    async sendDictionarySetField(cacheName, dictionaryName, field, value, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._DictionarySetRequest({
            dictionary_name: dictionaryName,
            items: this.toSingletonFieldValuePair(field, value),
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().DictionarySet(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheDictionarySetField.Success());
                }
                else {
                    resolve(new __1.CacheDictionarySetField.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async dictionarySetFields(cacheName, dictionaryName, elements, ttl = __1.CollectionTtl.fromCacheTtl()) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return new __1.CacheDictionarySetFields.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'dictionarySetFields' request; elements: ${elements.toString()}, ttl: ${(_a = ttl.ttlSeconds.toString()) !== null && _a !== void 0 ? _a : 'null'}`);
        const dictionaryFieldValuePairs = this.convertMapOrRecord(elements);
        const result = await this.sendDictionarySetFields(cacheName, this.convert(dictionaryName), dictionaryFieldValuePairs, ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl());
        this.logger.trace(`'dictionarySetFields' request result: ${result.toString()}`);
        return result;
    }
    async sendDictionarySetFields(cacheName, dictionaryName, elements, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._DictionarySetRequest({
            dictionary_name: dictionaryName,
            items: elements,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().DictionarySet(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheDictionarySetFields.Success());
                }
                else {
                    resolve(new __1.CacheDictionarySetFields.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async dictionaryGetField(cacheName, dictionaryName, field) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return new __1.CacheDictionaryGetField.Error((0, errors_1.normalizeSdkError)(err), this.convert(field));
        }
        this.logger.trace(`Issuing 'dictionaryGetField' request; field: ${field.toString()}`);
        const result = await this.sendDictionaryGetField(cacheName, this.convert(dictionaryName), this.convert(field));
        this.logger.trace(`'dictionaryGetField' request result: ${result.toString()}`);
        return result;
    }
    async sendDictionaryGetField(cacheName, dictionaryName, field) {
        const request = new grpcCache._DictionaryGetRequest({
            dictionary_name: dictionaryName,
            fields: [field],
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().DictionaryGet(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if ((resp === null || resp === void 0 ? void 0 : resp.dictionary) === 'missing') {
                    resolve(new __1.CacheDictionaryGetField.Miss(field));
                }
                else if ((resp === null || resp === void 0 ? void 0 : resp.dictionary) === 'found') {
                    if ((resp === null || resp === void 0 ? void 0 : resp.found.items.length) === 0) {
                        resolve(new __1.CacheDictionaryGetField.Error(new __1.UnknownError('_DictionaryGetResponseResponse contained no data but was found'), field));
                    }
                    else if ((resp === null || resp === void 0 ? void 0 : resp.found.items[0].result) === grpcCache.ECacheResult.Miss) {
                        resolve(new __1.CacheDictionaryGetField.Miss(field));
                    }
                    else {
                        resolve(new __1.CacheDictionaryGetField.Hit(resp === null || resp === void 0 ? void 0 : resp.found.items[0].cache_body, field));
                    }
                }
                else {
                    resolve(new __1.CacheDictionaryGetField.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err), field));
                }
            });
        });
    }
    async dictionaryGetFields(cacheName, dictionaryName, fields) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return new __1.CacheDictionaryGetFields.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'dictionaryGetFields' request; fields: ${fields.toString()}`);
        const result = await this.sendDictionaryGetFields(cacheName, this.convert(dictionaryName), this.convertArray(fields));
        this.logger.trace(`'dictionaryGetFields' request result: ${result.toString()}`);
        return result;
    }
    async sendDictionaryGetFields(cacheName, dictionaryName, fields) {
        const request = new grpcCache._DictionaryGetRequest({
            dictionary_name: dictionaryName,
            fields: fields,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().DictionaryGet(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if ((resp === null || resp === void 0 ? void 0 : resp.dictionary) === 'found') {
                    const items = resp.found.items.map(item => {
                        const result = this.convertECacheResult(item.result);
                        return new grpc_response_types_1._DictionaryGetResponsePart(result, item.cache_body);
                    });
                    resolve(new __1.CacheDictionaryGetFields.Hit(items, fields));
                }
                else if ((resp === null || resp === void 0 ? void 0 : resp.dictionary) === 'missing') {
                    resolve(new __1.CacheDictionaryGetFields.Miss());
                }
                else {
                    resolve(new __1.CacheDictionaryGetFields.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async dictionaryRemoveField(cacheName, dictionaryName, field) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return new __1.CacheDictionaryRemoveField.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'dictionaryRemoveField' request; field: ${field.toString()}`);
        const result = await this.sendDictionaryRemoveField(cacheName, this.convert(dictionaryName), this.convert(field));
        this.logger.trace(`'dictionaryRemoveField' request result: ${result.toString()}`);
        return result;
    }
    async sendDictionaryRemoveField(cacheName, dictionaryName, field) {
        const request = new grpcCache._DictionaryDeleteRequest({
            dictionary_name: dictionaryName,
            some: new grpcCache._DictionaryDeleteRequest.Some(),
        });
        request.some.fields.push(field);
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().DictionaryDelete(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheDictionaryRemoveField.Success());
                }
                else {
                    resolve(new __1.CacheDictionaryRemoveField.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async dictionaryRemoveFields(cacheName, dictionaryName, fields) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return new __1.CacheDictionaryRemoveFields.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'dictionaryRemoveFields' request; fields: ${fields.toString()}`);
        const result = await this.sendDictionaryRemoveFields(cacheName, this.convert(dictionaryName), this.convertArray(fields));
        this.logger.trace(`'dictionaryRemoveFields' request result: ${result.toString()}`);
        return result;
    }
    async sendDictionaryRemoveFields(cacheName, dictionaryName, fields) {
        const request = new grpcCache._DictionaryDeleteRequest({
            dictionary_name: dictionaryName,
            some: new grpcCache._DictionaryDeleteRequest.Some(),
        });
        fields.forEach(field => request.some.fields.push(field));
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().DictionaryDelete(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheDictionaryRemoveFields.Success());
                }
                else {
                    resolve(new __1.CacheDictionaryRemoveFields.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async increment(cacheName, field, amount = 1, ttl) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
        }
        catch (err) {
            return new __1.CacheIncrement.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'increment' request; field: ${field.toString()}, amount : ${amount}, ttl: ${(_a = ttl === null || ttl === void 0 ? void 0 : ttl.toString()) !== null && _a !== void 0 ? _a : 'null'}`);
        const result = await this.sendIncrement(cacheName, this.convert(field), amount, ttl || this.defaultTtlSeconds * 1000);
        this.logger.trace(`'increment' request result: ${result.toString()}`);
        return result;
    }
    async sendIncrement(cacheName, field, amount = 1, ttlMilliseconds) {
        const request = new grpcCache._IncrementRequest({
            cache_key: field,
            amount,
            ttl_milliseconds: ttlMilliseconds,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().Increment(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    if (resp.value) {
                        resolve(new __1.CacheIncrement.Success(resp.value));
                    }
                    else {
                        resolve(new __1.CacheIncrement.Success(0));
                    }
                }
                else {
                    resolve(new __1.CacheIncrement.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async dictionaryIncrement(cacheName, dictionaryName, field, amount = 1, ttl = __1.CollectionTtl.fromCacheTtl()) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return new __1.CacheDictionaryIncrement.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'dictionaryIncrement' request; field: ${field.toString()}, amount : ${amount}, ttl: ${(_a = ttl.ttlSeconds.toString()) !== null && _a !== void 0 ? _a : 'null'}`);
        const result = await this.sendDictionaryIncrement(cacheName, this.convert(dictionaryName), this.convert(field), amount, ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl());
        this.logger.trace(`'dictionaryIncrement' request result: ${result.toString()}`);
        return result;
    }
    async sendDictionaryIncrement(cacheName, dictionaryName, field, amount, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._DictionaryIncrementRequest({
            dictionary_name: dictionaryName,
            field,
            amount,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().DictionaryIncrement(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    if (resp.value) {
                        resolve(new __1.CacheDictionaryIncrement.Success(resp.value));
                    }
                    else {
                        resolve(new __1.CacheDictionaryIncrement.Success(0));
                    }
                }
                else {
                    resolve(new __1.CacheDictionaryIncrement.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async sortedSetPutElement(cacheName, sortedSetName, value, score, ttl = __1.CollectionTtl.fromCacheTtl()) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        }
        catch (err) {
            return new __1.CacheSortedSetPutElement.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'sortedSetPutElement' request; value: %s, score : %s, ttl: %s", (0, utils_1.truncateString)(value.toString()), score, (_a = ttl.ttlSeconds.toString()) !== null && _a !== void 0 ? _a : 'null');
        const result = await this.sendSortedSetPutElement(cacheName, this.convert(sortedSetName), this.convert(value), score, ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl());
        this.logger.trace("'sortedSetPutElement' request result: %s", result.toString());
        return result;
    }
    async sendSortedSetPutElement(cacheName, sortedSetName, value, score, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._SortedSetPutRequest({
            set_name: sortedSetName,
            elements: [new grpcCache._SortedSetElement({ value, score })],
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().SortedSetPut(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheSortedSetPutElement.Success());
                }
                else {
                    resolve(new __1.CacheSortedSetPutElement.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async sortedSetPutElements(cacheName, sortedSetName, elements, ttl = __1.CollectionTtl.fromCacheTtl()) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        }
        catch (err) {
            return new __1.CacheSortedSetPutElements.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'sortedSetPutElements' request; value: %s, score : %s, ttl: %s", elements.toString(), (_a = ttl.ttlSeconds.toString()) !== null && _a !== void 0 ? _a : 'null');
        const sortedSetValueScorePairs = this.convertSortedSetMapOrRecord(elements);
        const result = await this.sendSortedSetPutElements(cacheName, this.convert(sortedSetName), sortedSetValueScorePairs, ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl());
        this.logger.trace("'sortedSetPutElements' request result: %s", result.toString());
        return result;
    }
    async sendSortedSetPutElements(cacheName, sortedSetName, elements, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._SortedSetPutRequest({
            set_name: sortedSetName,
            elements: elements,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().SortedSetPut(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheSortedSetPutElements.Success());
                }
                else {
                    resolve(new __1.CacheSortedSetPutElements.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async sortedSetFetchByRank(cacheName, sortedSetName, order, startRank, endRank) {
        var _a, _b;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
            (0, utils_1.validateSortedSetRanks)(startRank, endRank);
        }
        catch (err) {
            return new __1.CacheSortedSetFetch.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'sortedSetFetchByRank' request; startRank: %s, endRank : %s, order: %s", (_a = startRank.toString()) !== null && _a !== void 0 ? _a : 'null', (_b = endRank === null || endRank === void 0 ? void 0 : endRank.toString()) !== null && _b !== void 0 ? _b : 'null', order.toString());
        const result = await this.sendSortedSetFetchByRank(cacheName, this.convert(sortedSetName), order, startRank, endRank);
        this.logger.trace("'sortedSetFetchByRank' request result: %s", result.toString());
        return result;
    }
    async sendSortedSetFetchByRank(cacheName, sortedSetName, order, startRank, endRank) {
        const by_index = new grpcCache._SortedSetFetchRequest._ByIndex();
        if (startRank) {
            by_index.inclusive_start_index = startRank;
        }
        else {
            by_index.unbounded_start = new grpcCache._Unbounded();
        }
        if (endRank) {
            by_index.exclusive_end_index = endRank;
        }
        else {
            by_index.unbounded_end = new grpcCache._Unbounded();
        }
        const protoBufOrder = order === __1.SortedSetOrder.Descending
            ? grpcCache._SortedSetFetchRequest.Order.DESCENDING
            : grpcCache._SortedSetFetchRequest.Order.ASCENDING;
        const request = new grpcCache._SortedSetFetchRequest({
            set_name: sortedSetName,
            order: protoBufOrder,
            with_scores: true,
            by_index: by_index,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().SortedSetFetch(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                var _a;
                if (resp) {
                    if (resp === null || resp === void 0 ? void 0 : resp.found) {
                        if ((_a = resp === null || resp === void 0 ? void 0 : resp.found) === null || _a === void 0 ? void 0 : _a.values_with_scores) {
                            resolve(new __1.CacheSortedSetFetch.Hit(resp.found.values_with_scores.elements));
                        }
                        else {
                            resolve(new __1.CacheSortedSetFetch.Error(new __1.UnknownError('Unknown sorted set fetch hit response type')));
                        }
                    }
                    else if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                        resolve(new __1.CacheSortedSetFetch.Miss());
                    }
                    else {
                        resolve(new __1.CacheSortedSetFetch.Error(new __1.UnknownError('Unknown sorted set fetch response type')));
                    }
                }
                else {
                    resolve(new __1.CacheSortedSetFetch.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async sortedSetFetchByScore(cacheName, sortedSetName, order, minScore, maxScore, offset, count) {
        var _a, _b, _c, _d;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
            (0, utils_1.validateSortedSetScores)(minScore, maxScore);
            if (offset !== undefined) {
                (0, utils_1.validateSortedSetOffset)(offset);
            }
            if (count !== undefined) {
                (0, utils_1.validateSortedSetCount)(count);
            }
        }
        catch (err) {
            return new __1.CacheSortedSetFetch.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'sortedSetFetchByScore' request; minScore: %s, maxScore : %s, order: %s, offset: %s, count: %s", (_a = minScore === null || minScore === void 0 ? void 0 : minScore.toString()) !== null && _a !== void 0 ? _a : 'null', (_b = maxScore === null || maxScore === void 0 ? void 0 : maxScore.toString()) !== null && _b !== void 0 ? _b : 'null', order.toString(), (_c = offset === null || offset === void 0 ? void 0 : offset.toString()) !== null && _c !== void 0 ? _c : 'null', (_d = count === null || count === void 0 ? void 0 : count.toString()) !== null && _d !== void 0 ? _d : 'null');
        const result = await this.sendSortedSetFetchByScore(cacheName, this.convert(sortedSetName), order, minScore, maxScore, offset, count);
        this.logger.trace("'sortedSetFetchByScore' request result: %s", result.toString());
        return result;
    }
    async sendSortedSetFetchByScore(cacheName, sortedSetName, order, minScore, maxScore, offset, count) {
        const by_score = new grpcCache._SortedSetFetchRequest._ByScore();
        if (minScore !== undefined) {
            by_score.min_score = new grpcCache._SortedSetFetchRequest._ByScore._Score({
                score: minScore,
                exclusive: false,
            });
        }
        else {
            by_score.unbounded_min = new grpcCache._Unbounded();
        }
        if (maxScore !== undefined) {
            by_score.max_score = new grpcCache._SortedSetFetchRequest._ByScore._Score({
                score: maxScore,
                exclusive: false,
            });
        }
        else {
            by_score.unbounded_max = new grpcCache._Unbounded();
        }
        by_score.offset = offset !== null && offset !== void 0 ? offset : 0;
        // Note: the service reserves negative counts to mean all elements in the
        // result set.
        by_score.count = count !== null && count !== void 0 ? count : -1;
        const protoBufOrder = order === __1.SortedSetOrder.Descending
            ? grpcCache._SortedSetFetchRequest.Order.DESCENDING
            : grpcCache._SortedSetFetchRequest.Order.ASCENDING;
        const request = new grpcCache._SortedSetFetchRequest({
            set_name: sortedSetName,
            order: protoBufOrder,
            with_scores: true,
            by_score: by_score,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().SortedSetFetch(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                var _a;
                if (resp) {
                    if (resp === null || resp === void 0 ? void 0 : resp.found) {
                        if ((_a = resp === null || resp === void 0 ? void 0 : resp.found) === null || _a === void 0 ? void 0 : _a.values_with_scores) {
                            resolve(new __1.CacheSortedSetFetch.Hit(resp.found.values_with_scores.elements));
                        }
                        else {
                            resolve(new __1.CacheSortedSetFetch.Error(new __1.UnknownError('Unknown sorted set fetch hit response type')));
                        }
                    }
                    else if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                        resolve(new __1.CacheSortedSetFetch.Miss());
                    }
                    else {
                        resolve(new __1.CacheSortedSetFetch.Error(new __1.UnknownError('Unknown sorted set fetch response type')));
                    }
                }
                else {
                    resolve(new __1.CacheSortedSetFetch.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async sortedSetGetRank(cacheName, sortedSetName, value) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        }
        catch (err) {
            return new __1.CacheSortedSetGetRank.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'sortedSetGetRank' request; value: %s", (0, utils_1.truncateString)(value.toString()));
        const result = await this.sendSortedSetGetRank(cacheName, this.convert(sortedSetName), this.convert(value));
        this.logger.trace("'sortedSetGetRank' request result: %s", (0, utils_1.truncateString)(result.toString()));
        return result;
    }
    async sendSortedSetGetRank(cacheName, sortedSetName, value) {
        const request = new grpcCache._SortedSetGetRankRequest({
            set_name: sortedSetName,
            value: value,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper
                .getClient()
                .SortedSetGetRank(request, metadata, { interceptors: this.interceptors }, (err, resp) => {
                var _a, _b;
                if ((resp === null || resp === void 0 ? void 0 : resp.missing) ||
                    ((_a = resp === null || resp === void 0 ? void 0 : resp.element_rank) === null || _a === void 0 ? void 0 : _a.result) === ECacheResult.Miss) {
                    resolve(new __1.CacheSortedSetGetRank.Miss());
                }
                else if (((_b = resp === null || resp === void 0 ? void 0 : resp.element_rank) === null || _b === void 0 ? void 0 : _b.result) === ECacheResult.Hit) {
                    if ((resp === null || resp === void 0 ? void 0 : resp.element_rank.rank) === undefined) {
                        resolve(new __1.CacheSortedSetGetRank.Miss());
                    }
                    else {
                        resolve(new __1.CacheSortedSetGetRank.Hit(resp.element_rank.rank));
                    }
                }
                else {
                    resolve(new __1.CacheSortedSetGetRank.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async sortedSetGetScore(cacheName, sortedSetName, value) {
        const responses = await this.sortedSetGetScores(cacheName, sortedSetName, [
            value,
        ]);
        if (responses instanceof __1.CacheSortedSetGetScores.Hit) {
            return responses.responses()[0];
        }
        else if (responses instanceof __1.CacheSortedSetGetScores.Miss) {
            return new __1.CacheSortedSetGetScore.Miss(this.convert(value));
        }
        else if (responses instanceof __1.CacheSortedSetGetScores.Error) {
            return new __1.CacheSortedSetGetScore.Error(responses.innerException(), this.convert(value));
        }
        return new __1.CacheSortedSetGetScore.Error(new __1.UnknownError('Unknown response type'), this.convert(value));
    }
    async sortedSetGetScores(cacheName, sortedSetName, values) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        }
        catch (err) {
            return new __1.CacheSortedSetGetScores.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'sortedSetGetScores' request; values: %s", (0, utils_1.truncateString)(values.toString()));
        const result = await this.sendSortedSetGetScores(cacheName, this.convert(sortedSetName), values.map(value => this.convert(value)));
        this.logger.trace("'sortedSetGetScores' request result: %s", (0, utils_1.truncateString)(result.toString()));
        return result;
    }
    async sendSortedSetGetScores(cacheName, sortedSetName, values) {
        const request = new grpcCache._SortedSetGetScoreRequest({
            set_name: sortedSetName,
            values: values,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper
                .getClient()
                .SortedSetGetScore(request, metadata, { interceptors: this.interceptors }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheSortedSetGetScores.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    const elements = resp.found.elements.map(ele => {
                        const result = this.convertECacheResult(ele.result);
                        return new grpc_response_types_1._SortedSetGetScoreResponsePart(result, ele.score);
                    });
                    resolve(new __1.CacheSortedSetGetScores.Hit(elements, values));
                }
                else {
                    resolve(new __1.CacheSortedSetGetScores.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async sortedSetIncrementScore(cacheName, sortedSetName, value, amount = 1, ttl = __1.CollectionTtl.fromCacheTtl()) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        }
        catch (err) {
            return new __1.CacheSortedSetFetch.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'sortedSetIncrementScore' request; value: %s", (0, utils_1.truncateString)(value.toString()));
        const result = await this.sendSortedSetIncrementScore(cacheName, this.convert(sortedSetName), this.convert(value), amount, ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl());
        this.logger.trace("'sortedSetIncrementScore' request result: %s", (0, utils_1.truncateString)(result.toString()));
        return result;
    }
    async sendSortedSetIncrementScore(cacheName, sortedSetName, value, amount, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._SortedSetIncrementRequest({
            set_name: sortedSetName,
            value: value,
            amount: amount,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper
                .getClient()
                .SortedSetIncrement(request, metadata, { interceptors: this.interceptors }, (err, resp) => {
                if (resp) {
                    if (resp.score) {
                        resolve(new __1.CacheSortedSetIncrementScore.Success(resp.score));
                    }
                    else {
                        resolve(new __1.CacheSortedSetIncrementScore.Success(0));
                    }
                }
                else {
                    resolve(new __1.CacheDictionaryIncrement.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async sortedSetRemoveElement(cacheName, sortedSetName, value) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        }
        catch (err) {
            return new __1.CacheSortedSetFetch.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'sortedSetRemoveElement' request");
        const result = await this.sendSortedSetRemoveElement(cacheName, this.convert(sortedSetName), this.convert(value));
        this.logger.trace("'sortedSetRemoveElement' request result: %s", (0, utils_1.truncateString)(result.toString()));
        return result;
    }
    async sendSortedSetRemoveElement(cacheName, sortedSetName, value) {
        const request = new grpcCache._SortedSetRemoveRequest({
            set_name: sortedSetName,
            some: new grpcCache._SortedSetRemoveRequest._Some({
                values: [value],
            }),
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().SortedSetRemove(request, metadata, {
                interceptors: this.interceptors,
            }, err => {
                if (err) {
                    resolve(new __1.CacheSortedSetRemoveElement.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
                else {
                    resolve(new __1.CacheSortedSetRemoveElement.Success());
                }
            });
        });
    }
    async sortedSetRemoveElements(cacheName, sortedSetName, values) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        }
        catch (err) {
            return new __1.CacheSortedSetFetch.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'sortedSetRemoveElements' request");
        const result = await this.sendSortedSetRemoveElements(cacheName, this.convert(sortedSetName), this.convertArray(values));
        this.logger.trace("'sortedSetRemoveElements' request result: %s", (0, utils_1.truncateString)(result.toString()));
        return result;
    }
    async sendSortedSetRemoveElements(cacheName, sortedSetName, values) {
        const request = new grpcCache._SortedSetRemoveRequest({
            set_name: sortedSetName,
            some: new grpcCache._SortedSetRemoveRequest._Some({
                values: values,
            }),
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().SortedSetRemove(request, metadata, {
                interceptors: this.interceptors,
            }, err => {
                if (err) {
                    resolve(new __1.CacheSortedSetRemoveElements.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
                else {
                    resolve(new __1.CacheSortedSetRemoveElements.Success());
                }
            });
        });
    }
    initializeInterceptors(loggerFactory, middlewares) {
        const headers = [
            new headers_interceptor_1.Header('Authorization', this.credentialProvider.getAuthToken()),
            new headers_interceptor_1.Header('Agent', `nodejs:${package_json_1.version}`),
        ];
        return [
            (0, middlewares_interceptor_1.middlewaresInterceptor)(loggerFactory, middlewares),
            new headers_interceptor_1.HeaderInterceptorProvider(headers).createHeadersInterceptor(),
            (0, client_timeout_interceptor_1.ClientTimeoutInterceptor)(this.requestTimeoutMs),
            ...(0, retry_interceptor_1.createRetryInterceptorIfEnabled)(this.configuration.getLoggerFactory(), this.configuration.getRetryStrategy()),
        ];
    }
    convert(v) {
        if (typeof v === 'string') {
            return this.textEncoder.encode(v);
        }
        return v;
    }
    convertArray(v) {
        return v.map(i => this.convert(i));
    }
    convertMapOrRecord(elements) {
        if (elements instanceof Map) {
            return [...elements.entries()].map(element => new grpcCache._DictionaryFieldValuePair({
                field: this.convert(element[0]),
                value: this.convert(element[1]),
            }));
        }
        else {
            return Object.entries(elements).map(element => new grpcCache._DictionaryFieldValuePair({
                field: this.convert(element[0]),
                value: this.convert(element[1]),
            }));
        }
    }
    convertSortedSetMapOrRecord(elements) {
        if (elements instanceof Map) {
            return [...elements.entries()].map(element => new grpcCache._SortedSetElement({
                value: this.convert(element[0]),
                score: element[1],
            }));
        }
        else {
            return Object.entries(elements).map(element => new grpcCache._SortedSetElement({
                value: this.convert(element[0]),
                score: element[1],
            }));
        }
    }
    async itemGetType(cacheName, key) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        }
        catch (err) {
            return new __1.ItemGetType.Error((0, errors_1.normalizeSdkError)(err));
        }
        return await this.sendItemGetType(cacheName, this.convert(key));
    }
    async sendItemGetType(cacheName, key) {
        const request = new grpcCache._ItemGetTypeRequest({
            cache_key: key,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().ItemGetType(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.ItemGetType.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.ItemGetType.Hit(this.convertItemTypeResult(resp.found.item_type)));
                }
                else {
                    resolve(new __1.ItemGetType.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    createMetadata(cacheName) {
        const metadata = new grpc_js_1.Metadata();
        metadata.set('cache', cacheName);
        return metadata;
    }
    toSingletonFieldValuePair(field, value) {
        return [
            new grpcCache._DictionaryFieldValuePair({
                field: field,
                value: value,
            }),
        ];
    }
}
exports.DataClient = DataClient;
DataClient.DEFAULT_REQUEST_TIMEOUT_MS = 5 * 1000;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1jbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaW50ZXJuYWwvZGF0YS1jbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsZ0VBQWlEO0FBQ2pELDBHQUEwRztBQUMxRywrQkFBaUM7QUFDakMsb0VBQTZFO0FBQzdFLGtGQUEyRTtBQUMzRSxnRUFBeUU7QUFDekUscUZBQTZFO0FBQzdFLDJDQUF3RTtBQUN4RSwwQkE2Q1k7QUFDWixxREFBMkM7QUFDM0MsOEVBQXNFO0FBSXRFLDRFQUFzRTtBQUN0RSw2RUFBeUU7QUFFekUsdUVBWXFEO0FBQ3JELDZHQUk2RTtBQUM3RSxnRUFBc0U7QUFDdEUsSUFBTyxTQUFTLEdBQUcsdUJBQUssQ0FBQyxZQUFZLENBQUM7QUFDdEMsSUFBTyxVQUFVLEdBQUcsMEJBQVksQ0FBQyxVQUFVLENBQUM7QUFDNUMsSUFBTyxZQUFZLEdBQUcsMEJBQVksQ0FBQyxZQUFZLENBQUM7QUFDaEQsSUFBTyxvQkFBb0IsR0FBRywwQkFBWSxDQUFDLG9CQUFvQixDQUFDO0FBR2hFLE1BQWEsVUFBVTtJQVdyQjs7T0FFRztJQUNILFlBQVksS0FBdUI7UUFDakMsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDO1FBQ3pDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBQUM7UUFDbkQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGdCQUFnQixFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BFLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxhQUFhO2FBQ2xDLG9CQUFvQixFQUFFO2FBQ3RCLGFBQWEsRUFBRSxDQUFDO1FBRW5CLElBQUksQ0FBQyxnQkFBZ0I7WUFDbkIsVUFBVSxDQUFDLGlCQUFpQixFQUFFLElBQUksVUFBVSxDQUFDLDBCQUEwQixDQUFDO1FBQzFFLElBQUks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QWMsQ0FBQyxTQUFpQjtRQUN0QyxNQUFNLFFBQVEsR0FBRyxJQUFJLGtCQUFRLEVBQUUsQ0FBQztRQUNoQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNqQyxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0lBRU8seUJBQXlCLENBQy9CLEtBQWlCLEVBQ2pCLEtBQWlCO1FBRWpCLE9BQU87WUFDTCxJQUFJLFNBQVMsQ0FBQyx5QkFBeUIsQ0FBQztnQkFDdEMsS0FBSyxFQUFFLEtBQUs7Z0JBQ1osS0FBSyxFQUFFLEtBQUs7YUFDYixDQUFDO1NBQ0gsQ0FBQztJQUNKLENBQUM7O0FBbGpGSCxnQ0FtakZDO0FBNWlGeUIscUNBQTBCLEdBQVcsQ0FBQyxHQUFHLElBQUksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Y2FjaGV9IGZyb20gJ0Bnb21vbWVudG8vZ2VuZXJhdGVkLXR5cGVzJztcbi8vIG9sZGVyIHZlcnNpb25zIG9mIG5vZGUgZG9uJ3QgaGF2ZSB0aGUgZ2xvYmFsIHV0aWwgdmFyaWFibGVzIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9pc3N1ZXMvMjAzNjVcbmltcG9ydCB7VGV4dEVuY29kZXJ9IGZyb20gJ3V0aWwnO1xuaW1wb3J0IHtIZWFkZXIsIEhlYWRlckludGVyY2VwdG9yUHJvdmlkZXJ9IGZyb20gJy4vZ3JwYy9oZWFkZXJzLWludGVyY2VwdG9yJztcbmltcG9ydCB7Q2xpZW50VGltZW91dEludGVyY2VwdG9yfSBmcm9tICcuL2dycGMvY2xpZW50LXRpbWVvdXQtaW50ZXJjZXB0b3InO1xuaW1wb3J0IHtjcmVhdGVSZXRyeUludGVyY2VwdG9ySWZFbmFibGVkfSBmcm9tICcuL2dycGMvcmV0cnktaW50ZXJjZXB0b3InO1xuaW1wb3J0IHtjYWNoZVNlcnZpY2VFcnJvck1hcHBlcn0gZnJvbSAnLi4vZXJyb3JzL2NhY2hlLXNlcnZpY2UtZXJyb3ItbWFwcGVyJztcbmltcG9ydCB7Q2hhbm5lbENyZWRlbnRpYWxzLCBJbnRlcmNlcHRvciwgTWV0YWRhdGF9IGZyb20gJ0BncnBjL2dycGMtanMnO1xuaW1wb3J0IHtcbiAgQ2FjaGVEZWxldGUsXG4gIENhY2hlRGljdGlvbmFyeUZldGNoLFxuICBDYWNoZURpY3Rpb25hcnlHZXRGaWVsZCxcbiAgQ2FjaGVEaWN0aW9uYXJ5R2V0RmllbGRzLFxuICBDYWNoZURpY3Rpb25hcnlJbmNyZW1lbnQsXG4gIENhY2hlRGljdGlvbmFyeVJlbW92ZUZpZWxkLFxuICBDYWNoZURpY3Rpb25hcnlSZW1vdmVGaWVsZHMsXG4gIENhY2hlRGljdGlvbmFyeVNldEZpZWxkLFxuICBDYWNoZURpY3Rpb25hcnlTZXRGaWVsZHMsXG4gIENhY2hlR2V0LFxuICBDYWNoZUluY3JlbWVudCxcbiAgQ2FjaGVMaXN0Q29uY2F0ZW5hdGVCYWNrLFxuICBDYWNoZUxpc3RDb25jYXRlbmF0ZUZyb250LFxuICBDYWNoZUxpc3RGZXRjaCxcbiAgQ2FjaGVMaXN0TGVuZ3RoLFxuICBDYWNoZUxpc3RQb3BCYWNrLFxuICBDYWNoZUxpc3RQb3BGcm9udCxcbiAgQ2FjaGVMaXN0UHVzaEJhY2ssXG4gIENhY2hlTGlzdFB1c2hGcm9udCxcbiAgQ2FjaGVMaXN0UmVtb3ZlVmFsdWUsXG4gIENhY2hlTGlzdFJldGFpbixcbiAgQ2FjaGVTZXQsXG4gIENhY2hlU2V0QWRkRWxlbWVudHMsXG4gIENhY2hlU2V0RmV0Y2gsXG4gIENhY2hlU2V0SWZOb3RFeGlzdHMsXG4gIENhY2hlU2V0UmVtb3ZlRWxlbWVudHMsXG4gIENhY2hlU29ydGVkU2V0RmV0Y2gsXG4gIENhY2hlU29ydGVkU2V0R2V0UmFuayxcbiAgQ2FjaGVTb3J0ZWRTZXRHZXRTY29yZSxcbiAgQ2FjaGVTb3J0ZWRTZXRHZXRTY29yZXMsXG4gIENhY2hlU29ydGVkU2V0SW5jcmVtZW50U2NvcmUsXG4gIENhY2hlU29ydGVkU2V0UHV0RWxlbWVudCxcbiAgQ2FjaGVTb3J0ZWRTZXRQdXRFbGVtZW50cyxcbiAgQ2FjaGVTb3J0ZWRTZXRSZW1vdmVFbGVtZW50LFxuICBDYWNoZVNvcnRlZFNldFJlbW92ZUVsZW1lbnRzLFxuICBJdGVtR2V0VHlwZSxcbiAgQ29sbGVjdGlvblR0bCxcbiAgSXRlbVR5cGUsXG4gIENyZWRlbnRpYWxQcm92aWRlcixcbiAgSW52YWxpZEFyZ3VtZW50RXJyb3IsXG4gIE1vbWVudG9Mb2dnZXIsXG4gIE1vbWVudG9Mb2dnZXJGYWN0b3J5LFxuICBTb3J0ZWRTZXRPcmRlcixcbiAgVW5rbm93bkVycm9yLFxufSBmcm9tICcuLic7XG5pbXBvcnQge3ZlcnNpb259IGZyb20gJy4uLy4uL3BhY2thZ2UuanNvbic7XG5pbXBvcnQge0lkbGVHcnBjQ2xpZW50V3JhcHBlcn0gZnJvbSAnLi9ncnBjL2lkbGUtZ3JwYy1jbGllbnQtd3JhcHBlcic7XG5pbXBvcnQge0dycGNDbGllbnRXcmFwcGVyfSBmcm9tICcuL2dycGMvZ3JwYy1jbGllbnQtd3JhcHBlcic7XG5pbXBvcnQge0NhY2hlQ2xpZW50UHJvcHN9IGZyb20gJy4uL2NhY2hlLWNsaWVudC1wcm9wcyc7XG5pbXBvcnQge01pZGRsZXdhcmV9IGZyb20gJy4uL2NvbmZpZy9taWRkbGV3YXJlL21pZGRsZXdhcmUnO1xuaW1wb3J0IHttaWRkbGV3YXJlc0ludGVyY2VwdG9yfSBmcm9tICcuL2dycGMvbWlkZGxld2FyZXMtaW50ZXJjZXB0b3InO1xuaW1wb3J0IHtjYWNoZV9jbGllbnR9IGZyb20gJ0Bnb21vbWVudG8vZ2VuZXJhdGVkLXR5cGVzL2Rpc3QvY2FjaGVjbGllbnQnO1xuaW1wb3J0IHtDb25maWd1cmF0aW9ufSBmcm9tICcuLi9jb25maWcvY29uZmlndXJhdGlvbic7XG5pbXBvcnQge1xuICB0cnVuY2F0ZVN0cmluZyxcbiAgdmFsaWRhdGVDYWNoZU5hbWUsXG4gIHZhbGlkYXRlRGljdGlvbmFyeU5hbWUsXG4gIHZhbGlkYXRlTGlzdE5hbWUsXG4gIHZhbGlkYXRlTGlzdFNsaWNlU3RhcnRFbmQsXG4gIHZhbGlkYXRlU2V0TmFtZSxcbiAgdmFsaWRhdGVTb3J0ZWRTZXRDb3VudCxcbiAgdmFsaWRhdGVTb3J0ZWRTZXROYW1lLFxuICB2YWxpZGF0ZVNvcnRlZFNldE9mZnNldCxcbiAgdmFsaWRhdGVTb3J0ZWRTZXRSYW5rcyxcbiAgdmFsaWRhdGVTb3J0ZWRTZXRTY29yZXMsXG59IGZyb20gJ0Bnb21vbWVudG8vc2RrLWNvcmUvZGlzdC9zcmMvaW50ZXJuYWwvdXRpbHMnO1xuaW1wb3J0IHtcbiAgX0RpY3Rpb25hcnlHZXRSZXNwb25zZVBhcnQsXG4gIF9FQ2FjaGVSZXN1bHQsXG4gIF9Tb3J0ZWRTZXRHZXRTY29yZVJlc3BvbnNlUGFydCxcbn0gZnJvbSAnQGdvbW9tZW50by9zZGstY29yZS9kaXN0L3NyYy9tZXNzYWdlcy9yZXNwb25zZXMvZ3JwYy1yZXNwb25zZS10eXBlcyc7XG5pbXBvcnQge25vcm1hbGl6ZVNka0Vycm9yfSBmcm9tICdAZ29tb21lbnRvL3Nkay1jb3JlL2Rpc3Qvc3JjL2Vycm9ycyc7XG5pbXBvcnQgZ3JwY0NhY2hlID0gY2FjaGUuY2FjaGVfY2xpZW50O1xuaW1wb3J0IF9VbmJvdW5kZWQgPSBjYWNoZV9jbGllbnQuX1VuYm91bmRlZDtcbmltcG9ydCBFQ2FjaGVSZXN1bHQgPSBjYWNoZV9jbGllbnQuRUNhY2hlUmVzdWx0O1xuaW1wb3J0IF9JdGVtR2V0VHlwZVJlc3BvbnNlID0gY2FjaGVfY2xpZW50Ll9JdGVtR2V0VHlwZVJlc3BvbnNlO1xuaW1wb3J0IHtJRGF0YUNsaWVudH0gZnJvbSAnQGdvbW9tZW50by9zZGstY29yZS9kaXN0L3NyYy9pbnRlcm5hbC9jbGllbnRzJztcblxuZXhwb3J0IGNsYXNzIERhdGFDbGllbnQgaW1wbGVtZW50cyBJRGF0YUNsaWVudCB7XG4gIHByaXZhdGUgcmVhZG9ubHkgY2xpZW50V3JhcHBlcjogR3JwY0NsaWVudFdyYXBwZXI8Z3JwY0NhY2hlLlNjc0NsaWVudD47XG4gIHByaXZhdGUgcmVhZG9ubHkgdGV4dEVuY29kZXI6IFRleHRFbmNvZGVyO1xuICBwcml2YXRlIHJlYWRvbmx5IGNvbmZpZ3VyYXRpb246IENvbmZpZ3VyYXRpb247XG4gIHByaXZhdGUgcmVhZG9ubHkgY3JlZGVudGlhbFByb3ZpZGVyOiBDcmVkZW50aWFsUHJvdmlkZXI7XG4gIHByaXZhdGUgcmVhZG9ubHkgZGVmYXVsdFR0bFNlY29uZHM6IG51bWJlcjtcbiAgcHJpdmF0ZSByZWFkb25seSByZXF1ZXN0VGltZW91dE1zOiBudW1iZXI7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IERFRkFVTFRfUkVRVUVTVF9USU1FT1VUX01TOiBudW1iZXIgPSA1ICogMTAwMDtcbiAgcHJpdmF0ZSByZWFkb25seSBsb2dnZXI6IE1vbWVudG9Mb2dnZXI7XG4gIHByaXZhdGUgcmVhZG9ubHkgaW50ZXJjZXB0b3JzOiBJbnRlcmNlcHRvcltdO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0NhY2hlQ2xpZW50UHJvcHN9IHByb3BzXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcm9wczogQ2FjaGVDbGllbnRQcm9wcykge1xuICAgIHRoaXMuY29uZmlndXJhdGlvbiA9IHByb3BzLmNvbmZpZ3VyYXRpb247XG4gICAgdGhpcy5jcmVkZW50aWFsUHJvdmlkZXIgPSBwcm9wcy5jcmVkZW50aWFsUHJvdmlkZXI7XG4gICAgdGhpcy5sb2dnZXIgPSB0aGlzLmNvbmZpZ3VyYXRpb24uZ2V0TG9nZ2VyRmFjdG9yeSgpLmdldExvZ2dlcih0aGlzKTtcbiAgICBjb25zdCBncnBjQ29uZmlnID0gdGhpcy5jb25maWd1cmF0aW9uXG4gICAgICAuZ2V0VHJhbnNwb3J0U3RyYXRlZ3koKVxuICAgICAgLmdldEdycGNDb25maWcoKTtcblxuICAgIHRoaXMucmVxdWVzdFRpbWVvdXRNcyA9XG4gICAgICBncnBjQ29uZmlnLmdldERlYWRsaW5lTWlsbGlzKCkgfHwgRGF0YUNsaWVudC5ERUZBVUxUX1JFUVVFU1RfVElNRU9VVF9NUztcbiAgICB0aGlzLnZhbGlkYXRlUmVxdWVzdFRpbWVvdXQodGhpcy5yZXF1ZXN0VGltZW91dE1zKTtcbiAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcbiAgICAgIGBDcmVhdGluZyBjYWNoZSBjbGllbnQgdXNpbmcgZW5kcG9pbnQ6ICcke3RoaXMuY3JlZGVudGlhbFByb3ZpZGVyLmdldENhY2hlRW5kcG9pbnQoKX0nYFxuICAgICk7XG5cbiAgICB0aGlzLmNsaWVudFdyYXBwZXIgPSBuZXcgSWRsZUdycGNDbGllbnRXcmFwcGVyKHtcbiAgICAgIGNsaWVudEZhY3RvcnlGbjogKCkgPT5cbiAgICAgICAgbmV3IGdycGNDYWNoZS5TY3NDbGllbnQoXG4gICAgICAgICAgdGhpcy5jcmVkZW50aWFsUHJvdmlkZXIuZ2V0Q2FjaGVFbmRwb2ludCgpLFxuICAgICAgICAgIENoYW5uZWxDcmVkZW50aWFscy5jcmVhdGVTc2woKSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICAvLyBkZWZhdWx0IHZhbHVlIGZvciBtYXggc2Vzc2lvbiBtZW1vcnkgaXMgMTBtYi4gIFVuZGVyIGhpZ2ggbG9hZCwgaXQgaXMgZWFzeSB0byBleGNlZWQgdGhpcyxcbiAgICAgICAgICAgIC8vIGFmdGVyIHdoaWNoIHBvaW50IGFsbCByZXF1ZXN0cyB3aWxsIGZhaWwgd2l0aCBhIGNsaWVudC1zaWRlIFJFU09VUkNFX0VYSEFVU1RFRCBleGNlcHRpb24uXG4gICAgICAgICAgICAnZ3JwYy1ub2RlLm1heF9zZXNzaW9uX21lbW9yeSc6IGdycGNDb25maWcuZ2V0TWF4U2Vzc2lvbk1lbW9yeU1iKCksXG4gICAgICAgICAgICAvLyBUaGlzIGZsYWcgY29udHJvbHMgd2hldGhlciBjaGFubmVscyB1c2UgYSBzaGFyZWQgZ2xvYmFsIHBvb2wgb2Ygc3ViY2hhbm5lbHMsIG9yIHdoZXRoZXJcbiAgICAgICAgICAgIC8vIGVhY2ggY2hhbm5lbCBnZXRzIGl0cyBvd24gc3ViY2hhbm5lbCBwb29sLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgMCwgbWVhbmluZyBhIHNpbmdsZSBnbG9iYWxcbiAgICAgICAgICAgIC8vIHBvb2wuICBTZXR0aW5nIGl0IHRvIDEgcHJvdmlkZXMgc2lnbmlmaWNhbnQgcGVyZm9ybWFuY2UgaW1wcm92ZW1lbnRzIHdoZW4gd2UgaW5zdGFudGlhdGUgbW9yZVxuICAgICAgICAgICAgLy8gdGhhbiBvbmUgZ3JwYyBjbGllbnQuXG4gICAgICAgICAgICAnZ3JwYy51c2VfbG9jYWxfc3ViY2hhbm5lbF9wb29sJzogMSxcbiAgICAgICAgICB9XG4gICAgICAgICksXG4gICAgICBjb25maWd1cmF0aW9uOiB0aGlzLmNvbmZpZ3VyYXRpb24sXG4gICAgfSk7XG5cbiAgICB0aGlzLnRleHRFbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG4gICAgdGhpcy5kZWZhdWx0VHRsU2Vjb25kcyA9IHByb3BzLmRlZmF1bHRUdGxTZWNvbmRzO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzID0gdGhpcy5pbml0aWFsaXplSW50ZXJjZXB0b3JzKFxuICAgICAgdGhpcy5jb25maWd1cmF0aW9uLmdldExvZ2dlckZhY3RvcnkoKSxcbiAgICAgIHRoaXMuY29uZmlndXJhdGlvbi5nZXRNaWRkbGV3YXJlcygpXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRFbmRwb2ludCgpOiBzdHJpbmcge1xuICAgIGNvbnN0IGVuZHBvaW50ID0gdGhpcy5jcmVkZW50aWFsUHJvdmlkZXIuZ2V0Q2FjaGVFbmRwb2ludCgpO1xuICAgIHRoaXMubG9nZ2VyLmRlYnVnKGBVc2luZyBjYWNoZSBlbmRwb2ludDogJHtlbmRwb2ludH1gKTtcbiAgICByZXR1cm4gZW5kcG9pbnQ7XG4gIH1cblxuICBwcml2YXRlIHZhbGlkYXRlUmVxdWVzdFRpbWVvdXQodGltZW91dD86IG51bWJlcikge1xuICAgIHRoaXMubG9nZ2VyLmRlYnVnKGBSZXF1ZXN0IHRpbWVvdXQgbXM6ICR7U3RyaW5nKHRpbWVvdXQpfWApO1xuICAgIGlmICh0aW1lb3V0ICYmIHRpbWVvdXQgPD0gMCkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAncmVxdWVzdCB0aW1lb3V0IG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm8uJ1xuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNvbnZlcnRFQ2FjaGVSZXN1bHQocmVzdWx0OiBncnBjQ2FjaGUuRUNhY2hlUmVzdWx0KTogX0VDYWNoZVJlc3VsdCB7XG4gICAgc3dpdGNoIChyZXN1bHQpIHtcbiAgICAgIGNhc2UgZ3JwY0NhY2hlLkVDYWNoZVJlc3VsdC5IaXQ6XG4gICAgICAgIHJldHVybiBfRUNhY2hlUmVzdWx0LkhpdDtcbiAgICAgIGNhc2UgZ3JwY0NhY2hlLkVDYWNoZVJlc3VsdC5JbnZhbGlkOlxuICAgICAgICByZXR1cm4gX0VDYWNoZVJlc3VsdC5JbnZhbGlkO1xuICAgICAgY2FzZSBncnBjQ2FjaGUuRUNhY2hlUmVzdWx0Lk1pc3M6XG4gICAgICAgIHJldHVybiBfRUNhY2hlUmVzdWx0Lk1pc3M7XG4gICAgICBjYXNlIGdycGNDYWNoZS5FQ2FjaGVSZXN1bHQuT2s6XG4gICAgICAgIHJldHVybiBfRUNhY2hlUmVzdWx0Lk9rO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY29udmVydEl0ZW1UeXBlUmVzdWx0KFxuICAgIHJlc3VsdDogX0l0ZW1HZXRUeXBlUmVzcG9uc2UuSXRlbVR5cGVcbiAgKTogSXRlbVR5cGUge1xuICAgIHN3aXRjaCAocmVzdWx0KSB7XG4gICAgICBjYXNlIF9JdGVtR2V0VHlwZVJlc3BvbnNlLkl0ZW1UeXBlLlNDQUxBUjpcbiAgICAgICAgcmV0dXJuIEl0ZW1UeXBlLlNDQUxBUjtcbiAgICAgIGNhc2UgX0l0ZW1HZXRUeXBlUmVzcG9uc2UuSXRlbVR5cGUuTElTVDpcbiAgICAgICAgcmV0dXJuIEl0ZW1UeXBlLkxJU1Q7XG4gICAgICBjYXNlIF9JdGVtR2V0VHlwZVJlc3BvbnNlLkl0ZW1UeXBlLkRJQ1RJT05BUlk6XG4gICAgICAgIHJldHVybiBJdGVtVHlwZS5ESUNUSU9OQVJZO1xuICAgICAgY2FzZSBfSXRlbUdldFR5cGVSZXNwb25zZS5JdGVtVHlwZS5TRVQ6XG4gICAgICAgIHJldHVybiBJdGVtVHlwZS5TRVQ7XG4gICAgICBjYXNlIF9JdGVtR2V0VHlwZVJlc3BvbnNlLkl0ZW1UeXBlLlNPUlRFRF9TRVQ6XG4gICAgICAgIHJldHVybiBJdGVtVHlwZS5TT1JURURfU0VUO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzZXQoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAga2V5OiBzdHJpbmcgfCBVaW50OEFycmF5LFxuICAgIHZhbHVlOiBzdHJpbmcgfCBVaW50OEFycmF5LFxuICAgIHR0bD86IG51bWJlclxuICApOiBQcm9taXNlPENhY2hlU2V0LlJlc3BvbnNlPiB7XG4gICAgdHJ5IHtcbiAgICAgIHZhbGlkYXRlQ2FjaGVOYW1lKGNhY2hlTmFtZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gbmV3IENhY2hlU2V0LkVycm9yKG5vcm1hbGl6ZVNka0Vycm9yKGVyciBhcyBFcnJvcikpO1xuICAgIH1cbiAgICBpZiAodHRsICYmIHR0bCA8IDApIHtcbiAgICAgIHJldHVybiBuZXcgQ2FjaGVTZXQuRXJyb3IoXG4gICAgICAgIG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcigndHRsIG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyJylcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IHR0bFRvVXNlID0gdHRsIHx8IHRoaXMuZGVmYXVsdFR0bFNlY29uZHM7XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBgSXNzdWluZyAnc2V0JyByZXF1ZXN0OyBrZXk6ICR7a2V5LnRvU3RyaW5nKCl9LCB2YWx1ZSBsZW5ndGg6ICR7XG4gICAgICAgIHZhbHVlLmxlbmd0aFxuICAgICAgfSwgdHRsOiAke3R0bFRvVXNlLnRvU3RyaW5nKCl9YFxuICAgICk7XG4gICAgY29uc3QgZW5jb2RlZEtleSA9IHRoaXMuY29udmVydChrZXkpO1xuICAgIGNvbnN0IGVuY29kZWRWYWx1ZSA9IHRoaXMuY29udmVydCh2YWx1ZSk7XG5cbiAgICByZXR1cm4gYXdhaXQgdGhpcy5zZW5kU2V0KGNhY2hlTmFtZSwgZW5jb2RlZEtleSwgZW5jb2RlZFZhbHVlLCB0dGxUb1VzZSk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmRTZXQoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAga2V5OiBVaW50OEFycmF5LFxuICAgIHZhbHVlOiBVaW50OEFycmF5LFxuICAgIHR0bDogbnVtYmVyXG4gICk6IFByb21pc2U8Q2FjaGVTZXQuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fU2V0UmVxdWVzdCh7XG4gICAgICBjYWNoZV9ib2R5OiB2YWx1ZSxcbiAgICAgIGNhY2hlX2tleToga2V5LFxuICAgICAgdHRsX21pbGxpc2Vjb25kczogdHRsICogMTAwMCxcbiAgICB9KTtcbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuY3JlYXRlTWV0YWRhdGEoY2FjaGVOYW1lKTtcbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuU2V0KFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnMsXG4gICAgICAgIH0sXG4gICAgICAgIChlcnIsIHJlc3ApID0+IHtcbiAgICAgICAgICBpZiAocmVzcCkge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVTZXQuU3VjY2VzcygpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVTZXQuRXJyb3IoY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIoZXJyKSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzZXRGZXRjaChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBzZXROYW1lOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxDYWNoZVNldEZldGNoLlJlc3BvbnNlPiB7XG4gICAgdHJ5IHtcbiAgICAgIHZhbGlkYXRlQ2FjaGVOYW1lKGNhY2hlTmFtZSk7XG4gICAgICB2YWxpZGF0ZVNldE5hbWUoc2V0TmFtZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gbmV3IENhY2hlU2V0RmV0Y2guRXJyb3Iobm9ybWFsaXplU2RrRXJyb3IoZXJyIGFzIEVycm9yKSk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCB0aGlzLnNlbmRTZXRGZXRjaChjYWNoZU5hbWUsIHRoaXMuY29udmVydChzZXROYW1lKSk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmRTZXRGZXRjaChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBzZXROYW1lOiBVaW50OEFycmF5XG4gICk6IFByb21pc2U8Q2FjaGVTZXRGZXRjaC5SZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgZ3JwY0NhY2hlLl9TZXRGZXRjaFJlcXVlc3Qoe1xuICAgICAgc2V0X25hbWU6IHNldE5hbWUsXG4gICAgfSk7XG4gICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLmNyZWF0ZU1ldGFkYXRhKGNhY2hlTmFtZSk7XG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgdGhpcy5jbGllbnRXcmFwcGVyLmdldENsaWVudCgpLlNldEZldGNoKFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnMsXG4gICAgICAgIH0sXG4gICAgICAgIChlcnIsIHJlc3ApID0+IHtcbiAgICAgICAgICBpZiAocmVzcD8ubWlzc2luZykge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVTZXRGZXRjaC5NaXNzKCkpO1xuICAgICAgICAgIH0gZWxzZSBpZiAocmVzcD8uZm91bmQpIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlU2V0RmV0Y2guSGl0KHJlc3AuZm91bmQuZWxlbWVudHMpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVTZXRGZXRjaC5FcnJvcihjYWNoZVNlcnZpY2VFcnJvck1hcHBlcihlcnIpKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHNldEFkZEVsZW1lbnRzKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIHNldE5hbWU6IHN0cmluZyxcbiAgICBlbGVtZW50czogc3RyaW5nW10gfCBVaW50OEFycmF5W10sXG4gICAgdHRsOiBDb2xsZWN0aW9uVHRsID0gQ29sbGVjdGlvblR0bC5mcm9tQ2FjaGVUdGwoKVxuICApOiBQcm9taXNlPENhY2hlU2V0QWRkRWxlbWVudHMuUmVzcG9uc2U+IHtcbiAgICB0cnkge1xuICAgICAgdmFsaWRhdGVDYWNoZU5hbWUoY2FjaGVOYW1lKTtcbiAgICAgIHZhbGlkYXRlU2V0TmFtZShzZXROYW1lKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBuZXcgQ2FjaGVTZXRBZGRFbGVtZW50cy5FcnJvcihub3JtYWxpemVTZGtFcnJvcihlcnIgYXMgRXJyb3IpKTtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuc2VuZFNldEFkZEVsZW1lbnRzKFxuICAgICAgY2FjaGVOYW1lLFxuICAgICAgdGhpcy5jb252ZXJ0KHNldE5hbWUpLFxuICAgICAgdGhpcy5jb252ZXJ0QXJyYXkoZWxlbWVudHMpLFxuICAgICAgdHRsLnR0bE1pbGxpc2Vjb25kcygpIHx8IHRoaXMuZGVmYXVsdFR0bFNlY29uZHMgKiAxMDAwLFxuICAgICAgdHRsLnJlZnJlc2hUdGwoKVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmRTZXRBZGRFbGVtZW50cyhcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBzZXROYW1lOiBVaW50OEFycmF5LFxuICAgIGVsZW1lbnRzOiBVaW50OEFycmF5W10sXG4gICAgdHRsTWlsbGlzZWNvbmRzOiBudW1iZXIsXG4gICAgcmVmcmVzaFR0bDogYm9vbGVhblxuICApOiBQcm9taXNlPENhY2hlU2V0QWRkRWxlbWVudHMuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fU2V0VW5pb25SZXF1ZXN0KHtcbiAgICAgIHNldF9uYW1lOiBzZXROYW1lLFxuICAgICAgZWxlbWVudHM6IGVsZW1lbnRzLFxuICAgICAgdHRsX21pbGxpc2Vjb25kczogdHRsTWlsbGlzZWNvbmRzLFxuICAgICAgcmVmcmVzaF90dGw6IHJlZnJlc2hUdGwsXG4gICAgfSk7XG4gICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLmNyZWF0ZU1ldGFkYXRhKGNhY2hlTmFtZSk7XG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgdGhpcy5jbGllbnRXcmFwcGVyLmdldENsaWVudCgpLlNldFVuaW9uKFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnMsXG4gICAgICAgIH0sXG4gICAgICAgIGVyciA9PiB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgcmVzb2x2ZShcbiAgICAgICAgICAgICAgbmV3IENhY2hlU2V0QWRkRWxlbWVudHMuRXJyb3IoY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlU2V0QWRkRWxlbWVudHMuU3VjY2VzcygpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc2V0UmVtb3ZlRWxlbWVudHMoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgc2V0TmFtZTogc3RyaW5nLFxuICAgIGVsZW1lbnRzOiBzdHJpbmdbXSB8IFVpbnQ4QXJyYXlbXVxuICApOiBQcm9taXNlPENhY2hlU2V0UmVtb3ZlRWxlbWVudHMuUmVzcG9uc2U+IHtcbiAgICB0cnkge1xuICAgICAgdmFsaWRhdGVDYWNoZU5hbWUoY2FjaGVOYW1lKTtcbiAgICAgIHZhbGlkYXRlU2V0TmFtZShzZXROYW1lKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBuZXcgQ2FjaGVTZXRSZW1vdmVFbGVtZW50cy5FcnJvcihub3JtYWxpemVTZGtFcnJvcihlcnIgYXMgRXJyb3IpKTtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuc2VuZFNldFJlbW92ZUVsZW1lbnRzKFxuICAgICAgY2FjaGVOYW1lLFxuICAgICAgdGhpcy5jb252ZXJ0KHNldE5hbWUpLFxuICAgICAgdGhpcy5jb252ZXJ0QXJyYXkoZWxlbWVudHMpXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2VuZFNldFJlbW92ZUVsZW1lbnRzKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIHNldE5hbWU6IFVpbnQ4QXJyYXksXG4gICAgZWxlbWVudHM6IFVpbnQ4QXJyYXlbXVxuICApOiBQcm9taXNlPENhY2hlU2V0UmVtb3ZlRWxlbWVudHMuUmVzcG9uc2U+IHtcbiAgICBjb25zdCBzdWJ0cmFoZW5kID0gbmV3IGdycGNDYWNoZS5fU2V0RGlmZmVyZW5jZVJlcXVlc3QuX1N1YnRyYWhlbmQoe1xuICAgICAgc2V0OiBuZXcgZ3JwY0NhY2hlLl9TZXREaWZmZXJlbmNlUmVxdWVzdC5fU3VidHJhaGVuZC5fU2V0KHtcbiAgICAgICAgZWxlbWVudHM6IGVsZW1lbnRzLFxuICAgICAgfSksXG4gICAgfSk7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBncnBjQ2FjaGUuX1NldERpZmZlcmVuY2VSZXF1ZXN0KHtcbiAgICAgIHNldF9uYW1lOiBzZXROYW1lLFxuICAgICAgc3VidHJhaGVuZDogc3VidHJhaGVuZCxcbiAgICB9KTtcblxuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHRoaXMuY2xpZW50V3JhcHBlci5nZXRDbGllbnQoKS5TZXREaWZmZXJlbmNlKFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnMsXG4gICAgICAgIH0sXG4gICAgICAgIGVyciA9PiB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgcmVzb2x2ZShcbiAgICAgICAgICAgICAgbmV3IENhY2hlU2V0UmVtb3ZlRWxlbWVudHMuRXJyb3IoY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlU2V0UmVtb3ZlRWxlbWVudHMuU3VjY2VzcygpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc2V0SWZOb3RFeGlzdHMoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAga2V5OiBzdHJpbmcgfCBVaW50OEFycmF5LFxuICAgIHZhbHVlOiBzdHJpbmcgfCBVaW50OEFycmF5LFxuICAgIHR0bD86IG51bWJlclxuICApOiBQcm9taXNlPENhY2hlU2V0SWZOb3RFeGlzdHMuUmVzcG9uc2U+IHtcbiAgICB0cnkge1xuICAgICAgdmFsaWRhdGVDYWNoZU5hbWUoY2FjaGVOYW1lKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBuZXcgQ2FjaGVTZXRJZk5vdEV4aXN0cy5FcnJvcihub3JtYWxpemVTZGtFcnJvcihlcnIgYXMgRXJyb3IpKTtcbiAgICB9XG4gICAgaWYgKHR0bCAmJiB0dGwgPCAwKSB7XG4gICAgICByZXR1cm4gbmV3IENhY2hlU2V0SWZOb3RFeGlzdHMuRXJyb3IoXG4gICAgICAgIG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcigndHRsIG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyJylcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgYElzc3VpbmcgJ3NldElmTm90RXhpc3RzJyByZXF1ZXN0OyBrZXk6ICR7a2V5LnRvU3RyaW5nKCl9LCBmaWVsZDogJHt2YWx1ZS50b1N0cmluZygpfSwgdHRsOiAke1xuICAgICAgICB0dGw/LnRvU3RyaW5nKCkgPz8gJ251bGwnXG4gICAgICB9YFxuICAgICk7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNlbmRTZXRJZk5vdEV4aXN0cyhcbiAgICAgIGNhY2hlTmFtZSxcbiAgICAgIHRoaXMuY29udmVydChrZXkpLFxuICAgICAgdGhpcy5jb252ZXJ0KHZhbHVlKSxcbiAgICAgIHR0bCB8fCB0aGlzLmRlZmF1bHRUdGxTZWNvbmRzICogMTAwMFxuICAgICk7XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoYCdzZXRJZk5vdEV4aXN0cycgcmVxdWVzdCByZXN1bHQ6ICR7cmVzdWx0LnRvU3RyaW5nKCl9YCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2VuZFNldElmTm90RXhpc3RzKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGtleTogVWludDhBcnJheSxcbiAgICB2YWx1ZTogVWludDhBcnJheSxcbiAgICB0dGxNaWxsaXNlY29uZHM6IG51bWJlclxuICApOiBQcm9taXNlPENhY2hlU2V0SWZOb3RFeGlzdHMuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fU2V0SWZOb3RFeGlzdHNSZXF1ZXN0KHtcbiAgICAgIGNhY2hlX2tleToga2V5LFxuICAgICAgY2FjaGVfYm9keTogdmFsdWUsXG4gICAgICB0dGxfbWlsbGlzZWNvbmRzOiB0dGxNaWxsaXNlY29uZHMsXG4gICAgfSk7XG4gICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLmNyZWF0ZU1ldGFkYXRhKGNhY2hlTmFtZSk7XG5cbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuU2V0SWZOb3RFeGlzdHMoXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgaW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9ycyxcbiAgICAgICAgfSxcbiAgICAgICAgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHJlc3AucmVzdWx0KSB7XG4gICAgICAgICAgICAgIGNhc2UgJ3N0b3JlZCc6XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVTZXRJZk5vdEV4aXN0cy5TdG9yZWQoKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ25vdF9zdG9yZWQnOlxuICAgICAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlU2V0SWZOb3RFeGlzdHMuTm90U3RvcmVkKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgICAgICAgICBuZXcgQ2FjaGVHZXQuRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIG5ldyBVbmtub3duRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgJ1NldElmTm90RXhpc3RzIHJlc3BvbmRlZCB3aXRoIGFuIHVua25vd24gcmVzdWx0J1xuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZShcbiAgICAgICAgICAgICAgbmV3IENhY2hlU2V0SWZOb3RFeGlzdHMuRXJyb3IoY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGRlbGV0ZShcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBrZXk6IHN0cmluZyB8IFVpbnQ4QXJyYXlcbiAgKTogUHJvbWlzZTxDYWNoZURlbGV0ZS5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUNhY2hlTmFtZShjYWNoZU5hbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIG5ldyBDYWNoZURlbGV0ZS5FcnJvcihub3JtYWxpemVTZGtFcnJvcihlcnIgYXMgRXJyb3IpKTtcbiAgICB9XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoYElzc3VpbmcgJ2RlbGV0ZScgcmVxdWVzdDsga2V5OiAke2tleS50b1N0cmluZygpfWApO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnNlbmREZWxldGUoY2FjaGVOYW1lLCB0aGlzLmNvbnZlcnQoa2V5KSk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmREZWxldGUoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAga2V5OiBVaW50OEFycmF5XG4gICk6IFByb21pc2U8Q2FjaGVEZWxldGUuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fRGVsZXRlUmVxdWVzdCh7XG4gICAgICBjYWNoZV9rZXk6IGtleSxcbiAgICB9KTtcbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuY3JlYXRlTWV0YWRhdGEoY2FjaGVOYW1lKTtcbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuRGVsZXRlKFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnMsXG4gICAgICAgIH0sXG4gICAgICAgIChlcnIsIHJlc3ApID0+IHtcbiAgICAgICAgICBpZiAocmVzcCkge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVEZWxldGUuU3VjY2VzcygpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVEZWxldGUuRXJyb3IoY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIoZXJyKSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXQoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAga2V5OiBzdHJpbmcgfCBVaW50OEFycmF5XG4gICk6IFByb21pc2U8Q2FjaGVHZXQuUmVzcG9uc2U+IHtcbiAgICB0cnkge1xuICAgICAgdmFsaWRhdGVDYWNoZU5hbWUoY2FjaGVOYW1lKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBuZXcgQ2FjaGVHZXQuRXJyb3Iobm9ybWFsaXplU2RrRXJyb3IoZXJyIGFzIEVycm9yKSk7XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKGBJc3N1aW5nICdnZXQnIHJlcXVlc3Q7IGtleTogJHtrZXkudG9TdHJpbmcoKX1gKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNlbmRHZXQoY2FjaGVOYW1lLCB0aGlzLmNvbnZlcnQoa2V5KSk7XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoYCdnZXQnIHJlcXVlc3QgcmVzdWx0OiAke3Jlc3VsdC50b1N0cmluZygpfWApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmRHZXQoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAga2V5OiBVaW50OEFycmF5XG4gICk6IFByb21pc2U8Q2FjaGVHZXQuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fR2V0UmVxdWVzdCh7XG4gICAgICBjYWNoZV9rZXk6IGtleSxcbiAgICB9KTtcbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuY3JlYXRlTWV0YWRhdGEoY2FjaGVOYW1lKTtcblxuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHRoaXMuY2xpZW50V3JhcHBlci5nZXRDbGllbnQoKS5HZXQoXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgaW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9ycyxcbiAgICAgICAgfSxcbiAgICAgICAgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHJlc3AucmVzdWx0KSB7XG4gICAgICAgICAgICAgIGNhc2UgZ3JwY0NhY2hlLkVDYWNoZVJlc3VsdC5NaXNzOlxuICAgICAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlR2V0Lk1pc3MoKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgZ3JwY0NhY2hlLkVDYWNoZVJlc3VsdC5IaXQ6XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVHZXQuSGl0KHJlc3AuY2FjaGVfYm9keSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIGdycGNDYWNoZS5FQ2FjaGVSZXN1bHQuSW52YWxpZDpcbiAgICAgICAgICAgICAgY2FzZSBncnBjQ2FjaGUuRUNhY2hlUmVzdWx0Lk9rOlxuICAgICAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlR2V0LkVycm9yKG5ldyBVbmtub3duRXJyb3IocmVzcC5tZXNzYWdlKSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgICAgICAgICBuZXcgQ2FjaGVHZXQuRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIG5ldyBVbmtub3duRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgJ0FuIHVua25vd24gZXJyb3Igb2NjdXJyZWQ6ICcgKyByZXNwLm1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlR2V0LkVycm9yKGNhY2hlU2VydmljZUVycm9yTWFwcGVyKGVycikpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgbGlzdENvbmNhdGVuYXRlQmFjayhcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBsaXN0TmFtZTogc3RyaW5nLFxuICAgIHZhbHVlczogc3RyaW5nW10gfCBVaW50OEFycmF5W10sXG4gICAgdHJ1bmNhdGVGcm9udFRvU2l6ZT86IG51bWJlcixcbiAgICB0dGw6IENvbGxlY3Rpb25UdGwgPSBDb2xsZWN0aW9uVHRsLmZyb21DYWNoZVR0bCgpXG4gICk6IFByb21pc2U8Q2FjaGVMaXN0Q29uY2F0ZW5hdGVCYWNrLlJlc3BvbnNlPiB7XG4gICAgdHJ5IHtcbiAgICAgIHZhbGlkYXRlQ2FjaGVOYW1lKGNhY2hlTmFtZSk7XG4gICAgICB2YWxpZGF0ZUxpc3ROYW1lKGxpc3ROYW1lKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBuZXcgQ2FjaGVMaXN0Q29uY2F0ZW5hdGVCYWNrLkVycm9yKFxuICAgICAgICBub3JtYWxpemVTZGtFcnJvcihlcnIgYXMgRXJyb3IpXG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgYElzc3VpbmcgJ2xpc3RDb25jYXRlbmF0ZUJhY2snIHJlcXVlc3Q7IGxpc3ROYW1lOiAke2xpc3ROYW1lfSwgdmFsdWVzIGxlbmd0aDogJHtcbiAgICAgICAgdmFsdWVzLmxlbmd0aFxuICAgICAgfSwgJHt0dGwudG9TdHJpbmcoKX0sIHRydW5jYXRlRnJvbnRUb1NpemU6ICR7XG4gICAgICAgIHRydW5jYXRlRnJvbnRUb1NpemU/LnRvU3RyaW5nKCkgPz8gJ251bGwnXG4gICAgICB9YFxuICAgICk7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNlbmRMaXN0Q29uY2F0ZW5hdGVCYWNrKFxuICAgICAgY2FjaGVOYW1lLFxuICAgICAgdGhpcy5jb252ZXJ0KGxpc3ROYW1lKSxcbiAgICAgIHRoaXMuY29udmVydEFycmF5KHZhbHVlcyksXG4gICAgICB0dGwudHRsTWlsbGlzZWNvbmRzKCkgfHwgdGhpcy5kZWZhdWx0VHRsU2Vjb25kcyAqIDEwMDAsXG4gICAgICB0dGwucmVmcmVzaFR0bCgpLFxuICAgICAgdHJ1bmNhdGVGcm9udFRvU2l6ZVxuICAgICk7XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBgJ2xpc3RDb25jYXRlbmF0ZUJhY2snIHJlcXVlc3QgcmVzdWx0OiAke3Jlc3VsdC50b1N0cmluZygpfWBcbiAgICApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmRMaXN0Q29uY2F0ZW5hdGVCYWNrKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGxpc3ROYW1lOiBVaW50OEFycmF5LFxuICAgIHZhbHVlczogVWludDhBcnJheVtdLFxuICAgIHR0bE1pbGxpc2Vjb25kczogbnVtYmVyLFxuICAgIHJlZnJlc2hUdGw6IGJvb2xlYW4sXG4gICAgdHJ1bmNhdGVGcm9udFRvU2l6ZT86IG51bWJlclxuICApOiBQcm9taXNlPENhY2hlTGlzdENvbmNhdGVuYXRlQmFjay5SZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgZ3JwY0NhY2hlLl9MaXN0Q29uY2F0ZW5hdGVCYWNrUmVxdWVzdCh7XG4gICAgICBsaXN0X25hbWU6IGxpc3ROYW1lLFxuICAgICAgdmFsdWVzOiB2YWx1ZXMsXG4gICAgICB0dGxfbWlsbGlzZWNvbmRzOiB0dGxNaWxsaXNlY29uZHMsXG4gICAgICByZWZyZXNoX3R0bDogcmVmcmVzaFR0bCxcbiAgICAgIHRydW5jYXRlX2Zyb250X3RvX3NpemU6IHRydW5jYXRlRnJvbnRUb1NpemUsXG4gICAgfSk7XG4gICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLmNyZWF0ZU1ldGFkYXRhKGNhY2hlTmFtZSk7XG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgdGhpcy5jbGllbnRXcmFwcGVyLmdldENsaWVudCgpLkxpc3RDb25jYXRlbmF0ZUJhY2soXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgaW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9ycyxcbiAgICAgICAgfSxcbiAgICAgICAgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwKSB7XG4gICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZUxpc3RDb25jYXRlbmF0ZUJhY2suU3VjY2VzcyhyZXNwLmxpc3RfbGVuZ3RoKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgICAgIG5ldyBDYWNoZUxpc3RDb25jYXRlbmF0ZUJhY2suRXJyb3IoY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGxpc3RDb25jYXRlbmF0ZUZyb250KFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGxpc3ROYW1lOiBzdHJpbmcsXG4gICAgdmFsdWVzOiBzdHJpbmdbXSB8IFVpbnQ4QXJyYXlbXSxcbiAgICB0cnVuY2F0ZUJhY2tUb1NpemU/OiBudW1iZXIsXG4gICAgdHRsOiBDb2xsZWN0aW9uVHRsID0gQ29sbGVjdGlvblR0bC5mcm9tQ2FjaGVUdGwoKVxuICApOiBQcm9taXNlPENhY2hlTGlzdENvbmNhdGVuYXRlRnJvbnQuUmVzcG9uc2U+IHtcbiAgICB0cnkge1xuICAgICAgdmFsaWRhdGVDYWNoZU5hbWUoY2FjaGVOYW1lKTtcbiAgICAgIHZhbGlkYXRlTGlzdE5hbWUobGlzdE5hbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIG5ldyBDYWNoZUxpc3RDb25jYXRlbmF0ZUZyb250LkVycm9yKFxuICAgICAgICBub3JtYWxpemVTZGtFcnJvcihlcnIgYXMgRXJyb3IpXG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgYElzc3VpbmcgJ2xpc3RDb25jYXRlbmF0ZUZyb250JyByZXF1ZXN0OyBsaXN0TmFtZTogJHtsaXN0TmFtZX0sIHZhbHVlcyBsZW5ndGg6ICR7XG4gICAgICAgIHZhbHVlcy5sZW5ndGhcbiAgICAgIH0sICR7dHRsLnRvU3RyaW5nKCl9LCB0cnVuY2F0ZUJhY2tUb1NpemU6ICR7XG4gICAgICAgIHRydW5jYXRlQmFja1RvU2l6ZT8udG9TdHJpbmcoKSA/PyAnbnVsbCdcbiAgICAgIH1gXG4gICAgKTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc2VuZExpc3RDb25jYXRlbmF0ZUZyb250KFxuICAgICAgY2FjaGVOYW1lLFxuICAgICAgdGhpcy5jb252ZXJ0KGxpc3ROYW1lKSxcbiAgICAgIHRoaXMuY29udmVydEFycmF5KHZhbHVlcyksXG4gICAgICB0dGwudHRsTWlsbGlzZWNvbmRzKCkgfHwgdGhpcy5kZWZhdWx0VHRsU2Vjb25kcyAqIDEwMDAsXG4gICAgICB0dGwucmVmcmVzaFR0bCgpLFxuICAgICAgdHJ1bmNhdGVCYWNrVG9TaXplXG4gICAgKTtcbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIGAnbGlzdENvbmNhdGVuYXRlRnJvbnQnIHJlcXVlc3QgcmVzdWx0OiAke3Jlc3VsdC50b1N0cmluZygpfWBcbiAgICApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmRMaXN0Q29uY2F0ZW5hdGVGcm9udChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBsaXN0TmFtZTogVWludDhBcnJheSxcbiAgICB2YWx1ZXM6IFVpbnQ4QXJyYXlbXSxcbiAgICB0dGxNaWxsaXNlY29uZHM6IG51bWJlcixcbiAgICByZWZyZXNoVHRsOiBib29sZWFuLFxuICAgIHRydW5jYXRlQmFja1RvU2l6ZT86IG51bWJlclxuICApOiBQcm9taXNlPENhY2hlTGlzdENvbmNhdGVuYXRlRnJvbnQuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fTGlzdENvbmNhdGVuYXRlRnJvbnRSZXF1ZXN0KHtcbiAgICAgIGxpc3RfbmFtZTogbGlzdE5hbWUsXG4gICAgICB2YWx1ZXM6IHZhbHVlcyxcbiAgICAgIHR0bF9taWxsaXNlY29uZHM6IHR0bE1pbGxpc2Vjb25kcyxcbiAgICAgIHJlZnJlc2hfdHRsOiByZWZyZXNoVHRsLFxuICAgICAgdHJ1bmNhdGVfYmFja190b19zaXplOiB0cnVuY2F0ZUJhY2tUb1NpemUsXG4gICAgfSk7XG4gICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLmNyZWF0ZU1ldGFkYXRhKGNhY2hlTmFtZSk7XG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgdGhpcy5jbGllbnRXcmFwcGVyLmdldENsaWVudCgpLkxpc3RDb25jYXRlbmF0ZUZyb250KFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnMsXG4gICAgICAgIH0sXG4gICAgICAgIChlcnIsIHJlc3ApID0+IHtcbiAgICAgICAgICBpZiAocmVzcCkge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVMaXN0Q29uY2F0ZW5hdGVGcm9udC5TdWNjZXNzKHJlc3AubGlzdF9sZW5ndGgpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZShcbiAgICAgICAgICAgICAgbmV3IENhY2hlTGlzdENvbmNhdGVuYXRlRnJvbnQuRXJyb3IoY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGxpc3RGZXRjaChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBsaXN0TmFtZTogc3RyaW5nLFxuICAgIHN0YXJ0SW5kZXg/OiBudW1iZXIsXG4gICAgZW5kSW5kZXg/OiBudW1iZXJcbiAgKTogUHJvbWlzZTxDYWNoZUxpc3RGZXRjaC5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUNhY2hlTmFtZShjYWNoZU5hbWUpO1xuICAgICAgdmFsaWRhdGVMaXN0TmFtZShsaXN0TmFtZSk7XG4gICAgICB2YWxpZGF0ZUxpc3RTbGljZVN0YXJ0RW5kKHN0YXJ0SW5kZXgsIGVuZEluZGV4KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBuZXcgQ2FjaGVMaXN0RmV0Y2guRXJyb3Iobm9ybWFsaXplU2RrRXJyb3IoZXJyIGFzIEVycm9yKSk7XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgXCJJc3N1aW5nICdsaXN0RmV0Y2gnIHJlcXVlc3Q7IGxpc3ROYW1lOiAlcywgc3RhcnRJbmRleDogJXMsIGVuZEluZGV4OiAlc1wiLFxuICAgICAgbGlzdE5hbWUsXG4gICAgICBzdGFydEluZGV4ID8/ICdudWxsJyxcbiAgICAgIGVuZEluZGV4ID8/ICdudWxsJ1xuICAgICk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5zZW5kTGlzdEZldGNoKFxuICAgICAgY2FjaGVOYW1lLFxuICAgICAgdGhpcy5jb252ZXJ0KGxpc3ROYW1lKSxcbiAgICAgIHN0YXJ0SW5kZXgsXG4gICAgICBlbmRJbmRleFxuICAgICk7XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXCInbGlzdEZldGNoJyByZXF1ZXN0IHJlc3VsdDogJXNcIiwgcmVzdWx0LnRvU3RyaW5nKCkpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmRMaXN0RmV0Y2goXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgbGlzdE5hbWU6IFVpbnQ4QXJyYXksXG4gICAgc3RhcnQ/OiBudW1iZXIsXG4gICAgZW5kPzogbnVtYmVyXG4gICk6IFByb21pc2U8Q2FjaGVMaXN0RmV0Y2guUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fTGlzdEZldGNoUmVxdWVzdCh7XG4gICAgICBsaXN0X25hbWU6IGxpc3ROYW1lLFxuICAgIH0pO1xuICAgIGlmIChzdGFydCkge1xuICAgICAgcmVxdWVzdC5pbmNsdXNpdmVfc3RhcnQgPSBzdGFydDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVxdWVzdC51bmJvdW5kZWRfc3RhcnQgPSBuZXcgX1VuYm91bmRlZCgpO1xuICAgIH1cbiAgICBpZiAoZW5kKSB7XG4gICAgICByZXF1ZXN0LmV4Y2x1c2l2ZV9lbmQgPSBlbmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcXVlc3QudW5ib3VuZGVkX2VuZCA9IG5ldyBfVW5ib3VuZGVkKCk7XG4gICAgfVxuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuXG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgdGhpcy5jbGllbnRXcmFwcGVyLmdldENsaWVudCgpLkxpc3RGZXRjaChcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgbWV0YWRhdGEsXG4gICAgICAgIHtcbiAgICAgICAgICBpbnRlcmNlcHRvcnM6IHRoaXMuaW50ZXJjZXB0b3JzLFxuICAgICAgICB9LFxuICAgICAgICAoZXJyLCByZXNwKSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3A/Lm1pc3NpbmcpIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlTGlzdEZldGNoLk1pc3MoKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChyZXNwPy5mb3VuZCkge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVMaXN0RmV0Y2guSGl0KHJlc3AuZm91bmQudmFsdWVzKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlTGlzdEZldGNoLkVycm9yKGNhY2hlU2VydmljZUVycm9yTWFwcGVyKGVycikpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgbGlzdFJldGFpbihcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBsaXN0TmFtZTogc3RyaW5nLFxuICAgIHN0YXJ0SW5kZXg/OiBudW1iZXIsXG4gICAgZW5kSW5kZXg/OiBudW1iZXIsXG4gICAgdHRsOiBDb2xsZWN0aW9uVHRsID0gQ29sbGVjdGlvblR0bC5mcm9tQ2FjaGVUdGwoKVxuICApOiBQcm9taXNlPENhY2hlTGlzdFJldGFpbi5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUNhY2hlTmFtZShjYWNoZU5hbWUpO1xuICAgICAgdmFsaWRhdGVMaXN0TmFtZShsaXN0TmFtZSk7XG4gICAgICB2YWxpZGF0ZUxpc3RTbGljZVN0YXJ0RW5kKHN0YXJ0SW5kZXgsIGVuZEluZGV4KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBuZXcgQ2FjaGVMaXN0UmV0YWluLkVycm9yKG5vcm1hbGl6ZVNka0Vycm9yKGVyciBhcyBFcnJvcikpO1xuICAgIH1cbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIFwiSXNzdWluZyAnbGlzdFJldGFpbicgcmVxdWVzdDsgbGlzdE5hbWU6ICVzLCBzdGFydEluZGV4OiAlcywgZW5kSW5kZXg6ICVzLCB0dGw6ICVzXCIsXG4gICAgICBsaXN0TmFtZSxcbiAgICAgIHN0YXJ0SW5kZXggPz8gJ251bGwnLFxuICAgICAgZW5kSW5kZXggPz8gJ251bGwnLFxuICAgICAgdHRsLnR0bFNlY29uZHMudG9TdHJpbmcoKSA/PyAnbnVsbCdcbiAgICApO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc2VuZExpc3RSZXRhaW4oXG4gICAgICBjYWNoZU5hbWUsXG4gICAgICB0aGlzLmNvbnZlcnQobGlzdE5hbWUpLFxuICAgICAgc3RhcnRJbmRleCxcbiAgICAgIGVuZEluZGV4LFxuICAgICAgdHRsLnR0bE1pbGxpc2Vjb25kcygpIHx8IHRoaXMuZGVmYXVsdFR0bFNlY29uZHMgKiAxMDAwLFxuICAgICAgdHRsLnJlZnJlc2hUdGwoKVxuICAgICk7XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXCInbGlzdFJldGFpbicgcmVxdWVzdCByZXN1bHQ6ICVzXCIsIHJlc3VsdC50b1N0cmluZygpKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzZW5kTGlzdFJldGFpbihcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBsaXN0TmFtZTogVWludDhBcnJheSxcbiAgICBzdGFydD86IG51bWJlcixcbiAgICBlbmQ/OiBudW1iZXIsXG4gICAgdHRsTWlsbGlzZWNvbmRzPzogbnVtYmVyLFxuICAgIHJlZnJlc2hUdGw/OiBib29sZWFuXG4gICk6IFByb21pc2U8Q2FjaGVMaXN0UmV0YWluLlJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBncnBjQ2FjaGUuX0xpc3RSZXRhaW5SZXF1ZXN0KHtcbiAgICAgIGxpc3RfbmFtZTogbGlzdE5hbWUsXG4gICAgICB0dGxfbWlsbGlzZWNvbmRzOiB0dGxNaWxsaXNlY29uZHMsXG4gICAgICByZWZyZXNoX3R0bDogcmVmcmVzaFR0bCxcbiAgICB9KTtcbiAgICBpZiAoc3RhcnQpIHtcbiAgICAgIHJlcXVlc3QuaW5jbHVzaXZlX3N0YXJ0ID0gc3RhcnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcXVlc3QudW5ib3VuZGVkX3N0YXJ0ID0gbmV3IF9VbmJvdW5kZWQoKTtcbiAgICB9XG4gICAgaWYgKGVuZCkge1xuICAgICAgcmVxdWVzdC5leGNsdXNpdmVfZW5kID0gZW5kO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXF1ZXN0LnVuYm91bmRlZF9lbmQgPSBuZXcgX1VuYm91bmRlZCgpO1xuICAgIH1cbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuY3JlYXRlTWV0YWRhdGEoY2FjaGVOYW1lKTtcblxuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHRoaXMuY2xpZW50V3JhcHBlci5nZXRDbGllbnQoKS5MaXN0UmV0YWluKFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnMsXG4gICAgICAgIH0sXG4gICAgICAgIChlcnIsIHJlc3ApID0+IHtcbiAgICAgICAgICBpZiAocmVzcCkge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVMaXN0UmV0YWluLlN1Y2Nlc3MoKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlTGlzdFJldGFpbi5FcnJvcihjYWNoZVNlcnZpY2VFcnJvck1hcHBlcihlcnIpKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGxpc3RMZW5ndGgoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgbGlzdE5hbWU6IHN0cmluZ1xuICApOiBQcm9taXNlPENhY2hlTGlzdExlbmd0aC5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUNhY2hlTmFtZShjYWNoZU5hbWUpO1xuICAgICAgdmFsaWRhdGVMaXN0TmFtZShsaXN0TmFtZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gbmV3IENhY2hlTGlzdExlbmd0aC5FcnJvcihub3JtYWxpemVTZGtFcnJvcihlcnIgYXMgRXJyb3IpKTtcbiAgICB9XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoYElzc3VpbmcgJ2xpc3RMZW5ndGgnIHJlcXVlc3Q7IGxpc3ROYW1lOiAke2xpc3ROYW1lfWApO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc2VuZExpc3RMZW5ndGgoY2FjaGVOYW1lLCB0aGlzLmNvbnZlcnQobGlzdE5hbWUpKTtcbiAgICB0aGlzLmxvZ2dlci50cmFjZShgJ2xpc3RMZW5ndGgnIHJlcXVlc3QgcmVzdWx0OiAke3Jlc3VsdC50b1N0cmluZygpfWApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmRMaXN0TGVuZ3RoKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGxpc3ROYW1lOiBVaW50OEFycmF5XG4gICk6IFByb21pc2U8Q2FjaGVMaXN0TGVuZ3RoLlJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBncnBjQ2FjaGUuX0xpc3RMZW5ndGhSZXF1ZXN0KHtcbiAgICAgIGxpc3RfbmFtZTogbGlzdE5hbWUsXG4gICAgfSk7XG4gICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLmNyZWF0ZU1ldGFkYXRhKGNhY2hlTmFtZSk7XG5cbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuTGlzdExlbmd0aChcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgbWV0YWRhdGEsXG4gICAgICAgIHtcbiAgICAgICAgICBpbnRlcmNlcHRvcnM6IHRoaXMuaW50ZXJjZXB0b3JzLFxuICAgICAgICB9LFxuICAgICAgICAoZXJyLCByZXNwKSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3A/Lm1pc3NpbmcpIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlTGlzdExlbmd0aC5NaXNzKCkpO1xuICAgICAgICAgIH0gZWxzZSBpZiAocmVzcD8uZm91bmQpIHtcbiAgICAgICAgICAgIC8vIFVubGlrZSBsaXN0RmV0Y2gsIGxpc3RMZW5ndGggd2lsbCByZXR1cm4gZm91bmQgaWYgdGhlcmUgaXMgbm8gbGlzdCxcbiAgICAgICAgICAgIC8vIGJ1dCB0aGVyZSB3aWxsIGJlIG5vIGxlbmd0aC5cbiAgICAgICAgICAgIGlmICghcmVzcC5mb3VuZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVMaXN0TGVuZ3RoLk1pc3MoKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZUxpc3RMZW5ndGguSGl0KHJlc3AuZm91bmQubGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlTGlzdExlbmd0aC5FcnJvcihjYWNoZVNlcnZpY2VFcnJvck1hcHBlcihlcnIpKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGxpc3RQb3BCYWNrKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGxpc3ROYW1lOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxDYWNoZUxpc3RQb3BCYWNrLlJlc3BvbnNlPiB7XG4gICAgdHJ5IHtcbiAgICAgIHZhbGlkYXRlQ2FjaGVOYW1lKGNhY2hlTmFtZSk7XG4gICAgICB2YWxpZGF0ZUxpc3ROYW1lKGxpc3ROYW1lKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBuZXcgQ2FjaGVMaXN0UG9wQmFjay5FcnJvcihub3JtYWxpemVTZGtFcnJvcihlcnIgYXMgRXJyb3IpKTtcbiAgICB9XG5cbiAgICB0aGlzLmxvZ2dlci50cmFjZShcIklzc3VpbmcgJ2xpc3RQb3BCYWNrJyByZXF1ZXN0XCIpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc2VuZExpc3RQb3BCYWNrKFxuICAgICAgY2FjaGVOYW1lLFxuICAgICAgdGhpcy5jb252ZXJ0KGxpc3ROYW1lKVxuICAgICk7XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoYCdsaXN0UG9wQmFjaycgcmVxdWVzdCByZXN1bHQ6ICR7cmVzdWx0LnRvU3RyaW5nKCl9YCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2VuZExpc3RQb3BCYWNrKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGxpc3ROYW1lOiBVaW50OEFycmF5XG4gICk6IFByb21pc2U8Q2FjaGVMaXN0UG9wQmFjay5SZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgZ3JwY0NhY2hlLl9MaXN0UG9wQmFja1JlcXVlc3Qoe1xuICAgICAgbGlzdF9uYW1lOiBsaXN0TmFtZSxcbiAgICB9KTtcbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuY3JlYXRlTWV0YWRhdGEoY2FjaGVOYW1lKTtcblxuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHRoaXMuY2xpZW50V3JhcHBlci5nZXRDbGllbnQoKS5MaXN0UG9wQmFjayhcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgbWV0YWRhdGEsXG4gICAgICAgIHtcbiAgICAgICAgICBpbnRlcmNlcHRvcnM6IHRoaXMuaW50ZXJjZXB0b3JzLFxuICAgICAgICB9LFxuICAgICAgICAoZXJyLCByZXNwKSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3A/Lm1pc3NpbmcpIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlTGlzdFBvcEJhY2suTWlzcygpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3A/LmZvdW5kKSB7XG4gICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZUxpc3RQb3BCYWNrLkhpdChyZXNwLmZvdW5kLmJhY2spKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVMaXN0UG9wQmFjay5FcnJvcihjYWNoZVNlcnZpY2VFcnJvck1hcHBlcihlcnIpKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGxpc3RQb3BGcm9udChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBsaXN0TmFtZTogc3RyaW5nXG4gICk6IFByb21pc2U8Q2FjaGVMaXN0UG9wRnJvbnQuUmVzcG9uc2U+IHtcbiAgICB0cnkge1xuICAgICAgdmFsaWRhdGVDYWNoZU5hbWUoY2FjaGVOYW1lKTtcbiAgICAgIHZhbGlkYXRlTGlzdE5hbWUobGlzdE5hbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIG5ldyBDYWNoZUxpc3RQb3BGcm9udC5FcnJvcihub3JtYWxpemVTZGtFcnJvcihlcnIgYXMgRXJyb3IpKTtcbiAgICB9XG5cbiAgICB0aGlzLmxvZ2dlci50cmFjZShcIklzc3VpbmcgJ2xpc3RQb3BGcm9udCcgcmVxdWVzdFwiKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNlbmRMaXN0UG9wRnJvbnQoXG4gICAgICBjYWNoZU5hbWUsXG4gICAgICB0aGlzLmNvbnZlcnQobGlzdE5hbWUpXG4gICAgKTtcbiAgICB0aGlzLmxvZ2dlci50cmFjZShgJ2xpc3RQb3BGcm9udCcgcmVxdWVzdCByZXN1bHQ6ICR7cmVzdWx0LnRvU3RyaW5nKCl9YCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2VuZExpc3RQb3BGcm9udChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBsaXN0TmFtZTogVWludDhBcnJheVxuICApOiBQcm9taXNlPENhY2hlTGlzdFBvcEZyb250LlJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBncnBjQ2FjaGUuX0xpc3RQb3BGcm9udFJlcXVlc3Qoe1xuICAgICAgbGlzdF9uYW1lOiBsaXN0TmFtZSxcbiAgICB9KTtcbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuY3JlYXRlTWV0YWRhdGEoY2FjaGVOYW1lKTtcblxuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHRoaXMuY2xpZW50V3JhcHBlci5nZXRDbGllbnQoKS5MaXN0UG9wRnJvbnQoXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgaW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9ycyxcbiAgICAgICAgfSxcbiAgICAgICAgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwPy5taXNzaW5nKSB7XG4gICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZUxpc3RQb3BGcm9udC5NaXNzKCkpO1xuICAgICAgICAgIH0gZWxzZSBpZiAocmVzcD8uZm91bmQpIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlTGlzdFBvcEZyb250LkhpdChyZXNwLmZvdW5kLmZyb250KSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlTGlzdFBvcEZyb250LkVycm9yKGNhY2hlU2VydmljZUVycm9yTWFwcGVyKGVycikpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgbGlzdFB1c2hCYWNrKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGxpc3ROYW1lOiBzdHJpbmcsXG4gICAgdmFsdWU6IHN0cmluZyB8IFVpbnQ4QXJyYXksXG4gICAgdHJ1bmNhdGVGcm9udFRvU2l6ZT86IG51bWJlcixcbiAgICB0dGw6IENvbGxlY3Rpb25UdGwgPSBDb2xsZWN0aW9uVHRsLmZyb21DYWNoZVR0bCgpXG4gICk6IFByb21pc2U8Q2FjaGVMaXN0UHVzaEJhY2suUmVzcG9uc2U+IHtcbiAgICB0cnkge1xuICAgICAgdmFsaWRhdGVDYWNoZU5hbWUoY2FjaGVOYW1lKTtcbiAgICAgIHZhbGlkYXRlTGlzdE5hbWUobGlzdE5hbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIG5ldyBDYWNoZUxpc3RQdXNoQmFjay5FcnJvcihub3JtYWxpemVTZGtFcnJvcihlcnIgYXMgRXJyb3IpKTtcbiAgICB9XG5cbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIGBJc3N1aW5nICdsaXN0UHVzaEJhY2snIHJlcXVlc3Q7IGxpc3ROYW1lOiAke2xpc3ROYW1lfSwgdmFsdWUgbGVuZ3RoOiAke1xuICAgICAgICB2YWx1ZS5sZW5ndGhcbiAgICAgIH0sICR7dHRsLnRvU3RyaW5nKCl9LCB0cnVuY2F0ZUZyb250VG9TaXplOiAke1xuICAgICAgICB0cnVuY2F0ZUZyb250VG9TaXplPy50b1N0cmluZygpID8/ICdudWxsJ1xuICAgICAgfWBcbiAgICApO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5zZW5kTGlzdFB1c2hCYWNrKFxuICAgICAgY2FjaGVOYW1lLFxuICAgICAgdGhpcy5jb252ZXJ0KGxpc3ROYW1lKSxcbiAgICAgIHRoaXMuY29udmVydCh2YWx1ZSksXG4gICAgICB0dGwudHRsTWlsbGlzZWNvbmRzKCkgfHwgdGhpcy5kZWZhdWx0VHRsU2Vjb25kcyAqIDEwMDAsXG4gICAgICB0dGwucmVmcmVzaFR0bCgpLFxuICAgICAgdHJ1bmNhdGVGcm9udFRvU2l6ZVxuICAgICk7XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoYCdsaXN0UHVzaEJhY2snIHJlcXVlc3QgcmVzdWx0OiAke3Jlc3VsdC50b1N0cmluZygpfWApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmRMaXN0UHVzaEJhY2soXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgbGlzdE5hbWU6IFVpbnQ4QXJyYXksXG4gICAgdmFsdWU6IFVpbnQ4QXJyYXksXG4gICAgdHRsTWlsbGlzZWNvbmRzOiBudW1iZXIsXG4gICAgcmVmcmVzaFR0bDogYm9vbGVhbixcbiAgICB0cnVuY2F0ZUZyb250VG9TaXplPzogbnVtYmVyXG4gICk6IFByb21pc2U8Q2FjaGVMaXN0UHVzaEJhY2suUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fTGlzdFB1c2hCYWNrUmVxdWVzdCh7XG4gICAgICBsaXN0X25hbWU6IGxpc3ROYW1lLFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgdHRsX21pbGxpc2Vjb25kczogdHRsTWlsbGlzZWNvbmRzLFxuICAgICAgcmVmcmVzaF90dGw6IHJlZnJlc2hUdGwsXG4gICAgICB0cnVuY2F0ZV9mcm9udF90b19zaXplOiB0cnVuY2F0ZUZyb250VG9TaXplLFxuICAgIH0pO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHRoaXMuY2xpZW50V3JhcHBlci5nZXRDbGllbnQoKS5MaXN0UHVzaEJhY2soXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgaW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9ycyxcbiAgICAgICAgfSxcbiAgICAgICAgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwKSB7XG4gICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZUxpc3RQdXNoQmFjay5TdWNjZXNzKHJlc3AubGlzdF9sZW5ndGgpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVMaXN0UHVzaEJhY2suRXJyb3IoY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIoZXJyKSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBsaXN0UHVzaEZyb250KFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGxpc3ROYW1lOiBzdHJpbmcsXG4gICAgdmFsdWU6IHN0cmluZyB8IFVpbnQ4QXJyYXksXG4gICAgdHJ1bmNhdGVCYWNrVG9TaXplPzogbnVtYmVyLFxuICAgIHR0bDogQ29sbGVjdGlvblR0bCA9IENvbGxlY3Rpb25UdGwuZnJvbUNhY2hlVHRsKClcbiAgKTogUHJvbWlzZTxDYWNoZUxpc3RQdXNoRnJvbnQuUmVzcG9uc2U+IHtcbiAgICB0cnkge1xuICAgICAgdmFsaWRhdGVDYWNoZU5hbWUoY2FjaGVOYW1lKTtcbiAgICAgIHZhbGlkYXRlTGlzdE5hbWUobGlzdE5hbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIG5ldyBDYWNoZUxpc3RQdXNoRnJvbnQuRXJyb3Iobm9ybWFsaXplU2RrRXJyb3IoZXJyIGFzIEVycm9yKSk7XG4gICAgfVxuXG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBgSXNzdWluZyAnbGlzdFB1c2hGcm9udCcgcmVxdWVzdDsgbGlzdE5hbWU6ICR7bGlzdE5hbWV9LCB2YWx1ZSBsZW5ndGg6ICR7XG4gICAgICAgIHZhbHVlLmxlbmd0aFxuICAgICAgfSwgJHt0dGwudG9TdHJpbmcoKX0sIHRydW5jYXRlQmFja1RvU2l6ZTogJHtcbiAgICAgICAgdHJ1bmNhdGVCYWNrVG9TaXplPy50b1N0cmluZygpID8/ICdudWxsJ1xuICAgICAgfWBcbiAgICApO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5zZW5kTGlzdFB1c2hGcm9udChcbiAgICAgIGNhY2hlTmFtZSxcbiAgICAgIHRoaXMuY29udmVydChsaXN0TmFtZSksXG4gICAgICB0aGlzLmNvbnZlcnQodmFsdWUpLFxuICAgICAgdHRsLnR0bE1pbGxpc2Vjb25kcygpIHx8IHRoaXMuZGVmYXVsdFR0bFNlY29uZHMgKiAxMDAwLFxuICAgICAgdHRsLnJlZnJlc2hUdGwoKSxcbiAgICAgIHRydW5jYXRlQmFja1RvU2l6ZVxuICAgICk7XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoYCdsaXN0UHVzaEZyb250JyByZXF1ZXN0IHJlc3VsdDogJHtyZXN1bHQudG9TdHJpbmcoKX1gKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzZW5kTGlzdFB1c2hGcm9udChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBsaXN0TmFtZTogVWludDhBcnJheSxcbiAgICB2YWx1ZTogVWludDhBcnJheSxcbiAgICB0dGxNaWxsaXNlY29uZHM6IG51bWJlcixcbiAgICByZWZyZXNoVHRsOiBib29sZWFuLFxuICAgIHRydW5jYXRlQmFja1RvU2l6ZT86IG51bWJlclxuICApOiBQcm9taXNlPENhY2hlTGlzdFB1c2hGcm9udC5SZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgZ3JwY0NhY2hlLl9MaXN0UHVzaEZyb250UmVxdWVzdCh7XG4gICAgICBsaXN0X25hbWU6IGxpc3ROYW1lLFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgdHRsX21pbGxpc2Vjb25kczogdHRsTWlsbGlzZWNvbmRzLFxuICAgICAgcmVmcmVzaF90dGw6IHJlZnJlc2hUdGwsXG4gICAgICB0cnVuY2F0ZV9iYWNrX3RvX3NpemU6IHRydW5jYXRlQmFja1RvU2l6ZSxcbiAgICB9KTtcbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuY3JlYXRlTWV0YWRhdGEoY2FjaGVOYW1lKTtcbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuTGlzdFB1c2hGcm9udChcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgbWV0YWRhdGEsXG4gICAgICAgIHtcbiAgICAgICAgICBpbnRlcmNlcHRvcnM6IHRoaXMuaW50ZXJjZXB0b3JzLFxuICAgICAgICB9LFxuICAgICAgICAoZXJyLCByZXNwKSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3ApIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlTGlzdFB1c2hGcm9udC5TdWNjZXNzKHJlc3AubGlzdF9sZW5ndGgpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVMaXN0UHVzaEZyb250LkVycm9yKGNhY2hlU2VydmljZUVycm9yTWFwcGVyKGVycikpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgbGlzdFJlbW92ZVZhbHVlKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGxpc3ROYW1lOiBzdHJpbmcsXG4gICAgdmFsdWU6IHN0cmluZyB8IFVpbnQ4QXJyYXlcbiAgKTogUHJvbWlzZTxDYWNoZUxpc3RSZW1vdmVWYWx1ZS5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUNhY2hlTmFtZShjYWNoZU5hbWUpO1xuICAgICAgdmFsaWRhdGVMaXN0TmFtZShsaXN0TmFtZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gbmV3IENhY2hlTGlzdFJlbW92ZVZhbHVlLkVycm9yKG5vcm1hbGl6ZVNka0Vycm9yKGVyciBhcyBFcnJvcikpO1xuICAgIH1cblxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgYElzc3VpbmcgJ2xpc3RSZW1vdmVWYWx1ZScgcmVxdWVzdDsgbGlzdE5hbWU6ICR7bGlzdE5hbWV9LCB2YWx1ZSBsZW5ndGg6ICR7dmFsdWUubGVuZ3RofWBcbiAgICApO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5zZW5kTGlzdFJlbW92ZVZhbHVlKFxuICAgICAgY2FjaGVOYW1lLFxuICAgICAgdGhpcy5jb252ZXJ0KGxpc3ROYW1lKSxcbiAgICAgIHRoaXMuY29udmVydCh2YWx1ZSlcbiAgICApO1xuICAgIHRoaXMubG9nZ2VyLnRyYWNlKGAnbGlzdFJlbW92ZVZhbHVlJyByZXF1ZXN0IHJlc3VsdDogJHtyZXN1bHQudG9TdHJpbmcoKX1gKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzZW5kTGlzdFJlbW92ZVZhbHVlKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGxpc3ROYW1lOiBVaW50OEFycmF5LFxuICAgIHZhbHVlOiBVaW50OEFycmF5XG4gICk6IFByb21pc2U8Q2FjaGVMaXN0UmVtb3ZlVmFsdWUuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fTGlzdFJlbW92ZVJlcXVlc3Qoe1xuICAgICAgbGlzdF9uYW1lOiBsaXN0TmFtZSxcbiAgICAgIGFsbF9lbGVtZW50c193aXRoX3ZhbHVlOiB2YWx1ZSxcbiAgICB9KTtcbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuY3JlYXRlTWV0YWRhdGEoY2FjaGVOYW1lKTtcbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuTGlzdFJlbW92ZShcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgbWV0YWRhdGEsXG4gICAgICAgIHtcbiAgICAgICAgICBpbnRlcmNlcHRvcnM6IHRoaXMuaW50ZXJjZXB0b3JzLFxuICAgICAgICB9LFxuICAgICAgICAoZXJyLCByZXNwKSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3ApIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlTGlzdFJlbW92ZVZhbHVlLlN1Y2Nlc3MoKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgICAgIG5ldyBDYWNoZUxpc3RSZW1vdmVWYWx1ZS5FcnJvcihjYWNoZVNlcnZpY2VFcnJvck1hcHBlcihlcnIpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGljdGlvbmFyeUZldGNoKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGRpY3Rpb25hcnlOYW1lOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxDYWNoZURpY3Rpb25hcnlGZXRjaC5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUNhY2hlTmFtZShjYWNoZU5hbWUpO1xuICAgICAgdmFsaWRhdGVEaWN0aW9uYXJ5TmFtZShkaWN0aW9uYXJ5TmFtZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gbmV3IENhY2hlRGljdGlvbmFyeUZldGNoLkVycm9yKG5vcm1hbGl6ZVNka0Vycm9yKGVyciBhcyBFcnJvcikpO1xuICAgIH1cbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIGBJc3N1aW5nICdkaWN0aW9uYXJ5RmV0Y2gnIHJlcXVlc3Q7IGRpY3Rpb25hcnlOYW1lOiAke2RpY3Rpb25hcnlOYW1lfWBcbiAgICApO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc2VuZERpY3Rpb25hcnlGZXRjaChcbiAgICAgIGNhY2hlTmFtZSxcbiAgICAgIHRoaXMuY29udmVydChkaWN0aW9uYXJ5TmFtZSlcbiAgICApO1xuICAgIHRoaXMubG9nZ2VyLnRyYWNlKGAnZGljdGlvbmFyeUZldGNoJyByZXF1ZXN0IHJlc3VsdDogJHtyZXN1bHQudG9TdHJpbmcoKX1gKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzZW5kRGljdGlvbmFyeUZldGNoKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGRpY3Rpb25hcnlOYW1lOiBVaW50OEFycmF5XG4gICk6IFByb21pc2U8Q2FjaGVEaWN0aW9uYXJ5RmV0Y2guUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fRGljdGlvbmFyeUZldGNoUmVxdWVzdCh7XG4gICAgICBkaWN0aW9uYXJ5X25hbWU6IGRpY3Rpb25hcnlOYW1lLFxuICAgIH0pO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHRoaXMuY2xpZW50V3JhcHBlci5nZXRDbGllbnQoKS5EaWN0aW9uYXJ5RmV0Y2goXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgaW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9ycyxcbiAgICAgICAgfSxcbiAgICAgICAgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwPy5mb3VuZCkge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVEaWN0aW9uYXJ5RmV0Y2guSGl0KHJlc3AuZm91bmQuaXRlbXMpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3A/Lm1pc3NpbmcpIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlRGljdGlvbmFyeUZldGNoLk1pc3MoKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgICAgIG5ldyBDYWNoZURpY3Rpb25hcnlGZXRjaC5FcnJvcihjYWNoZVNlcnZpY2VFcnJvck1hcHBlcihlcnIpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGljdGlvbmFyeVNldEZpZWxkKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGRpY3Rpb25hcnlOYW1lOiBzdHJpbmcsXG4gICAgZmllbGQ6IHN0cmluZyB8IFVpbnQ4QXJyYXksXG4gICAgdmFsdWU6IHN0cmluZyB8IFVpbnQ4QXJyYXksXG4gICAgdHRsOiBDb2xsZWN0aW9uVHRsID0gQ29sbGVjdGlvblR0bC5mcm9tQ2FjaGVUdGwoKVxuICApOiBQcm9taXNlPENhY2hlRGljdGlvbmFyeVNldEZpZWxkLlJlc3BvbnNlPiB7XG4gICAgdHJ5IHtcbiAgICAgIHZhbGlkYXRlQ2FjaGVOYW1lKGNhY2hlTmFtZSk7XG4gICAgICB2YWxpZGF0ZURpY3Rpb25hcnlOYW1lKGRpY3Rpb25hcnlOYW1lKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBuZXcgQ2FjaGVEaWN0aW9uYXJ5U2V0RmllbGQuRXJyb3Iobm9ybWFsaXplU2RrRXJyb3IoZXJyIGFzIEVycm9yKSk7XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgYElzc3VpbmcgJ2RpY3Rpb25hcnlTZXRGaWVsZCcgcmVxdWVzdDsgZmllbGQ6ICR7ZmllbGQudG9TdHJpbmcoKX0sIHZhbHVlIGxlbmd0aDogJHtcbiAgICAgICAgdmFsdWUubGVuZ3RoXG4gICAgICB9LCB0dGw6ICR7dHRsLnR0bFNlY29uZHMudG9TdHJpbmcoKSA/PyAnbnVsbCd9YFxuICAgICk7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNlbmREaWN0aW9uYXJ5U2V0RmllbGQoXG4gICAgICBjYWNoZU5hbWUsXG4gICAgICB0aGlzLmNvbnZlcnQoZGljdGlvbmFyeU5hbWUpLFxuICAgICAgdGhpcy5jb252ZXJ0KGZpZWxkKSxcbiAgICAgIHRoaXMuY29udmVydCh2YWx1ZSksXG4gICAgICB0dGwudHRsTWlsbGlzZWNvbmRzKCkgfHwgdGhpcy5kZWZhdWx0VHRsU2Vjb25kcyAqIDEwMDAsXG4gICAgICB0dGwucmVmcmVzaFR0bCgpXG4gICAgKTtcbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIGAnZGljdGlvbmFyeVNldEZpZWxkJyByZXF1ZXN0IHJlc3VsdDogJHtyZXN1bHQudG9TdHJpbmcoKX1gXG4gICAgKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzZW5kRGljdGlvbmFyeVNldEZpZWxkKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGRpY3Rpb25hcnlOYW1lOiBVaW50OEFycmF5LFxuICAgIGZpZWxkOiBVaW50OEFycmF5LFxuICAgIHZhbHVlOiBVaW50OEFycmF5LFxuICAgIHR0bE1pbGxpc2Vjb25kczogbnVtYmVyLFxuICAgIHJlZnJlc2hUdGw6IGJvb2xlYW5cbiAgKTogUHJvbWlzZTxDYWNoZURpY3Rpb25hcnlTZXRGaWVsZC5SZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgZ3JwY0NhY2hlLl9EaWN0aW9uYXJ5U2V0UmVxdWVzdCh7XG4gICAgICBkaWN0aW9uYXJ5X25hbWU6IGRpY3Rpb25hcnlOYW1lLFxuICAgICAgaXRlbXM6IHRoaXMudG9TaW5nbGV0b25GaWVsZFZhbHVlUGFpcihmaWVsZCwgdmFsdWUpLFxuICAgICAgdHRsX21pbGxpc2Vjb25kczogdHRsTWlsbGlzZWNvbmRzLFxuICAgICAgcmVmcmVzaF90dGw6IHJlZnJlc2hUdGwsXG4gICAgfSk7XG4gICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLmNyZWF0ZU1ldGFkYXRhKGNhY2hlTmFtZSk7XG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgdGhpcy5jbGllbnRXcmFwcGVyLmdldENsaWVudCgpLkRpY3Rpb25hcnlTZXQoXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgaW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9ycyxcbiAgICAgICAgfSxcbiAgICAgICAgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwKSB7XG4gICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZURpY3Rpb25hcnlTZXRGaWVsZC5TdWNjZXNzKCkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlKFxuICAgICAgICAgICAgICBuZXcgQ2FjaGVEaWN0aW9uYXJ5U2V0RmllbGQuRXJyb3IoY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGRpY3Rpb25hcnlTZXRGaWVsZHMoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgZGljdGlvbmFyeU5hbWU6IHN0cmluZyxcbiAgICBlbGVtZW50czpcbiAgICAgIHwgTWFwPHN0cmluZyB8IFVpbnQ4QXJyYXksIHN0cmluZyB8IFVpbnQ4QXJyYXk+XG4gICAgICB8IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IFVpbnQ4QXJyYXk+LFxuICAgIHR0bDogQ29sbGVjdGlvblR0bCA9IENvbGxlY3Rpb25UdGwuZnJvbUNhY2hlVHRsKClcbiAgKTogUHJvbWlzZTxDYWNoZURpY3Rpb25hcnlTZXRGaWVsZHMuUmVzcG9uc2U+IHtcbiAgICB0cnkge1xuICAgICAgdmFsaWRhdGVDYWNoZU5hbWUoY2FjaGVOYW1lKTtcbiAgICAgIHZhbGlkYXRlRGljdGlvbmFyeU5hbWUoZGljdGlvbmFyeU5hbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIG5ldyBDYWNoZURpY3Rpb25hcnlTZXRGaWVsZHMuRXJyb3IoXG4gICAgICAgIG5vcm1hbGl6ZVNka0Vycm9yKGVyciBhcyBFcnJvcilcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgYElzc3VpbmcgJ2RpY3Rpb25hcnlTZXRGaWVsZHMnIHJlcXVlc3Q7IGVsZW1lbnRzOiAke2VsZW1lbnRzLnRvU3RyaW5nKCl9LCB0dGw6ICR7XG4gICAgICAgIHR0bC50dGxTZWNvbmRzLnRvU3RyaW5nKCkgPz8gJ251bGwnXG4gICAgICB9YFxuICAgICk7XG5cbiAgICBjb25zdCBkaWN0aW9uYXJ5RmllbGRWYWx1ZVBhaXJzID0gdGhpcy5jb252ZXJ0TWFwT3JSZWNvcmQoZWxlbWVudHMpO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5zZW5kRGljdGlvbmFyeVNldEZpZWxkcyhcbiAgICAgIGNhY2hlTmFtZSxcbiAgICAgIHRoaXMuY29udmVydChkaWN0aW9uYXJ5TmFtZSksXG4gICAgICBkaWN0aW9uYXJ5RmllbGRWYWx1ZVBhaXJzLFxuICAgICAgdHRsLnR0bE1pbGxpc2Vjb25kcygpIHx8IHRoaXMuZGVmYXVsdFR0bFNlY29uZHMgKiAxMDAwLFxuICAgICAgdHRsLnJlZnJlc2hUdGwoKVxuICAgICk7XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBgJ2RpY3Rpb25hcnlTZXRGaWVsZHMnIHJlcXVlc3QgcmVzdWx0OiAke3Jlc3VsdC50b1N0cmluZygpfWBcbiAgICApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmREaWN0aW9uYXJ5U2V0RmllbGRzKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGRpY3Rpb25hcnlOYW1lOiBVaW50OEFycmF5LFxuICAgIGVsZW1lbnRzOiBncnBjQ2FjaGUuX0RpY3Rpb25hcnlGaWVsZFZhbHVlUGFpcltdLFxuICAgIHR0bE1pbGxpc2Vjb25kczogbnVtYmVyLFxuICAgIHJlZnJlc2hUdGw6IGJvb2xlYW5cbiAgKTogUHJvbWlzZTxDYWNoZURpY3Rpb25hcnlTZXRGaWVsZHMuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fRGljdGlvbmFyeVNldFJlcXVlc3Qoe1xuICAgICAgZGljdGlvbmFyeV9uYW1lOiBkaWN0aW9uYXJ5TmFtZSxcbiAgICAgIGl0ZW1zOiBlbGVtZW50cyxcbiAgICAgIHR0bF9taWxsaXNlY29uZHM6IHR0bE1pbGxpc2Vjb25kcyxcbiAgICAgIHJlZnJlc2hfdHRsOiByZWZyZXNoVHRsLFxuICAgIH0pO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHRoaXMuY2xpZW50V3JhcHBlci5nZXRDbGllbnQoKS5EaWN0aW9uYXJ5U2V0KFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnMsXG4gICAgICAgIH0sXG4gICAgICAgIChlcnIsIHJlc3ApID0+IHtcbiAgICAgICAgICBpZiAocmVzcCkge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVEaWN0aW9uYXJ5U2V0RmllbGRzLlN1Y2Nlc3MoKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgICAgIG5ldyBDYWNoZURpY3Rpb25hcnlTZXRGaWVsZHMuRXJyb3IoY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGRpY3Rpb25hcnlHZXRGaWVsZChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBkaWN0aW9uYXJ5TmFtZTogc3RyaW5nLFxuICAgIGZpZWxkOiBzdHJpbmcgfCBVaW50OEFycmF5XG4gICk6IFByb21pc2U8Q2FjaGVEaWN0aW9uYXJ5R2V0RmllbGQuUmVzcG9uc2U+IHtcbiAgICB0cnkge1xuICAgICAgdmFsaWRhdGVDYWNoZU5hbWUoY2FjaGVOYW1lKTtcbiAgICAgIHZhbGlkYXRlRGljdGlvbmFyeU5hbWUoZGljdGlvbmFyeU5hbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIG5ldyBDYWNoZURpY3Rpb25hcnlHZXRGaWVsZC5FcnJvcihcbiAgICAgICAgbm9ybWFsaXplU2RrRXJyb3IoZXJyIGFzIEVycm9yKSxcbiAgICAgICAgdGhpcy5jb252ZXJ0KGZpZWxkKVxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBgSXNzdWluZyAnZGljdGlvbmFyeUdldEZpZWxkJyByZXF1ZXN0OyBmaWVsZDogJHtmaWVsZC50b1N0cmluZygpfWBcbiAgICApO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc2VuZERpY3Rpb25hcnlHZXRGaWVsZChcbiAgICAgIGNhY2hlTmFtZSxcbiAgICAgIHRoaXMuY29udmVydChkaWN0aW9uYXJ5TmFtZSksXG4gICAgICB0aGlzLmNvbnZlcnQoZmllbGQpXG4gICAgKTtcbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIGAnZGljdGlvbmFyeUdldEZpZWxkJyByZXF1ZXN0IHJlc3VsdDogJHtyZXN1bHQudG9TdHJpbmcoKX1gXG4gICAgKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzZW5kRGljdGlvbmFyeUdldEZpZWxkKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGRpY3Rpb25hcnlOYW1lOiBVaW50OEFycmF5LFxuICAgIGZpZWxkOiBVaW50OEFycmF5XG4gICk6IFByb21pc2U8Q2FjaGVEaWN0aW9uYXJ5R2V0RmllbGQuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fRGljdGlvbmFyeUdldFJlcXVlc3Qoe1xuICAgICAgZGljdGlvbmFyeV9uYW1lOiBkaWN0aW9uYXJ5TmFtZSxcbiAgICAgIGZpZWxkczogW2ZpZWxkXSxcbiAgICB9KTtcbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuY3JlYXRlTWV0YWRhdGEoY2FjaGVOYW1lKTtcblxuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHRoaXMuY2xpZW50V3JhcHBlci5nZXRDbGllbnQoKS5EaWN0aW9uYXJ5R2V0KFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnMsXG4gICAgICAgIH0sXG4gICAgICAgIChlcnIsIHJlc3ApID0+IHtcbiAgICAgICAgICBpZiAocmVzcD8uZGljdGlvbmFyeSA9PT0gJ21pc3NpbmcnKSB7XG4gICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZURpY3Rpb25hcnlHZXRGaWVsZC5NaXNzKGZpZWxkKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChyZXNwPy5kaWN0aW9uYXJ5ID09PSAnZm91bmQnKSB7XG4gICAgICAgICAgICBpZiAocmVzcD8uZm91bmQuaXRlbXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgICAgICAgbmV3IENhY2hlRGljdGlvbmFyeUdldEZpZWxkLkVycm9yKFxuICAgICAgICAgICAgICAgICAgbmV3IFVua25vd25FcnJvcihcbiAgICAgICAgICAgICAgICAgICAgJ19EaWN0aW9uYXJ5R2V0UmVzcG9uc2VSZXNwb25zZSBjb250YWluZWQgbm8gZGF0YSBidXQgd2FzIGZvdW5kJ1xuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIGZpZWxkXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgcmVzcD8uZm91bmQuaXRlbXNbMF0ucmVzdWx0ID09PSBncnBjQ2FjaGUuRUNhY2hlUmVzdWx0Lk1pc3NcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZURpY3Rpb25hcnlHZXRGaWVsZC5NaXNzKGZpZWxkKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXNvbHZlKFxuICAgICAgICAgICAgICAgIG5ldyBDYWNoZURpY3Rpb25hcnlHZXRGaWVsZC5IaXQoXG4gICAgICAgICAgICAgICAgICByZXNwPy5mb3VuZC5pdGVtc1swXS5jYWNoZV9ib2R5LFxuICAgICAgICAgICAgICAgICAgZmllbGRcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgICAgIG5ldyBDYWNoZURpY3Rpb25hcnlHZXRGaWVsZC5FcnJvcihcbiAgICAgICAgICAgICAgICBjYWNoZVNlcnZpY2VFcnJvck1hcHBlcihlcnIpLFxuICAgICAgICAgICAgICAgIGZpZWxkXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGRpY3Rpb25hcnlHZXRGaWVsZHMoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgZGljdGlvbmFyeU5hbWU6IHN0cmluZyxcbiAgICBmaWVsZHM6IHN0cmluZ1tdIHwgVWludDhBcnJheVtdXG4gICk6IFByb21pc2U8Q2FjaGVEaWN0aW9uYXJ5R2V0RmllbGRzLlJlc3BvbnNlPiB7XG4gICAgdHJ5IHtcbiAgICAgIHZhbGlkYXRlQ2FjaGVOYW1lKGNhY2hlTmFtZSk7XG4gICAgICB2YWxpZGF0ZURpY3Rpb25hcnlOYW1lKGRpY3Rpb25hcnlOYW1lKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBuZXcgQ2FjaGVEaWN0aW9uYXJ5R2V0RmllbGRzLkVycm9yKFxuICAgICAgICBub3JtYWxpemVTZGtFcnJvcihlcnIgYXMgRXJyb3IpXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIGBJc3N1aW5nICdkaWN0aW9uYXJ5R2V0RmllbGRzJyByZXF1ZXN0OyBmaWVsZHM6ICR7ZmllbGRzLnRvU3RyaW5nKCl9YFxuICAgICk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5zZW5kRGljdGlvbmFyeUdldEZpZWxkcyhcbiAgICAgIGNhY2hlTmFtZSxcbiAgICAgIHRoaXMuY29udmVydChkaWN0aW9uYXJ5TmFtZSksXG4gICAgICB0aGlzLmNvbnZlcnRBcnJheShmaWVsZHMpXG4gICAgKTtcbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIGAnZGljdGlvbmFyeUdldEZpZWxkcycgcmVxdWVzdCByZXN1bHQ6ICR7cmVzdWx0LnRvU3RyaW5nKCl9YFxuICAgICk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2VuZERpY3Rpb25hcnlHZXRGaWVsZHMoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgZGljdGlvbmFyeU5hbWU6IFVpbnQ4QXJyYXksXG4gICAgZmllbGRzOiBVaW50OEFycmF5W11cbiAgKTogUHJvbWlzZTxDYWNoZURpY3Rpb25hcnlHZXRGaWVsZHMuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fRGljdGlvbmFyeUdldFJlcXVlc3Qoe1xuICAgICAgZGljdGlvbmFyeV9uYW1lOiBkaWN0aW9uYXJ5TmFtZSxcbiAgICAgIGZpZWxkczogZmllbGRzLFxuICAgIH0pO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuXG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgdGhpcy5jbGllbnRXcmFwcGVyLmdldENsaWVudCgpLkRpY3Rpb25hcnlHZXQoXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgaW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9ycyxcbiAgICAgICAgfSxcbiAgICAgICAgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwPy5kaWN0aW9uYXJ5ID09PSAnZm91bmQnKSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtcyA9IHJlc3AuZm91bmQuaXRlbXMubWFwKGl0ZW0gPT4ge1xuICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmNvbnZlcnRFQ2FjaGVSZXN1bHQoaXRlbS5yZXN1bHQpO1xuICAgICAgICAgICAgICByZXR1cm4gbmV3IF9EaWN0aW9uYXJ5R2V0UmVzcG9uc2VQYXJ0KHJlc3VsdCwgaXRlbS5jYWNoZV9ib2R5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVEaWN0aW9uYXJ5R2V0RmllbGRzLkhpdChpdGVtcywgZmllbGRzKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChyZXNwPy5kaWN0aW9uYXJ5ID09PSAnbWlzc2luZycpIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlRGljdGlvbmFyeUdldEZpZWxkcy5NaXNzKCkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlKFxuICAgICAgICAgICAgICBuZXcgQ2FjaGVEaWN0aW9uYXJ5R2V0RmllbGRzLkVycm9yKGNhY2hlU2VydmljZUVycm9yTWFwcGVyKGVycikpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBkaWN0aW9uYXJ5UmVtb3ZlRmllbGQoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgZGljdGlvbmFyeU5hbWU6IHN0cmluZyxcbiAgICBmaWVsZDogc3RyaW5nIHwgVWludDhBcnJheVxuICApOiBQcm9taXNlPENhY2hlRGljdGlvbmFyeVJlbW92ZUZpZWxkLlJlc3BvbnNlPiB7XG4gICAgdHJ5IHtcbiAgICAgIHZhbGlkYXRlQ2FjaGVOYW1lKGNhY2hlTmFtZSk7XG4gICAgICB2YWxpZGF0ZURpY3Rpb25hcnlOYW1lKGRpY3Rpb25hcnlOYW1lKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBuZXcgQ2FjaGVEaWN0aW9uYXJ5UmVtb3ZlRmllbGQuRXJyb3IoXG4gICAgICAgIG5vcm1hbGl6ZVNka0Vycm9yKGVyciBhcyBFcnJvcilcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgYElzc3VpbmcgJ2RpY3Rpb25hcnlSZW1vdmVGaWVsZCcgcmVxdWVzdDsgZmllbGQ6ICR7ZmllbGQudG9TdHJpbmcoKX1gXG4gICAgKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNlbmREaWN0aW9uYXJ5UmVtb3ZlRmllbGQoXG4gICAgICBjYWNoZU5hbWUsXG4gICAgICB0aGlzLmNvbnZlcnQoZGljdGlvbmFyeU5hbWUpLFxuICAgICAgdGhpcy5jb252ZXJ0KGZpZWxkKVxuICAgICk7XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBgJ2RpY3Rpb25hcnlSZW1vdmVGaWVsZCcgcmVxdWVzdCByZXN1bHQ6ICR7cmVzdWx0LnRvU3RyaW5nKCl9YFxuICAgICk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2VuZERpY3Rpb25hcnlSZW1vdmVGaWVsZChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBkaWN0aW9uYXJ5TmFtZTogVWludDhBcnJheSxcbiAgICBmaWVsZDogVWludDhBcnJheVxuICApOiBQcm9taXNlPENhY2hlRGljdGlvbmFyeVJlbW92ZUZpZWxkLlJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBncnBjQ2FjaGUuX0RpY3Rpb25hcnlEZWxldGVSZXF1ZXN0KHtcbiAgICAgIGRpY3Rpb25hcnlfbmFtZTogZGljdGlvbmFyeU5hbWUsXG4gICAgICBzb21lOiBuZXcgZ3JwY0NhY2hlLl9EaWN0aW9uYXJ5RGVsZXRlUmVxdWVzdC5Tb21lKCksXG4gICAgfSk7XG4gICAgcmVxdWVzdC5zb21lLmZpZWxkcy5wdXNoKGZpZWxkKTtcbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuY3JlYXRlTWV0YWRhdGEoY2FjaGVOYW1lKTtcblxuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHRoaXMuY2xpZW50V3JhcHBlci5nZXRDbGllbnQoKS5EaWN0aW9uYXJ5RGVsZXRlKFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnMsXG4gICAgICAgIH0sXG4gICAgICAgIChlcnIsIHJlc3ApID0+IHtcbiAgICAgICAgICBpZiAocmVzcCkge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVEaWN0aW9uYXJ5UmVtb3ZlRmllbGQuU3VjY2VzcygpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZShcbiAgICAgICAgICAgICAgbmV3IENhY2hlRGljdGlvbmFyeVJlbW92ZUZpZWxkLkVycm9yKGNhY2hlU2VydmljZUVycm9yTWFwcGVyKGVycikpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBkaWN0aW9uYXJ5UmVtb3ZlRmllbGRzKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGRpY3Rpb25hcnlOYW1lOiBzdHJpbmcsXG4gICAgZmllbGRzOiBzdHJpbmdbXSB8IFVpbnQ4QXJyYXlbXVxuICApOiBQcm9taXNlPENhY2hlRGljdGlvbmFyeVJlbW92ZUZpZWxkcy5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUNhY2hlTmFtZShjYWNoZU5hbWUpO1xuICAgICAgdmFsaWRhdGVEaWN0aW9uYXJ5TmFtZShkaWN0aW9uYXJ5TmFtZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gbmV3IENhY2hlRGljdGlvbmFyeVJlbW92ZUZpZWxkcy5FcnJvcihcbiAgICAgICAgbm9ybWFsaXplU2RrRXJyb3IoZXJyIGFzIEVycm9yKVxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBgSXNzdWluZyAnZGljdGlvbmFyeVJlbW92ZUZpZWxkcycgcmVxdWVzdDsgZmllbGRzOiAke2ZpZWxkcy50b1N0cmluZygpfWBcbiAgICApO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc2VuZERpY3Rpb25hcnlSZW1vdmVGaWVsZHMoXG4gICAgICBjYWNoZU5hbWUsXG4gICAgICB0aGlzLmNvbnZlcnQoZGljdGlvbmFyeU5hbWUpLFxuICAgICAgdGhpcy5jb252ZXJ0QXJyYXkoZmllbGRzKVxuICAgICk7XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBgJ2RpY3Rpb25hcnlSZW1vdmVGaWVsZHMnIHJlcXVlc3QgcmVzdWx0OiAke3Jlc3VsdC50b1N0cmluZygpfWBcbiAgICApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmREaWN0aW9uYXJ5UmVtb3ZlRmllbGRzKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGRpY3Rpb25hcnlOYW1lOiBVaW50OEFycmF5LFxuICAgIGZpZWxkczogVWludDhBcnJheVtdXG4gICk6IFByb21pc2U8Q2FjaGVEaWN0aW9uYXJ5UmVtb3ZlRmllbGRzLlJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBncnBjQ2FjaGUuX0RpY3Rpb25hcnlEZWxldGVSZXF1ZXN0KHtcbiAgICAgIGRpY3Rpb25hcnlfbmFtZTogZGljdGlvbmFyeU5hbWUsXG4gICAgICBzb21lOiBuZXcgZ3JwY0NhY2hlLl9EaWN0aW9uYXJ5RGVsZXRlUmVxdWVzdC5Tb21lKCksXG4gICAgfSk7XG4gICAgZmllbGRzLmZvckVhY2goZmllbGQgPT4gcmVxdWVzdC5zb21lLmZpZWxkcy5wdXNoKGZpZWxkKSk7XG4gICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLmNyZWF0ZU1ldGFkYXRhKGNhY2hlTmFtZSk7XG5cbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuRGljdGlvbmFyeURlbGV0ZShcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgbWV0YWRhdGEsXG4gICAgICAgIHtcbiAgICAgICAgICBpbnRlcmNlcHRvcnM6IHRoaXMuaW50ZXJjZXB0b3JzLFxuICAgICAgICB9LFxuICAgICAgICAoZXJyLCByZXNwKSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3ApIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlRGljdGlvbmFyeVJlbW92ZUZpZWxkcy5TdWNjZXNzKCkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlKFxuICAgICAgICAgICAgICBuZXcgQ2FjaGVEaWN0aW9uYXJ5UmVtb3ZlRmllbGRzLkVycm9yKFxuICAgICAgICAgICAgICAgIGNhY2hlU2VydmljZUVycm9yTWFwcGVyKGVycilcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgaW5jcmVtZW50KFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGZpZWxkOiBzdHJpbmcgfCBVaW50OEFycmF5LFxuICAgIGFtb3VudCA9IDEsXG4gICAgdHRsPzogbnVtYmVyXG4gICk6IFByb21pc2U8Q2FjaGVJbmNyZW1lbnQuUmVzcG9uc2U+IHtcbiAgICB0cnkge1xuICAgICAgdmFsaWRhdGVDYWNoZU5hbWUoY2FjaGVOYW1lKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBuZXcgQ2FjaGVJbmNyZW1lbnQuRXJyb3Iobm9ybWFsaXplU2RrRXJyb3IoZXJyIGFzIEVycm9yKSk7XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgYElzc3VpbmcgJ2luY3JlbWVudCcgcmVxdWVzdDsgZmllbGQ6ICR7ZmllbGQudG9TdHJpbmcoKX0sIGFtb3VudCA6ICR7YW1vdW50fSwgdHRsOiAke1xuICAgICAgICB0dGw/LnRvU3RyaW5nKCkgPz8gJ251bGwnXG4gICAgICB9YFxuICAgICk7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNlbmRJbmNyZW1lbnQoXG4gICAgICBjYWNoZU5hbWUsXG4gICAgICB0aGlzLmNvbnZlcnQoZmllbGQpLFxuICAgICAgYW1vdW50LFxuICAgICAgdHRsIHx8IHRoaXMuZGVmYXVsdFR0bFNlY29uZHMgKiAxMDAwXG4gICAgKTtcbiAgICB0aGlzLmxvZ2dlci50cmFjZShgJ2luY3JlbWVudCcgcmVxdWVzdCByZXN1bHQ6ICR7cmVzdWx0LnRvU3RyaW5nKCl9YCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2VuZEluY3JlbWVudChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBmaWVsZDogVWludDhBcnJheSxcbiAgICBhbW91bnQgPSAxLFxuICAgIHR0bE1pbGxpc2Vjb25kczogbnVtYmVyXG4gICk6IFByb21pc2U8Q2FjaGVJbmNyZW1lbnQuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fSW5jcmVtZW50UmVxdWVzdCh7XG4gICAgICBjYWNoZV9rZXk6IGZpZWxkLFxuICAgICAgYW1vdW50LFxuICAgICAgdHRsX21pbGxpc2Vjb25kczogdHRsTWlsbGlzZWNvbmRzLFxuICAgIH0pO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuXG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgdGhpcy5jbGllbnRXcmFwcGVyLmdldENsaWVudCgpLkluY3JlbWVudChcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgbWV0YWRhdGEsXG4gICAgICAgIHtcbiAgICAgICAgICBpbnRlcmNlcHRvcnM6IHRoaXMuaW50ZXJjZXB0b3JzLFxuICAgICAgICB9LFxuICAgICAgICAoZXJyLCByZXNwKSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3ApIHtcbiAgICAgICAgICAgIGlmIChyZXNwLnZhbHVlKSB7XG4gICAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlSW5jcmVtZW50LlN1Y2Nlc3MocmVzcC52YWx1ZSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVJbmNyZW1lbnQuU3VjY2VzcygwKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlSW5jcmVtZW50LkVycm9yKGNhY2hlU2VydmljZUVycm9yTWFwcGVyKGVycikpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGljdGlvbmFyeUluY3JlbWVudChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBkaWN0aW9uYXJ5TmFtZTogc3RyaW5nLFxuICAgIGZpZWxkOiBzdHJpbmcgfCBVaW50OEFycmF5LFxuICAgIGFtb3VudCA9IDEsXG4gICAgdHRsOiBDb2xsZWN0aW9uVHRsID0gQ29sbGVjdGlvblR0bC5mcm9tQ2FjaGVUdGwoKVxuICApOiBQcm9taXNlPENhY2hlRGljdGlvbmFyeUluY3JlbWVudC5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUNhY2hlTmFtZShjYWNoZU5hbWUpO1xuICAgICAgdmFsaWRhdGVEaWN0aW9uYXJ5TmFtZShkaWN0aW9uYXJ5TmFtZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gbmV3IENhY2hlRGljdGlvbmFyeUluY3JlbWVudC5FcnJvcihcbiAgICAgICAgbm9ybWFsaXplU2RrRXJyb3IoZXJyIGFzIEVycm9yKVxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBgSXNzdWluZyAnZGljdGlvbmFyeUluY3JlbWVudCcgcmVxdWVzdDsgZmllbGQ6ICR7ZmllbGQudG9TdHJpbmcoKX0sIGFtb3VudCA6ICR7YW1vdW50fSwgdHRsOiAke1xuICAgICAgICB0dGwudHRsU2Vjb25kcy50b1N0cmluZygpID8/ICdudWxsJ1xuICAgICAgfWBcbiAgICApO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5zZW5kRGljdGlvbmFyeUluY3JlbWVudChcbiAgICAgIGNhY2hlTmFtZSxcbiAgICAgIHRoaXMuY29udmVydChkaWN0aW9uYXJ5TmFtZSksXG4gICAgICB0aGlzLmNvbnZlcnQoZmllbGQpLFxuICAgICAgYW1vdW50LFxuICAgICAgdHRsLnR0bE1pbGxpc2Vjb25kcygpIHx8IHRoaXMuZGVmYXVsdFR0bFNlY29uZHMgKiAxMDAwLFxuICAgICAgdHRsLnJlZnJlc2hUdGwoKVxuICAgICk7XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBgJ2RpY3Rpb25hcnlJbmNyZW1lbnQnIHJlcXVlc3QgcmVzdWx0OiAke3Jlc3VsdC50b1N0cmluZygpfWBcbiAgICApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmREaWN0aW9uYXJ5SW5jcmVtZW50KFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIGRpY3Rpb25hcnlOYW1lOiBVaW50OEFycmF5LFxuICAgIGZpZWxkOiBVaW50OEFycmF5LFxuICAgIGFtb3VudDogbnVtYmVyLFxuICAgIHR0bE1pbGxpc2Vjb25kczogbnVtYmVyLFxuICAgIHJlZnJlc2hUdGw6IGJvb2xlYW5cbiAgKTogUHJvbWlzZTxDYWNoZURpY3Rpb25hcnlJbmNyZW1lbnQuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fRGljdGlvbmFyeUluY3JlbWVudFJlcXVlc3Qoe1xuICAgICAgZGljdGlvbmFyeV9uYW1lOiBkaWN0aW9uYXJ5TmFtZSxcbiAgICAgIGZpZWxkLFxuICAgICAgYW1vdW50LFxuICAgICAgdHRsX21pbGxpc2Vjb25kczogdHRsTWlsbGlzZWNvbmRzLFxuICAgICAgcmVmcmVzaF90dGw6IHJlZnJlc2hUdGwsXG4gICAgfSk7XG4gICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLmNyZWF0ZU1ldGFkYXRhKGNhY2hlTmFtZSk7XG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgdGhpcy5jbGllbnRXcmFwcGVyLmdldENsaWVudCgpLkRpY3Rpb25hcnlJbmNyZW1lbnQoXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgaW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9ycyxcbiAgICAgICAgfSxcbiAgICAgICAgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwKSB7XG4gICAgICAgICAgICBpZiAocmVzcC52YWx1ZSkge1xuICAgICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZURpY3Rpb25hcnlJbmNyZW1lbnQuU3VjY2VzcyhyZXNwLnZhbHVlKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZURpY3Rpb25hcnlJbmNyZW1lbnQuU3VjY2VzcygwKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgICAgIG5ldyBDYWNoZURpY3Rpb25hcnlJbmNyZW1lbnQuRXJyb3IoY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHNvcnRlZFNldFB1dEVsZW1lbnQoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgc29ydGVkU2V0TmFtZTogc3RyaW5nLFxuICAgIHZhbHVlOiBzdHJpbmcgfCBVaW50OEFycmF5LFxuICAgIHNjb3JlOiBudW1iZXIsXG4gICAgdHRsOiBDb2xsZWN0aW9uVHRsID0gQ29sbGVjdGlvblR0bC5mcm9tQ2FjaGVUdGwoKVxuICApOiBQcm9taXNlPENhY2hlU29ydGVkU2V0UHV0RWxlbWVudC5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUNhY2hlTmFtZShjYWNoZU5hbWUpO1xuICAgICAgdmFsaWRhdGVTb3J0ZWRTZXROYW1lKHNvcnRlZFNldE5hbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIG5ldyBDYWNoZVNvcnRlZFNldFB1dEVsZW1lbnQuRXJyb3IoXG4gICAgICAgIG5vcm1hbGl6ZVNka0Vycm9yKGVyciBhcyBFcnJvcilcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgXCJJc3N1aW5nICdzb3J0ZWRTZXRQdXRFbGVtZW50JyByZXF1ZXN0OyB2YWx1ZTogJXMsIHNjb3JlIDogJXMsIHR0bDogJXNcIixcbiAgICAgIHRydW5jYXRlU3RyaW5nKHZhbHVlLnRvU3RyaW5nKCkpLFxuICAgICAgc2NvcmUsXG4gICAgICB0dGwudHRsU2Vjb25kcy50b1N0cmluZygpID8/ICdudWxsJ1xuICAgICk7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNlbmRTb3J0ZWRTZXRQdXRFbGVtZW50KFxuICAgICAgY2FjaGVOYW1lLFxuICAgICAgdGhpcy5jb252ZXJ0KHNvcnRlZFNldE5hbWUpLFxuICAgICAgdGhpcy5jb252ZXJ0KHZhbHVlKSxcbiAgICAgIHNjb3JlLFxuICAgICAgdHRsLnR0bE1pbGxpc2Vjb25kcygpIHx8IHRoaXMuZGVmYXVsdFR0bFNlY29uZHMgKiAxMDAwLFxuICAgICAgdHRsLnJlZnJlc2hUdGwoKVxuICAgICk7XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBcIidzb3J0ZWRTZXRQdXRFbGVtZW50JyByZXF1ZXN0IHJlc3VsdDogJXNcIixcbiAgICAgIHJlc3VsdC50b1N0cmluZygpXG4gICAgKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzZW5kU29ydGVkU2V0UHV0RWxlbWVudChcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBzb3J0ZWRTZXROYW1lOiBVaW50OEFycmF5LFxuICAgIHZhbHVlOiBVaW50OEFycmF5LFxuICAgIHNjb3JlOiBudW1iZXIsXG4gICAgdHRsTWlsbGlzZWNvbmRzOiBudW1iZXIsXG4gICAgcmVmcmVzaFR0bDogYm9vbGVhblxuICApOiBQcm9taXNlPENhY2hlU29ydGVkU2V0UHV0RWxlbWVudC5SZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgZ3JwY0NhY2hlLl9Tb3J0ZWRTZXRQdXRSZXF1ZXN0KHtcbiAgICAgIHNldF9uYW1lOiBzb3J0ZWRTZXROYW1lLFxuICAgICAgZWxlbWVudHM6IFtuZXcgZ3JwY0NhY2hlLl9Tb3J0ZWRTZXRFbGVtZW50KHt2YWx1ZSwgc2NvcmV9KV0sXG4gICAgICB0dGxfbWlsbGlzZWNvbmRzOiB0dGxNaWxsaXNlY29uZHMsXG4gICAgICByZWZyZXNoX3R0bDogcmVmcmVzaFR0bCxcbiAgICB9KTtcbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuY3JlYXRlTWV0YWRhdGEoY2FjaGVOYW1lKTtcbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuU29ydGVkU2V0UHV0KFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnMsXG4gICAgICAgIH0sXG4gICAgICAgIChlcnIsIHJlc3ApID0+IHtcbiAgICAgICAgICBpZiAocmVzcCkge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVTb3J0ZWRTZXRQdXRFbGVtZW50LlN1Y2Nlc3MoKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgICAgIG5ldyBDYWNoZVNvcnRlZFNldFB1dEVsZW1lbnQuRXJyb3IoY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHNvcnRlZFNldFB1dEVsZW1lbnRzKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIHNvcnRlZFNldE5hbWU6IHN0cmluZyxcbiAgICBlbGVtZW50czogTWFwPHN0cmluZyB8IFVpbnQ4QXJyYXksIG51bWJlcj4gfCBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+LFxuICAgIHR0bDogQ29sbGVjdGlvblR0bCA9IENvbGxlY3Rpb25UdGwuZnJvbUNhY2hlVHRsKClcbiAgKTogUHJvbWlzZTxDYWNoZVNvcnRlZFNldFB1dEVsZW1lbnRzLlJlc3BvbnNlPiB7XG4gICAgdHJ5IHtcbiAgICAgIHZhbGlkYXRlQ2FjaGVOYW1lKGNhY2hlTmFtZSk7XG4gICAgICB2YWxpZGF0ZVNvcnRlZFNldE5hbWUoc29ydGVkU2V0TmFtZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gbmV3IENhY2hlU29ydGVkU2V0UHV0RWxlbWVudHMuRXJyb3IoXG4gICAgICAgIG5vcm1hbGl6ZVNka0Vycm9yKGVyciBhcyBFcnJvcilcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgXCJJc3N1aW5nICdzb3J0ZWRTZXRQdXRFbGVtZW50cycgcmVxdWVzdDsgdmFsdWU6ICVzLCBzY29yZSA6ICVzLCB0dGw6ICVzXCIsXG4gICAgICBlbGVtZW50cy50b1N0cmluZygpLFxuICAgICAgdHRsLnR0bFNlY29uZHMudG9TdHJpbmcoKSA/PyAnbnVsbCdcbiAgICApO1xuXG4gICAgY29uc3Qgc29ydGVkU2V0VmFsdWVTY29yZVBhaXJzID0gdGhpcy5jb252ZXJ0U29ydGVkU2V0TWFwT3JSZWNvcmQoZWxlbWVudHMpO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5zZW5kU29ydGVkU2V0UHV0RWxlbWVudHMoXG4gICAgICBjYWNoZU5hbWUsXG4gICAgICB0aGlzLmNvbnZlcnQoc29ydGVkU2V0TmFtZSksXG4gICAgICBzb3J0ZWRTZXRWYWx1ZVNjb3JlUGFpcnMsXG4gICAgICB0dGwudHRsTWlsbGlzZWNvbmRzKCkgfHwgdGhpcy5kZWZhdWx0VHRsU2Vjb25kcyAqIDEwMDAsXG4gICAgICB0dGwucmVmcmVzaFR0bCgpXG4gICAgKTtcbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIFwiJ3NvcnRlZFNldFB1dEVsZW1lbnRzJyByZXF1ZXN0IHJlc3VsdDogJXNcIixcbiAgICAgIHJlc3VsdC50b1N0cmluZygpXG4gICAgKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzZW5kU29ydGVkU2V0UHV0RWxlbWVudHMoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgc29ydGVkU2V0TmFtZTogVWludDhBcnJheSxcbiAgICBlbGVtZW50czogZ3JwY0NhY2hlLl9Tb3J0ZWRTZXRFbGVtZW50W10sXG4gICAgdHRsTWlsbGlzZWNvbmRzOiBudW1iZXIsXG4gICAgcmVmcmVzaFR0bDogYm9vbGVhblxuICApOiBQcm9taXNlPENhY2hlU29ydGVkU2V0UHV0RWxlbWVudHMuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fU29ydGVkU2V0UHV0UmVxdWVzdCh7XG4gICAgICBzZXRfbmFtZTogc29ydGVkU2V0TmFtZSxcbiAgICAgIGVsZW1lbnRzOiBlbGVtZW50cyxcbiAgICAgIHR0bF9taWxsaXNlY29uZHM6IHR0bE1pbGxpc2Vjb25kcyxcbiAgICAgIHJlZnJlc2hfdHRsOiByZWZyZXNoVHRsLFxuICAgIH0pO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHRoaXMuY2xpZW50V3JhcHBlci5nZXRDbGllbnQoKS5Tb3J0ZWRTZXRQdXQoXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgaW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9ycyxcbiAgICAgICAgfSxcbiAgICAgICAgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwKSB7XG4gICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZVNvcnRlZFNldFB1dEVsZW1lbnRzLlN1Y2Nlc3MoKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgICAgIG5ldyBDYWNoZVNvcnRlZFNldFB1dEVsZW1lbnRzLkVycm9yKGNhY2hlU2VydmljZUVycm9yTWFwcGVyKGVycikpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzb3J0ZWRTZXRGZXRjaEJ5UmFuayhcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBzb3J0ZWRTZXROYW1lOiBzdHJpbmcsXG4gICAgb3JkZXI6IFNvcnRlZFNldE9yZGVyLFxuICAgIHN0YXJ0UmFuazogbnVtYmVyLFxuICAgIGVuZFJhbms/OiBudW1iZXJcbiAgKTogUHJvbWlzZTxDYWNoZVNvcnRlZFNldEZldGNoLlJlc3BvbnNlPiB7XG4gICAgdHJ5IHtcbiAgICAgIHZhbGlkYXRlQ2FjaGVOYW1lKGNhY2hlTmFtZSk7XG4gICAgICB2YWxpZGF0ZVNvcnRlZFNldE5hbWUoc29ydGVkU2V0TmFtZSk7XG4gICAgICB2YWxpZGF0ZVNvcnRlZFNldFJhbmtzKHN0YXJ0UmFuaywgZW5kUmFuayk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gbmV3IENhY2hlU29ydGVkU2V0RmV0Y2guRXJyb3Iobm9ybWFsaXplU2RrRXJyb3IoZXJyIGFzIEVycm9yKSk7XG4gICAgfVxuXG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBcIklzc3VpbmcgJ3NvcnRlZFNldEZldGNoQnlSYW5rJyByZXF1ZXN0OyBzdGFydFJhbms6ICVzLCBlbmRSYW5rIDogJXMsIG9yZGVyOiAlc1wiLFxuICAgICAgc3RhcnRSYW5rLnRvU3RyaW5nKCkgPz8gJ251bGwnLFxuICAgICAgZW5kUmFuaz8udG9TdHJpbmcoKSA/PyAnbnVsbCcsXG4gICAgICBvcmRlci50b1N0cmluZygpXG4gICAgKTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc2VuZFNvcnRlZFNldEZldGNoQnlSYW5rKFxuICAgICAgY2FjaGVOYW1lLFxuICAgICAgdGhpcy5jb252ZXJ0KHNvcnRlZFNldE5hbWUpLFxuICAgICAgb3JkZXIsXG4gICAgICBzdGFydFJhbmssXG4gICAgICBlbmRSYW5rXG4gICAgKTtcbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIFwiJ3NvcnRlZFNldEZldGNoQnlSYW5rJyByZXF1ZXN0IHJlc3VsdDogJXNcIixcbiAgICAgIHJlc3VsdC50b1N0cmluZygpXG4gICAgKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzZW5kU29ydGVkU2V0RmV0Y2hCeVJhbmsoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgc29ydGVkU2V0TmFtZTogVWludDhBcnJheSxcbiAgICBvcmRlcjogU29ydGVkU2V0T3JkZXIsXG4gICAgc3RhcnRSYW5rOiBudW1iZXIsXG4gICAgZW5kUmFuaz86IG51bWJlclxuICApOiBQcm9taXNlPENhY2hlU29ydGVkU2V0RmV0Y2guUmVzcG9uc2U+IHtcbiAgICBjb25zdCBieV9pbmRleCA9IG5ldyBncnBjQ2FjaGUuX1NvcnRlZFNldEZldGNoUmVxdWVzdC5fQnlJbmRleCgpO1xuICAgIGlmIChzdGFydFJhbmspIHtcbiAgICAgIGJ5X2luZGV4LmluY2x1c2l2ZV9zdGFydF9pbmRleCA9IHN0YXJ0UmFuaztcbiAgICB9IGVsc2Uge1xuICAgICAgYnlfaW5kZXgudW5ib3VuZGVkX3N0YXJ0ID0gbmV3IGdycGNDYWNoZS5fVW5ib3VuZGVkKCk7XG4gICAgfVxuICAgIGlmIChlbmRSYW5rKSB7XG4gICAgICBieV9pbmRleC5leGNsdXNpdmVfZW5kX2luZGV4ID0gZW5kUmFuaztcbiAgICB9IGVsc2Uge1xuICAgICAgYnlfaW5kZXgudW5ib3VuZGVkX2VuZCA9IG5ldyBncnBjQ2FjaGUuX1VuYm91bmRlZCgpO1xuICAgIH1cblxuICAgIGNvbnN0IHByb3RvQnVmT3JkZXIgPVxuICAgICAgb3JkZXIgPT09IFNvcnRlZFNldE9yZGVyLkRlc2NlbmRpbmdcbiAgICAgICAgPyBncnBjQ2FjaGUuX1NvcnRlZFNldEZldGNoUmVxdWVzdC5PcmRlci5ERVNDRU5ESU5HXG4gICAgICAgIDogZ3JwY0NhY2hlLl9Tb3J0ZWRTZXRGZXRjaFJlcXVlc3QuT3JkZXIuQVNDRU5ESU5HO1xuXG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBncnBjQ2FjaGUuX1NvcnRlZFNldEZldGNoUmVxdWVzdCh7XG4gICAgICBzZXRfbmFtZTogc29ydGVkU2V0TmFtZSxcbiAgICAgIG9yZGVyOiBwcm90b0J1Zk9yZGVyLFxuICAgICAgd2l0aF9zY29yZXM6IHRydWUsXG4gICAgICBieV9pbmRleDogYnlfaW5kZXgsXG4gICAgfSk7XG5cbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuY3JlYXRlTWV0YWRhdGEoY2FjaGVOYW1lKTtcbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuU29ydGVkU2V0RmV0Y2goXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgaW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9ycyxcbiAgICAgICAgfSxcbiAgICAgICAgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwKSB7XG4gICAgICAgICAgICBpZiAocmVzcD8uZm91bmQpIHtcbiAgICAgICAgICAgICAgaWYgKHJlc3A/LmZvdW5kPy52YWx1ZXNfd2l0aF9zY29yZXMpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKFxuICAgICAgICAgICAgICAgICAgbmV3IENhY2hlU29ydGVkU2V0RmV0Y2guSGl0KFxuICAgICAgICAgICAgICAgICAgICByZXNwLmZvdW5kLnZhbHVlc193aXRoX3Njb3Jlcy5lbGVtZW50c1xuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShcbiAgICAgICAgICAgICAgICAgIG5ldyBDYWNoZVNvcnRlZFNldEZldGNoLkVycm9yKFxuICAgICAgICAgICAgICAgICAgICBuZXcgVW5rbm93bkVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICdVbmtub3duIHNvcnRlZCBzZXQgZmV0Y2ggaGl0IHJlc3BvbnNlIHR5cGUnXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3A/Lm1pc3NpbmcpIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVTb3J0ZWRTZXRGZXRjaC5NaXNzKCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZShcbiAgICAgICAgICAgICAgICBuZXcgQ2FjaGVTb3J0ZWRTZXRGZXRjaC5FcnJvcihcbiAgICAgICAgICAgICAgICAgIG5ldyBVbmtub3duRXJyb3IoJ1Vua25vd24gc29ydGVkIHNldCBmZXRjaCByZXNwb25zZSB0eXBlJylcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgICAgIG5ldyBDYWNoZVNvcnRlZFNldEZldGNoLkVycm9yKGNhY2hlU2VydmljZUVycm9yTWFwcGVyKGVycikpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzb3J0ZWRTZXRGZXRjaEJ5U2NvcmUoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgc29ydGVkU2V0TmFtZTogc3RyaW5nLFxuICAgIG9yZGVyOiBTb3J0ZWRTZXRPcmRlcixcbiAgICBtaW5TY29yZT86IG51bWJlcixcbiAgICBtYXhTY29yZT86IG51bWJlcixcbiAgICBvZmZzZXQ/OiBudW1iZXIsXG4gICAgY291bnQ/OiBudW1iZXJcbiAgKTogUHJvbWlzZTxDYWNoZVNvcnRlZFNldEZldGNoLlJlc3BvbnNlPiB7XG4gICAgdHJ5IHtcbiAgICAgIHZhbGlkYXRlQ2FjaGVOYW1lKGNhY2hlTmFtZSk7XG4gICAgICB2YWxpZGF0ZVNvcnRlZFNldE5hbWUoc29ydGVkU2V0TmFtZSk7XG4gICAgICB2YWxpZGF0ZVNvcnRlZFNldFNjb3JlcyhtaW5TY29yZSwgbWF4U2NvcmUpO1xuICAgICAgaWYgKG9mZnNldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhbGlkYXRlU29ydGVkU2V0T2Zmc2V0KG9mZnNldCk7XG4gICAgICB9XG4gICAgICBpZiAoY291bnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YWxpZGF0ZVNvcnRlZFNldENvdW50KGNvdW50KTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBuZXcgQ2FjaGVTb3J0ZWRTZXRGZXRjaC5FcnJvcihub3JtYWxpemVTZGtFcnJvcihlcnIgYXMgRXJyb3IpKTtcbiAgICB9XG5cbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIFwiSXNzdWluZyAnc29ydGVkU2V0RmV0Y2hCeVNjb3JlJyByZXF1ZXN0OyBtaW5TY29yZTogJXMsIG1heFNjb3JlIDogJXMsIG9yZGVyOiAlcywgb2Zmc2V0OiAlcywgY291bnQ6ICVzXCIsXG4gICAgICBtaW5TY29yZT8udG9TdHJpbmcoKSA/PyAnbnVsbCcsXG4gICAgICBtYXhTY29yZT8udG9TdHJpbmcoKSA/PyAnbnVsbCcsXG4gICAgICBvcmRlci50b1N0cmluZygpLFxuICAgICAgb2Zmc2V0Py50b1N0cmluZygpID8/ICdudWxsJyxcbiAgICAgIGNvdW50Py50b1N0cmluZygpID8/ICdudWxsJ1xuICAgICk7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNlbmRTb3J0ZWRTZXRGZXRjaEJ5U2NvcmUoXG4gICAgICBjYWNoZU5hbWUsXG4gICAgICB0aGlzLmNvbnZlcnQoc29ydGVkU2V0TmFtZSksXG4gICAgICBvcmRlcixcbiAgICAgIG1pblNjb3JlLFxuICAgICAgbWF4U2NvcmUsXG4gICAgICBvZmZzZXQsXG4gICAgICBjb3VudFxuICAgICk7XG5cbiAgICB0aGlzLmxvZ2dlci50cmFjZShcbiAgICAgIFwiJ3NvcnRlZFNldEZldGNoQnlTY29yZScgcmVxdWVzdCByZXN1bHQ6ICVzXCIsXG4gICAgICByZXN1bHQudG9TdHJpbmcoKVxuICAgICk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2VuZFNvcnRlZFNldEZldGNoQnlTY29yZShcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBzb3J0ZWRTZXROYW1lOiBVaW50OEFycmF5LFxuICAgIG9yZGVyOiBTb3J0ZWRTZXRPcmRlcixcbiAgICBtaW5TY29yZT86IG51bWJlcixcbiAgICBtYXhTY29yZT86IG51bWJlcixcbiAgICBvZmZzZXQ/OiBudW1iZXIsXG4gICAgY291bnQ/OiBudW1iZXJcbiAgKTogUHJvbWlzZTxDYWNoZVNvcnRlZFNldEZldGNoLlJlc3BvbnNlPiB7XG4gICAgY29uc3QgYnlfc2NvcmUgPSBuZXcgZ3JwY0NhY2hlLl9Tb3J0ZWRTZXRGZXRjaFJlcXVlc3QuX0J5U2NvcmUoKTtcbiAgICBpZiAobWluU2NvcmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgYnlfc2NvcmUubWluX3Njb3JlID0gbmV3IGdycGNDYWNoZS5fU29ydGVkU2V0RmV0Y2hSZXF1ZXN0Ll9CeVNjb3JlLl9TY29yZShcbiAgICAgICAge1xuICAgICAgICAgIHNjb3JlOiBtaW5TY29yZSxcbiAgICAgICAgICBleGNsdXNpdmU6IGZhbHNlLFxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBieV9zY29yZS51bmJvdW5kZWRfbWluID0gbmV3IGdycGNDYWNoZS5fVW5ib3VuZGVkKCk7XG4gICAgfVxuICAgIGlmIChtYXhTY29yZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBieV9zY29yZS5tYXhfc2NvcmUgPSBuZXcgZ3JwY0NhY2hlLl9Tb3J0ZWRTZXRGZXRjaFJlcXVlc3QuX0J5U2NvcmUuX1Njb3JlKFxuICAgICAgICB7XG4gICAgICAgICAgc2NvcmU6IG1heFNjb3JlLFxuICAgICAgICAgIGV4Y2x1c2l2ZTogZmFsc2UsXG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJ5X3Njb3JlLnVuYm91bmRlZF9tYXggPSBuZXcgZ3JwY0NhY2hlLl9VbmJvdW5kZWQoKTtcbiAgICB9XG4gICAgYnlfc2NvcmUub2Zmc2V0ID0gb2Zmc2V0ID8/IDA7XG4gICAgLy8gTm90ZTogdGhlIHNlcnZpY2UgcmVzZXJ2ZXMgbmVnYXRpdmUgY291bnRzIHRvIG1lYW4gYWxsIGVsZW1lbnRzIGluIHRoZVxuICAgIC8vIHJlc3VsdCBzZXQuXG4gICAgYnlfc2NvcmUuY291bnQgPSBjb3VudCA/PyAtMTtcblxuICAgIGNvbnN0IHByb3RvQnVmT3JkZXIgPVxuICAgICAgb3JkZXIgPT09IFNvcnRlZFNldE9yZGVyLkRlc2NlbmRpbmdcbiAgICAgICAgPyBncnBjQ2FjaGUuX1NvcnRlZFNldEZldGNoUmVxdWVzdC5PcmRlci5ERVNDRU5ESU5HXG4gICAgICAgIDogZ3JwY0NhY2hlLl9Tb3J0ZWRTZXRGZXRjaFJlcXVlc3QuT3JkZXIuQVNDRU5ESU5HO1xuXG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBncnBjQ2FjaGUuX1NvcnRlZFNldEZldGNoUmVxdWVzdCh7XG4gICAgICBzZXRfbmFtZTogc29ydGVkU2V0TmFtZSxcbiAgICAgIG9yZGVyOiBwcm90b0J1Zk9yZGVyLFxuICAgICAgd2l0aF9zY29yZXM6IHRydWUsXG4gICAgICBieV9zY29yZTogYnlfc2NvcmUsXG4gICAgfSk7XG5cbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuY3JlYXRlTWV0YWRhdGEoY2FjaGVOYW1lKTtcbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuU29ydGVkU2V0RmV0Y2goXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgaW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9ycyxcbiAgICAgICAgfSxcbiAgICAgICAgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwKSB7XG4gICAgICAgICAgICBpZiAocmVzcD8uZm91bmQpIHtcbiAgICAgICAgICAgICAgaWYgKHJlc3A/LmZvdW5kPy52YWx1ZXNfd2l0aF9zY29yZXMpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKFxuICAgICAgICAgICAgICAgICAgbmV3IENhY2hlU29ydGVkU2V0RmV0Y2guSGl0KFxuICAgICAgICAgICAgICAgICAgICByZXNwLmZvdW5kLnZhbHVlc193aXRoX3Njb3Jlcy5lbGVtZW50c1xuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShcbiAgICAgICAgICAgICAgICAgIG5ldyBDYWNoZVNvcnRlZFNldEZldGNoLkVycm9yKFxuICAgICAgICAgICAgICAgICAgICBuZXcgVW5rbm93bkVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICdVbmtub3duIHNvcnRlZCBzZXQgZmV0Y2ggaGl0IHJlc3BvbnNlIHR5cGUnXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3A/Lm1pc3NpbmcpIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVTb3J0ZWRTZXRGZXRjaC5NaXNzKCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZShcbiAgICAgICAgICAgICAgICBuZXcgQ2FjaGVTb3J0ZWRTZXRGZXRjaC5FcnJvcihcbiAgICAgICAgICAgICAgICAgIG5ldyBVbmtub3duRXJyb3IoJ1Vua25vd24gc29ydGVkIHNldCBmZXRjaCByZXNwb25zZSB0eXBlJylcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgICAgIG5ldyBDYWNoZVNvcnRlZFNldEZldGNoLkVycm9yKGNhY2hlU2VydmljZUVycm9yTWFwcGVyKGVycikpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzb3J0ZWRTZXRHZXRSYW5rKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIHNvcnRlZFNldE5hbWU6IHN0cmluZyxcbiAgICB2YWx1ZTogc3RyaW5nIHwgVWludDhBcnJheVxuICApOiBQcm9taXNlPENhY2hlU29ydGVkU2V0R2V0UmFuay5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUNhY2hlTmFtZShjYWNoZU5hbWUpO1xuICAgICAgdmFsaWRhdGVTb3J0ZWRTZXROYW1lKHNvcnRlZFNldE5hbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIG5ldyBDYWNoZVNvcnRlZFNldEdldFJhbmsuRXJyb3Iobm9ybWFsaXplU2RrRXJyb3IoZXJyIGFzIEVycm9yKSk7XG4gICAgfVxuXG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBcIklzc3VpbmcgJ3NvcnRlZFNldEdldFJhbmsnIHJlcXVlc3Q7IHZhbHVlOiAlc1wiLFxuICAgICAgdHJ1bmNhdGVTdHJpbmcodmFsdWUudG9TdHJpbmcoKSlcbiAgICApO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5zZW5kU29ydGVkU2V0R2V0UmFuayhcbiAgICAgIGNhY2hlTmFtZSxcbiAgICAgIHRoaXMuY29udmVydChzb3J0ZWRTZXROYW1lKSxcbiAgICAgIHRoaXMuY29udmVydCh2YWx1ZSlcbiAgICApO1xuXG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBcIidzb3J0ZWRTZXRHZXRSYW5rJyByZXF1ZXN0IHJlc3VsdDogJXNcIixcbiAgICAgIHRydW5jYXRlU3RyaW5nKHJlc3VsdC50b1N0cmluZygpKVxuICAgICk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2VuZFNvcnRlZFNldEdldFJhbmsoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgc29ydGVkU2V0TmFtZTogVWludDhBcnJheSxcbiAgICB2YWx1ZTogVWludDhBcnJheVxuICApOiBQcm9taXNlPENhY2hlU29ydGVkU2V0R2V0UmFuay5SZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgZ3JwY0NhY2hlLl9Tb3J0ZWRTZXRHZXRSYW5rUmVxdWVzdCh7XG4gICAgICBzZXRfbmFtZTogc29ydGVkU2V0TmFtZSxcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICB9KTtcbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuY3JlYXRlTWV0YWRhdGEoY2FjaGVOYW1lKTtcbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXJcbiAgICAgICAgLmdldENsaWVudCgpXG4gICAgICAgIC5Tb3J0ZWRTZXRHZXRSYW5rKFxuICAgICAgICAgIHJlcXVlc3QsXG4gICAgICAgICAgbWV0YWRhdGEsXG4gICAgICAgICAge2ludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnN9LFxuICAgICAgICAgIChlcnIsIHJlc3ApID0+IHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgcmVzcD8ubWlzc2luZyB8fFxuICAgICAgICAgICAgICByZXNwPy5lbGVtZW50X3Jhbms/LnJlc3VsdCA9PT0gRUNhY2hlUmVzdWx0Lk1pc3NcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZVNvcnRlZFNldEdldFJhbmsuTWlzcygpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcD8uZWxlbWVudF9yYW5rPy5yZXN1bHQgPT09IEVDYWNoZVJlc3VsdC5IaXQpIHtcbiAgICAgICAgICAgICAgaWYgKHJlc3A/LmVsZW1lbnRfcmFuay5yYW5rID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZVNvcnRlZFNldEdldFJhbmsuTWlzcygpKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZVNvcnRlZFNldEdldFJhbmsuSGl0KHJlc3AuZWxlbWVudF9yYW5rLnJhbmspKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZShcbiAgICAgICAgICAgICAgICBuZXcgQ2FjaGVTb3J0ZWRTZXRHZXRSYW5rLkVycm9yKGNhY2hlU2VydmljZUVycm9yTWFwcGVyKGVycikpXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHNvcnRlZFNldEdldFNjb3JlKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIHNvcnRlZFNldE5hbWU6IHN0cmluZyxcbiAgICB2YWx1ZTogc3RyaW5nIHwgVWludDhBcnJheVxuICApOiBQcm9taXNlPENhY2hlU29ydGVkU2V0R2V0U2NvcmUuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXNwb25zZXMgPSBhd2FpdCB0aGlzLnNvcnRlZFNldEdldFNjb3JlcyhjYWNoZU5hbWUsIHNvcnRlZFNldE5hbWUsIFtcbiAgICAgIHZhbHVlLFxuICAgIF0gYXMgc3RyaW5nW10gfCBVaW50OEFycmF5W10pO1xuICAgIGlmIChyZXNwb25zZXMgaW5zdGFuY2VvZiBDYWNoZVNvcnRlZFNldEdldFNjb3Jlcy5IaXQpIHtcbiAgICAgIHJldHVybiByZXNwb25zZXMucmVzcG9uc2VzKClbMF07XG4gICAgfSBlbHNlIGlmIChyZXNwb25zZXMgaW5zdGFuY2VvZiBDYWNoZVNvcnRlZFNldEdldFNjb3Jlcy5NaXNzKSB7XG4gICAgICByZXR1cm4gbmV3IENhY2hlU29ydGVkU2V0R2V0U2NvcmUuTWlzcyh0aGlzLmNvbnZlcnQodmFsdWUpKTtcbiAgICB9IGVsc2UgaWYgKHJlc3BvbnNlcyBpbnN0YW5jZW9mIENhY2hlU29ydGVkU2V0R2V0U2NvcmVzLkVycm9yKSB7XG4gICAgICByZXR1cm4gbmV3IENhY2hlU29ydGVkU2V0R2V0U2NvcmUuRXJyb3IoXG4gICAgICAgIHJlc3BvbnNlcy5pbm5lckV4Y2VwdGlvbigpLFxuICAgICAgICB0aGlzLmNvbnZlcnQodmFsdWUpXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQ2FjaGVTb3J0ZWRTZXRHZXRTY29yZS5FcnJvcihcbiAgICAgIG5ldyBVbmtub3duRXJyb3IoJ1Vua25vd24gcmVzcG9uc2UgdHlwZScpLFxuICAgICAgdGhpcy5jb252ZXJ0KHZhbHVlKVxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc29ydGVkU2V0R2V0U2NvcmVzKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIHNvcnRlZFNldE5hbWU6IHN0cmluZyxcbiAgICB2YWx1ZXM6IHN0cmluZ1tdIHwgVWludDhBcnJheVtdXG4gICk6IFByb21pc2U8Q2FjaGVTb3J0ZWRTZXRHZXRTY29yZXMuUmVzcG9uc2U+IHtcbiAgICB0cnkge1xuICAgICAgdmFsaWRhdGVDYWNoZU5hbWUoY2FjaGVOYW1lKTtcbiAgICAgIHZhbGlkYXRlU29ydGVkU2V0TmFtZShzb3J0ZWRTZXROYW1lKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBuZXcgQ2FjaGVTb3J0ZWRTZXRHZXRTY29yZXMuRXJyb3Iobm9ybWFsaXplU2RrRXJyb3IoZXJyIGFzIEVycm9yKSk7XG4gICAgfVxuXG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBcIklzc3VpbmcgJ3NvcnRlZFNldEdldFNjb3JlcycgcmVxdWVzdDsgdmFsdWVzOiAlc1wiLFxuICAgICAgdHJ1bmNhdGVTdHJpbmcodmFsdWVzLnRvU3RyaW5nKCkpXG4gICAgKTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc2VuZFNvcnRlZFNldEdldFNjb3JlcyhcbiAgICAgIGNhY2hlTmFtZSxcbiAgICAgIHRoaXMuY29udmVydChzb3J0ZWRTZXROYW1lKSxcbiAgICAgIHZhbHVlcy5tYXAodmFsdWUgPT4gdGhpcy5jb252ZXJ0KHZhbHVlKSlcbiAgICApO1xuXG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBcIidzb3J0ZWRTZXRHZXRTY29yZXMnIHJlcXVlc3QgcmVzdWx0OiAlc1wiLFxuICAgICAgdHJ1bmNhdGVTdHJpbmcocmVzdWx0LnRvU3RyaW5nKCkpXG4gICAgKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzZW5kU29ydGVkU2V0R2V0U2NvcmVzKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIHNvcnRlZFNldE5hbWU6IFVpbnQ4QXJyYXksXG4gICAgdmFsdWVzOiBVaW50OEFycmF5W11cbiAgKTogUHJvbWlzZTxDYWNoZVNvcnRlZFNldEdldFNjb3Jlcy5SZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgZ3JwY0NhY2hlLl9Tb3J0ZWRTZXRHZXRTY29yZVJlcXVlc3Qoe1xuICAgICAgc2V0X25hbWU6IHNvcnRlZFNldE5hbWUsXG4gICAgICB2YWx1ZXM6IHZhbHVlcyxcbiAgICB9KTtcbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuY3JlYXRlTWV0YWRhdGEoY2FjaGVOYW1lKTtcbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXJcbiAgICAgICAgLmdldENsaWVudCgpXG4gICAgICAgIC5Tb3J0ZWRTZXRHZXRTY29yZShcbiAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICAgIG1ldGFkYXRhLFxuICAgICAgICAgIHtpbnRlcmNlcHRvcnM6IHRoaXMuaW50ZXJjZXB0b3JzfSxcbiAgICAgICAgICAoZXJyLCByZXNwKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzcD8ubWlzc2luZykge1xuICAgICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZVNvcnRlZFNldEdldFNjb3Jlcy5NaXNzKCkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwPy5mb3VuZCkge1xuICAgICAgICAgICAgICBjb25zdCBlbGVtZW50cyA9IHJlc3AuZm91bmQuZWxlbWVudHMubWFwKGVsZSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5jb252ZXJ0RUNhY2hlUmVzdWx0KGVsZS5yZXN1bHQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgX1NvcnRlZFNldEdldFNjb3JlUmVzcG9uc2VQYXJ0KHJlc3VsdCwgZWxlLnNjb3JlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlU29ydGVkU2V0R2V0U2NvcmVzLkhpdChlbGVtZW50cywgdmFsdWVzKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXNvbHZlKFxuICAgICAgICAgICAgICAgIG5ldyBDYWNoZVNvcnRlZFNldEdldFNjb3Jlcy5FcnJvcihjYWNoZVNlcnZpY2VFcnJvck1hcHBlcihlcnIpKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzb3J0ZWRTZXRJbmNyZW1lbnRTY29yZShcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBzb3J0ZWRTZXROYW1lOiBzdHJpbmcsXG4gICAgdmFsdWU6IHN0cmluZyB8IFVpbnQ4QXJyYXksXG4gICAgYW1vdW50ID0gMSxcbiAgICB0dGw6IENvbGxlY3Rpb25UdGwgPSBDb2xsZWN0aW9uVHRsLmZyb21DYWNoZVR0bCgpXG4gICk6IFByb21pc2U8Q2FjaGVTb3J0ZWRTZXRJbmNyZW1lbnRTY29yZS5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUNhY2hlTmFtZShjYWNoZU5hbWUpO1xuICAgICAgdmFsaWRhdGVTb3J0ZWRTZXROYW1lKHNvcnRlZFNldE5hbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIG5ldyBDYWNoZVNvcnRlZFNldEZldGNoLkVycm9yKG5vcm1hbGl6ZVNka0Vycm9yKGVyciBhcyBFcnJvcikpO1xuICAgIH1cblxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgXCJJc3N1aW5nICdzb3J0ZWRTZXRJbmNyZW1lbnRTY29yZScgcmVxdWVzdDsgdmFsdWU6ICVzXCIsXG4gICAgICB0cnVuY2F0ZVN0cmluZyh2YWx1ZS50b1N0cmluZygpKVxuICAgICk7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNlbmRTb3J0ZWRTZXRJbmNyZW1lbnRTY29yZShcbiAgICAgIGNhY2hlTmFtZSxcbiAgICAgIHRoaXMuY29udmVydChzb3J0ZWRTZXROYW1lKSxcbiAgICAgIHRoaXMuY29udmVydCh2YWx1ZSksXG4gICAgICBhbW91bnQsXG4gICAgICB0dGwudHRsTWlsbGlzZWNvbmRzKCkgfHwgdGhpcy5kZWZhdWx0VHRsU2Vjb25kcyAqIDEwMDAsXG4gICAgICB0dGwucmVmcmVzaFR0bCgpXG4gICAgKTtcblxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgXCInc29ydGVkU2V0SW5jcmVtZW50U2NvcmUnIHJlcXVlc3QgcmVzdWx0OiAlc1wiLFxuICAgICAgdHJ1bmNhdGVTdHJpbmcocmVzdWx0LnRvU3RyaW5nKCkpXG4gICAgKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzZW5kU29ydGVkU2V0SW5jcmVtZW50U2NvcmUoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAgc29ydGVkU2V0TmFtZTogVWludDhBcnJheSxcbiAgICB2YWx1ZTogVWludDhBcnJheSxcbiAgICBhbW91bnQ6IG51bWJlcixcbiAgICB0dGxNaWxsaXNlY29uZHM6IG51bWJlcixcbiAgICByZWZyZXNoVHRsOiBib29sZWFuXG4gICk6IFByb21pc2U8Q2FjaGVTb3J0ZWRTZXRJbmNyZW1lbnRTY29yZS5SZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgZ3JwY0NhY2hlLl9Tb3J0ZWRTZXRJbmNyZW1lbnRSZXF1ZXN0KHtcbiAgICAgIHNldF9uYW1lOiBzb3J0ZWRTZXROYW1lLFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgYW1vdW50OiBhbW91bnQsXG4gICAgICB0dGxfbWlsbGlzZWNvbmRzOiB0dGxNaWxsaXNlY29uZHMsXG4gICAgICByZWZyZXNoX3R0bDogcmVmcmVzaFR0bCxcbiAgICB9KTtcbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuY3JlYXRlTWV0YWRhdGEoY2FjaGVOYW1lKTtcbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXJcbiAgICAgICAgLmdldENsaWVudCgpXG4gICAgICAgIC5Tb3J0ZWRTZXRJbmNyZW1lbnQoXG4gICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAgICB7aW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9yc30sXG4gICAgICAgICAgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgICAgaWYgKHJlc3ApIHtcbiAgICAgICAgICAgICAgaWYgKHJlc3Auc2NvcmUpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZVNvcnRlZFNldEluY3JlbWVudFNjb3JlLlN1Y2Nlc3MocmVzcC5zY29yZSkpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc29sdmUobmV3IENhY2hlU29ydGVkU2V0SW5jcmVtZW50U2NvcmUuU3VjY2VzcygwKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgICAgICAgbmV3IENhY2hlRGljdGlvbmFyeUluY3JlbWVudC5FcnJvcihjYWNoZVNlcnZpY2VFcnJvck1hcHBlcihlcnIpKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzb3J0ZWRTZXRSZW1vdmVFbGVtZW50KFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIHNvcnRlZFNldE5hbWU6IHN0cmluZyxcbiAgICB2YWx1ZTogc3RyaW5nIHwgVWludDhBcnJheVxuICApOiBQcm9taXNlPENhY2hlU29ydGVkU2V0UmVtb3ZlRWxlbWVudC5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUNhY2hlTmFtZShjYWNoZU5hbWUpO1xuICAgICAgdmFsaWRhdGVTb3J0ZWRTZXROYW1lKHNvcnRlZFNldE5hbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIG5ldyBDYWNoZVNvcnRlZFNldEZldGNoLkVycm9yKG5vcm1hbGl6ZVNka0Vycm9yKGVyciBhcyBFcnJvcikpO1xuICAgIH1cblxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiSXNzdWluZyAnc29ydGVkU2V0UmVtb3ZlRWxlbWVudCcgcmVxdWVzdFwiKTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc2VuZFNvcnRlZFNldFJlbW92ZUVsZW1lbnQoXG4gICAgICBjYWNoZU5hbWUsXG4gICAgICB0aGlzLmNvbnZlcnQoc29ydGVkU2V0TmFtZSksXG4gICAgICB0aGlzLmNvbnZlcnQodmFsdWUpXG4gICAgKTtcblxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFxuICAgICAgXCInc29ydGVkU2V0UmVtb3ZlRWxlbWVudCcgcmVxdWVzdCByZXN1bHQ6ICVzXCIsXG4gICAgICB0cnVuY2F0ZVN0cmluZyhyZXN1bHQudG9TdHJpbmcoKSlcbiAgICApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmRTb3J0ZWRTZXRSZW1vdmVFbGVtZW50KFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIHNvcnRlZFNldE5hbWU6IFVpbnQ4QXJyYXksXG4gICAgdmFsdWU6IFVpbnQ4QXJyYXlcbiAgKTogUHJvbWlzZTxDYWNoZVNvcnRlZFNldFJlbW92ZUVsZW1lbnQuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fU29ydGVkU2V0UmVtb3ZlUmVxdWVzdCh7XG4gICAgICBzZXRfbmFtZTogc29ydGVkU2V0TmFtZSxcbiAgICAgIHNvbWU6IG5ldyBncnBjQ2FjaGUuX1NvcnRlZFNldFJlbW92ZVJlcXVlc3QuX1NvbWUoe1xuICAgICAgICB2YWx1ZXM6IFt2YWx1ZV0sXG4gICAgICB9KSxcbiAgICB9KTtcblxuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHRoaXMuY2xpZW50V3JhcHBlci5nZXRDbGllbnQoKS5Tb3J0ZWRTZXRSZW1vdmUoXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgaW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9ycyxcbiAgICAgICAgfSxcbiAgICAgICAgZXJyID0+IHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICByZXNvbHZlKFxuICAgICAgICAgICAgICBuZXcgQ2FjaGVTb3J0ZWRTZXRSZW1vdmVFbGVtZW50LkVycm9yKFxuICAgICAgICAgICAgICAgIGNhY2hlU2VydmljZUVycm9yTWFwcGVyKGVycilcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgQ2FjaGVTb3J0ZWRTZXRSZW1vdmVFbGVtZW50LlN1Y2Nlc3MoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHNvcnRlZFNldFJlbW92ZUVsZW1lbnRzKFxuICAgIGNhY2hlTmFtZTogc3RyaW5nLFxuICAgIHNvcnRlZFNldE5hbWU6IHN0cmluZyxcbiAgICB2YWx1ZXM6IHN0cmluZ1tdIHwgVWludDhBcnJheVtdXG4gICk6IFByb21pc2U8Q2FjaGVTb3J0ZWRTZXRSZW1vdmVFbGVtZW50cy5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUNhY2hlTmFtZShjYWNoZU5hbWUpO1xuICAgICAgdmFsaWRhdGVTb3J0ZWRTZXROYW1lKHNvcnRlZFNldE5hbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIG5ldyBDYWNoZVNvcnRlZFNldEZldGNoLkVycm9yKG5vcm1hbGl6ZVNka0Vycm9yKGVyciBhcyBFcnJvcikpO1xuICAgIH1cblxuICAgIHRoaXMubG9nZ2VyLnRyYWNlKFwiSXNzdWluZyAnc29ydGVkU2V0UmVtb3ZlRWxlbWVudHMnIHJlcXVlc3RcIik7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNlbmRTb3J0ZWRTZXRSZW1vdmVFbGVtZW50cyhcbiAgICAgIGNhY2hlTmFtZSxcbiAgICAgIHRoaXMuY29udmVydChzb3J0ZWRTZXROYW1lKSxcbiAgICAgIHRoaXMuY29udmVydEFycmF5KHZhbHVlcylcbiAgICApO1xuXG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBcIidzb3J0ZWRTZXRSZW1vdmVFbGVtZW50cycgcmVxdWVzdCByZXN1bHQ6ICVzXCIsXG4gICAgICB0cnVuY2F0ZVN0cmluZyhyZXN1bHQudG9TdHJpbmcoKSlcbiAgICApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmRTb3J0ZWRTZXRSZW1vdmVFbGVtZW50cyhcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBzb3J0ZWRTZXROYW1lOiBVaW50OEFycmF5LFxuICAgIHZhbHVlczogVWludDhBcnJheVtdXG4gICk6IFByb21pc2U8Q2FjaGVTb3J0ZWRTZXRSZW1vdmVFbGVtZW50cy5SZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgZ3JwY0NhY2hlLl9Tb3J0ZWRTZXRSZW1vdmVSZXF1ZXN0KHtcbiAgICAgIHNldF9uYW1lOiBzb3J0ZWRTZXROYW1lLFxuICAgICAgc29tZTogbmV3IGdycGNDYWNoZS5fU29ydGVkU2V0UmVtb3ZlUmVxdWVzdC5fU29tZSh7XG4gICAgICAgIHZhbHVlczogdmFsdWVzLFxuICAgICAgfSksXG4gICAgfSk7XG5cbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuY3JlYXRlTWV0YWRhdGEoY2FjaGVOYW1lKTtcbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXIuZ2V0Q2xpZW50KCkuU29ydGVkU2V0UmVtb3ZlKFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnMsXG4gICAgICAgIH0sXG4gICAgICAgIGVyciA9PiB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgcmVzb2x2ZShcbiAgICAgICAgICAgICAgbmV3IENhY2hlU29ydGVkU2V0UmVtb3ZlRWxlbWVudHMuRXJyb3IoXG4gICAgICAgICAgICAgICAgY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIoZXJyKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZVNvcnRlZFNldFJlbW92ZUVsZW1lbnRzLlN1Y2Nlc3MoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0aWFsaXplSW50ZXJjZXB0b3JzKFxuICAgIGxvZ2dlckZhY3Rvcnk6IE1vbWVudG9Mb2dnZXJGYWN0b3J5LFxuICAgIG1pZGRsZXdhcmVzOiBNaWRkbGV3YXJlW11cbiAgKTogSW50ZXJjZXB0b3JbXSB7XG4gICAgY29uc3QgaGVhZGVycyA9IFtcbiAgICAgIG5ldyBIZWFkZXIoJ0F1dGhvcml6YXRpb24nLCB0aGlzLmNyZWRlbnRpYWxQcm92aWRlci5nZXRBdXRoVG9rZW4oKSksXG4gICAgICBuZXcgSGVhZGVyKCdBZ2VudCcsIGBub2RlanM6JHt2ZXJzaW9ufWApLFxuICAgIF07XG4gICAgcmV0dXJuIFtcbiAgICAgIG1pZGRsZXdhcmVzSW50ZXJjZXB0b3IobG9nZ2VyRmFjdG9yeSwgbWlkZGxld2FyZXMpLFxuICAgICAgbmV3IEhlYWRlckludGVyY2VwdG9yUHJvdmlkZXIoaGVhZGVycykuY3JlYXRlSGVhZGVyc0ludGVyY2VwdG9yKCksXG4gICAgICBDbGllbnRUaW1lb3V0SW50ZXJjZXB0b3IodGhpcy5yZXF1ZXN0VGltZW91dE1zKSxcbiAgICAgIC4uLmNyZWF0ZVJldHJ5SW50ZXJjZXB0b3JJZkVuYWJsZWQoXG4gICAgICAgIHRoaXMuY29uZmlndXJhdGlvbi5nZXRMb2dnZXJGYWN0b3J5KCksXG4gICAgICAgIHRoaXMuY29uZmlndXJhdGlvbi5nZXRSZXRyeVN0cmF0ZWd5KClcbiAgICAgICksXG4gICAgXTtcbiAgfVxuXG4gIHByaXZhdGUgY29udmVydCh2OiBzdHJpbmcgfCBVaW50OEFycmF5KTogVWludDhBcnJheSB7XG4gICAgaWYgKHR5cGVvZiB2ID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHRoaXMudGV4dEVuY29kZXIuZW5jb2RlKHYpO1xuICAgIH1cbiAgICByZXR1cm4gdjtcbiAgfVxuXG4gIHByaXZhdGUgY29udmVydEFycmF5KHY6IHN0cmluZ1tdIHwgVWludDhBcnJheVtdKTogVWludDhBcnJheVtdIHtcbiAgICByZXR1cm4gdi5tYXAoaSA9PiB0aGlzLmNvbnZlcnQoaSkpO1xuICB9XG5cbiAgcHJpdmF0ZSBjb252ZXJ0TWFwT3JSZWNvcmQoXG4gICAgZWxlbWVudHM6XG4gICAgICB8IE1hcDxzdHJpbmcgfCBVaW50OEFycmF5LCBzdHJpbmcgfCBVaW50OEFycmF5PlxuICAgICAgfCBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBVaW50OEFycmF5PlxuICApOiBncnBjQ2FjaGUuX0RpY3Rpb25hcnlGaWVsZFZhbHVlUGFpcltdIHtcbiAgICBpZiAoZWxlbWVudHMgaW5zdGFuY2VvZiBNYXApIHtcbiAgICAgIHJldHVybiBbLi4uZWxlbWVudHMuZW50cmllcygpXS5tYXAoXG4gICAgICAgIGVsZW1lbnQgPT5cbiAgICAgICAgICBuZXcgZ3JwY0NhY2hlLl9EaWN0aW9uYXJ5RmllbGRWYWx1ZVBhaXIoe1xuICAgICAgICAgICAgZmllbGQ6IHRoaXMuY29udmVydChlbGVtZW50WzBdKSxcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLmNvbnZlcnQoZWxlbWVudFsxXSksXG4gICAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBPYmplY3QuZW50cmllcyhlbGVtZW50cykubWFwKFxuICAgICAgICBlbGVtZW50ID0+XG4gICAgICAgICAgbmV3IGdycGNDYWNoZS5fRGljdGlvbmFyeUZpZWxkVmFsdWVQYWlyKHtcbiAgICAgICAgICAgIGZpZWxkOiB0aGlzLmNvbnZlcnQoZWxlbWVudFswXSksXG4gICAgICAgICAgICB2YWx1ZTogdGhpcy5jb252ZXJ0KGVsZW1lbnRbMV0pLFxuICAgICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY29udmVydFNvcnRlZFNldE1hcE9yUmVjb3JkKFxuICAgIGVsZW1lbnRzOiBNYXA8c3RyaW5nIHwgVWludDhBcnJheSwgbnVtYmVyPiB8IFJlY29yZDxzdHJpbmcsIG51bWJlcj5cbiAgKTogZ3JwY0NhY2hlLl9Tb3J0ZWRTZXRFbGVtZW50W10ge1xuICAgIGlmIChlbGVtZW50cyBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgcmV0dXJuIFsuLi5lbGVtZW50cy5lbnRyaWVzKCldLm1hcChcbiAgICAgICAgZWxlbWVudCA9PlxuICAgICAgICAgIG5ldyBncnBjQ2FjaGUuX1NvcnRlZFNldEVsZW1lbnQoe1xuICAgICAgICAgICAgdmFsdWU6IHRoaXMuY29udmVydChlbGVtZW50WzBdKSxcbiAgICAgICAgICAgIHNjb3JlOiBlbGVtZW50WzFdLFxuICAgICAgICAgIH0pXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmVudHJpZXMoZWxlbWVudHMpLm1hcChcbiAgICAgICAgZWxlbWVudCA9PlxuICAgICAgICAgIG5ldyBncnBjQ2FjaGUuX1NvcnRlZFNldEVsZW1lbnQoe1xuICAgICAgICAgICAgdmFsdWU6IHRoaXMuY29udmVydChlbGVtZW50WzBdKSxcbiAgICAgICAgICAgIHNjb3JlOiBlbGVtZW50WzFdLFxuICAgICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBpdGVtR2V0VHlwZShcbiAgICBjYWNoZU5hbWU6IHN0cmluZyxcbiAgICBrZXk6IHN0cmluZyB8IFVpbnQ4QXJyYXlcbiAgKTogUHJvbWlzZTxJdGVtR2V0VHlwZS5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUNhY2hlTmFtZShjYWNoZU5hbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIG5ldyBJdGVtR2V0VHlwZS5FcnJvcihub3JtYWxpemVTZGtFcnJvcihlcnIgYXMgRXJyb3IpKTtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuc2VuZEl0ZW1HZXRUeXBlKGNhY2hlTmFtZSwgdGhpcy5jb252ZXJ0KGtleSkpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzZW5kSXRlbUdldFR5cGUoXG4gICAgY2FjaGVOYW1lOiBzdHJpbmcsXG4gICAga2V5OiBVaW50OEFycmF5XG4gICk6IFByb21pc2U8SXRlbUdldFR5cGUuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNDYWNoZS5fSXRlbUdldFR5cGVSZXF1ZXN0KHtcbiAgICAgIGNhY2hlX2tleToga2V5LFxuICAgIH0pO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jcmVhdGVNZXRhZGF0YShjYWNoZU5hbWUpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHRoaXMuY2xpZW50V3JhcHBlci5nZXRDbGllbnQoKS5JdGVtR2V0VHlwZShcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgbWV0YWRhdGEsXG4gICAgICAgIHtcbiAgICAgICAgICBpbnRlcmNlcHRvcnM6IHRoaXMuaW50ZXJjZXB0b3JzLFxuICAgICAgICB9LFxuICAgICAgICAoZXJyLCByZXNwKSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3A/Lm1pc3NpbmcpIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IEl0ZW1HZXRUeXBlLk1pc3MoKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChyZXNwPy5mb3VuZCkge1xuICAgICAgICAgICAgcmVzb2x2ZShcbiAgICAgICAgICAgICAgbmV3IEl0ZW1HZXRUeXBlLkhpdChcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnZlcnRJdGVtVHlwZVJlc3VsdChyZXNwLmZvdW5kLml0ZW1fdHlwZSlcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgSXRlbUdldFR5cGUuRXJyb3IoY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIoZXJyKSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlTWV0YWRhdGEoY2FjaGVOYW1lOiBzdHJpbmcpOiBNZXRhZGF0YSB7XG4gICAgY29uc3QgbWV0YWRhdGEgPSBuZXcgTWV0YWRhdGEoKTtcbiAgICBtZXRhZGF0YS5zZXQoJ2NhY2hlJywgY2FjaGVOYW1lKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH1cblxuICBwcml2YXRlIHRvU2luZ2xldG9uRmllbGRWYWx1ZVBhaXIoXG4gICAgZmllbGQ6IFVpbnQ4QXJyYXksXG4gICAgdmFsdWU6IFVpbnQ4QXJyYXlcbiAgKTogZ3JwY0NhY2hlLl9EaWN0aW9uYXJ5RmllbGRWYWx1ZVBhaXJbXSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIG5ldyBncnBjQ2FjaGUuX0RpY3Rpb25hcnlGaWVsZFZhbHVlUGFpcih7XG4gICAgICAgIGZpZWxkOiBmaWVsZCxcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgfSksXG4gICAgXTtcbiAgfVxufVxuIl19