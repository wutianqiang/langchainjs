"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.permissionsFromScope = exports.InternalAuthClient = void 0;
const generated_types_1 = require("@gomomento/generated-types");
var grpcAuth = generated_types_1.auth.auth;
const headers_interceptor_1 = require("./grpc/headers-interceptor");
const client_timeout_interceptor_1 = require("./grpc/client-timeout-interceptor");
const grpc_js_1 = require("@grpc/grpc-js");
const package_json_1 = require("../../package.json");
const cache_service_error_mapper_1 = require("../errors/cache-service-error-mapper");
const utils_1 = require("@gomomento/sdk-core/dist/src/internal/utils");
var Never = grpcAuth._GenerateApiTokenRequest.Never;
var Expires = grpcAuth._GenerateApiTokenRequest.Expires;
const sdk_core_1 = require("@gomomento/sdk-core");
const errors_1 = require("@gomomento/sdk-core/dist/src/errors");
class InternalAuthClient {
    constructor(props) {
        this.creds = props.credentialProvider;
        const headers = [new headers_interceptor_1.Header('Agent', `nodejs:${package_json_1.version}`)];
        this.interceptors = [
            new headers_interceptor_1.HeaderInterceptorProvider(headers).createHeadersInterceptor(),
            (0, client_timeout_interceptor_1.ClientTimeoutInterceptor)(InternalAuthClient.REQUEST_TIMEOUT_MS),
        ];
    }
    async generateAuthToken(scope, expiresIn) {
        const authClient = new grpcAuth.AuthClient(this.creds.getControlEndpoint(), grpc_js_1.ChannelCredentials.createSsl());
        const request = new grpcAuth._GenerateApiTokenRequest({
            auth_token: this.creds.getAuthToken(),
            permissions: permissionsFromScope(scope),
        });
        if (expiresIn.doesExpire()) {
            try {
                (0, utils_1.validateValidForSeconds)(expiresIn.seconds());
            }
            catch (err) {
                return new sdk_core_1.GenerateAuthToken.Error((0, errors_1.normalizeSdkError)(err));
            }
            request.expires = new Expires({
                valid_for_seconds: expiresIn.seconds(),
            });
        }
        else {
            request.never = new Never();
        }
        return await new Promise(resolve => {
            authClient.GenerateApiToken(request, { interceptors: this.interceptors }, (err, resp) => {
                if (err || !resp) {
                    resolve(new sdk_core_1.GenerateAuthToken.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
                else {
                    resolve(new sdk_core_1.GenerateAuthToken.Success(resp.api_key, resp.refresh_token, resp.endpoint, sdk_core_1.ExpiresAt.fromEpoch(resp.valid_until)));
                }
            });
        });
    }
    async refreshAuthToken(refreshToken) {
        const authClient = new grpcAuth.AuthClient(this.creds.getControlEndpoint(), grpc_js_1.ChannelCredentials.createSsl());
        const request = new grpcAuth._RefreshApiTokenRequest({
            api_key: this.creds.getAuthToken(),
            refresh_token: refreshToken,
        });
        return await new Promise(resolve => {
            authClient.RefreshApiToken(request, { interceptors: this.interceptors }, (err, resp) => {
                if (err || !resp) {
                    resolve(new sdk_core_1.RefreshAuthToken.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
                else {
                    resolve(new sdk_core_1.RefreshAuthToken.Success(resp.api_key, resp.refresh_token, resp.endpoint, sdk_core_1.ExpiresAt.fromEpoch(resp.valid_until)));
                }
            });
        });
    }
}
exports.InternalAuthClient = InternalAuthClient;
InternalAuthClient.REQUEST_TIMEOUT_MS = 60 * 1000;
function permissionsFromScope(scope) {
    const result = new grpcAuth._GenerateApiTokenRequest.Permissions();
    if (scope instanceof utils_1.InternalSuperUserPermissions) {
        result.super_user =
            grpcAuth._GenerateApiTokenRequest.SuperUserPermissions.SuperUser;
        return result;
    }
    else if (scope instanceof sdk_core_1.Permissions) {
        const explicitPermissions = new grpcAuth._GenerateApiTokenRequest.ExplicitPermissions();
        explicitPermissions.permissions = scope.permissions.map(p => tokenPermissionToGrpcPermission(p));
        result.explicit = explicitPermissions;
        return result;
    }
    throw new Error(`Unrecognized token scope: ${JSON.stringify(scope)}`);
}
exports.permissionsFromScope = permissionsFromScope;
function tokenPermissionToGrpcPermission(permission) {
    const result = new grpcAuth._GenerateApiTokenRequest.PermissionsType();
    if (permission instanceof sdk_core_1.TopicPermission) {
        result.topic_permissions = topicPermissionToGrpcPermission(permission);
        return result;
    }
    else if (permission instanceof sdk_core_1.CachePermission) {
        result.cache_permissions = cachePermissionToGrpcPermission(permission);
        return result;
    }
    throw new Error(`Unrecognized token permission: ${JSON.stringify(permission)}`);
}
function topicPermissionToGrpcPermission(permission) {
    switch (permission.topicRole) {
        case sdk_core_1.TopicRole.None:
            throw new Error('TopicRole.None not yet supported');
        case sdk_core_1.TopicRole.ReadWrite: {
            const grpcPermission = new grpcAuth._GenerateApiTokenRequest.PermissionsType.TopicPermissions();
            grpcPermission.role =
                grpcAuth._GenerateApiTokenRequest.TopicRole.TopicReadWrite;
            return grpcPermission;
        }
    }
    throw new Error(`Unrecognized topic permission: ${JSON.stringify(permission)}`);
}
function cachePermissionToGrpcPermission(permission) {
    switch (permission.cacheRole) {
        case sdk_core_1.CacheRole.None:
            throw new Error('CacheRole.None not yet supported');
        case sdk_core_1.CacheRole.ReadWrite: {
            const grpcPermission = new grpcAuth._GenerateApiTokenRequest.PermissionsType.CachePermissions();
            grpcPermission.role =
                grpcAuth._GenerateApiTokenRequest.CacheRole.CacheReadWrite;
            return grpcPermission;
        }
    }
    throw new Error(`Unrecognized cache permission: ${JSON.stringify(permission)}`);
}
//# sourceMappingURL=data:application/json;base64,