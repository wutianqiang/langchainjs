"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ControlClient = void 0;
const generated_types_1 = require("@gomomento/generated-types");
var grpcControl = generated_types_1.control.control_client;
const headers_interceptor_1 = require("./grpc/headers-interceptor");
const client_timeout_interceptor_1 = require("./grpc/client-timeout-interceptor");
const constants_1 = require("@grpc/grpc-js/build/src/constants");
const cache_service_error_mapper_1 = require("../errors/cache-service-error-mapper");
const grpc_js_1 = require("@grpc/grpc-js");
const __1 = require("..");
const package_json_1 = require("../../package.json");
const idle_grpc_client_wrapper_1 = require("./grpc/idle-grpc-client-wrapper");
const utils_1 = require("@gomomento/sdk-core/dist/src/internal/utils");
const errors_1 = require("@gomomento/sdk-core/dist/src/errors");
const grpc_response_types_1 = require("@gomomento/sdk-core/dist/src/messages/responses/grpc-response-types");
class ControlClient {
    /**
     * @param {ControlClientProps} props
     */
    constructor(props) {
        this.logger = props.configuration.getLoggerFactory().getLogger(this);
        const headers = [
            new headers_interceptor_1.Header('Authorization', props.credentialProvider.getAuthToken()),
            new headers_interceptor_1.Header('Agent', `nodejs:${package_json_1.version}`),
        ];
        this.interceptors = [
            new headers_interceptor_1.HeaderInterceptorProvider(headers).createHeadersInterceptor(),
            (0, client_timeout_interceptor_1.ClientTimeoutInterceptor)(ControlClient.REQUEST_TIMEOUT_MS),
        ];
        this.logger.debug(`Creating control client using endpoint: '${props.credentialProvider.getControlEndpoint()}`);
        this.clientWrapper = new idle_grpc_client_wrapper_1.IdleGrpcClientWrapper({
            clientFactoryFn: () => new grpcControl.ScsControlClient(props.credentialProvider.getControlEndpoint(), grpc_js_1.ChannelCredentials.createSsl()),
            configuration: props.configuration,
        });
    }
    async createCache(name) {
        try {
            (0, utils_1.validateCacheName)(name);
        }
        catch (err) {
            return new __1.CreateCache.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.info(`Creating cache: ${name}`);
        const request = new grpcControl._CreateCacheRequest({
            cache_name: name,
        });
        return await new Promise(resolve => {
            this.clientWrapper.getClient().CreateCache(request, { interceptors: this.interceptors }, 
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            (err, resp) => {
                if (err) {
                    if (err.code === constants_1.Status.ALREADY_EXISTS) {
                        resolve(new __1.CreateCache.AlreadyExists());
                    }
                    else {
                        resolve(new __1.CreateCache.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                    }
                }
                else {
                    resolve(new __1.CreateCache.Success());
                }
            });
        });
    }
    async deleteCache(name) {
        try {
            (0, utils_1.validateCacheName)(name);
        }
        catch (err) {
            return new __1.DeleteCache.Error((0, errors_1.normalizeSdkError)(err));
        }
        const request = new grpcControl._DeleteCacheRequest({
            cache_name: name,
        });
        this.logger.info(`Deleting cache: ${name}`);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().DeleteCache(request, { interceptors: this.interceptors }, 
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            (err, resp) => {
                if (err) {
                    resolve(new __1.DeleteCache.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
                else {
                    resolve(new __1.DeleteCache.Success());
                }
            });
        });
    }
    async flushCache(cacheName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        }
        catch (err) {
            return new __1.CacheFlush.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Flushing cache: ${cacheName}`);
        return await this.sendFlushCache(cacheName);
    }
    async sendFlushCache(cacheName) {
        const request = new grpcControl._FlushCacheRequest({
            cache_name: cacheName,
        });
        return await new Promise(resolve => {
            this.clientWrapper.getClient().FlushCache(request, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheFlush.Success());
                }
                else {
                    resolve(new __1.CacheFlush.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async listCaches() {
        const request = new grpcControl._ListCachesRequest();
        request.next_token = '';
        this.logger.debug("Issuing 'listCaches' request");
        return await new Promise(resolve => {
            this.clientWrapper
                .getClient()
                .ListCaches(request, { interceptors: this.interceptors }, (err, resp) => {
                if (err || !resp) {
                    resolve(new __1.ListCaches.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
                else {
                    const caches = resp.cache.map(cache => new __1.CacheInfo(cache.cache_name));
                    resolve(new __1.ListCaches.Success(caches));
                }
            });
        });
    }
    async createSigningKey(ttlMinutes, endpoint) {
        try {
            (0, utils_1.validateTtlMinutes)(ttlMinutes);
        }
        catch (err) {
            return new __1.CreateSigningKey.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.debug("Issuing 'createSigningKey' request");
        const request = new grpcControl._CreateSigningKeyRequest();
        request.ttl_minutes = ttlMinutes;
        return await new Promise(resolve => {
            this.clientWrapper
                .getClient()
                .CreateSigningKey(request, { interceptors: this.interceptors }, (err, resp) => {
                if (err) {
                    resolve(new __1.CreateSigningKey.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
                else {
                    const signingKey = new grpc_response_types_1._SigningKey(resp === null || resp === void 0 ? void 0 : resp.key, resp === null || resp === void 0 ? void 0 : resp.expires_at);
                    resolve(new __1.CreateSigningKey.Success(endpoint, signingKey));
                }
            });
        });
    }
    async revokeSigningKey(keyId) {
        const request = new grpcControl._RevokeSigningKeyRequest();
        request.key_id = keyId;
        this.logger.debug("Issuing 'revokeSigningKey' request");
        return await new Promise(resolve => {
            this.clientWrapper
                .getClient()
                .RevokeSigningKey(request, { interceptors: this.interceptors }, err => {
                if (err) {
                    resolve(new __1.RevokeSigningKey.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
                else {
                    resolve(new __1.RevokeSigningKey.Success());
                }
            });
        });
    }
    async listSigningKeys(endpoint) {
        const request = new grpcControl._ListSigningKeysRequest();
        request.next_token = '';
        this.logger.debug("Issuing 'listSigningKeys' request");
        return await new Promise(resolve => {
            this.clientWrapper
                .getClient()
                .ListSigningKeys(request, { interceptors: this.interceptors }, (err, resp) => {
                if (err || !resp) {
                    resolve(new __1.ListSigningKeys.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
                else {
                    const signingKeys = resp.signing_key.map(sk => new grpc_response_types_1._SigningKey(sk.key_id, sk.expires_at));
                    resolve(new __1.ListSigningKeys.Success(endpoint, signingKeys, resp.next_token));
                }
            });
        });
    }
}
exports.ControlClient = ControlClient;
ControlClient.REQUEST_TIMEOUT_MS = 60 * 1000;
//# sourceMappingURL=data:application/json;base64,