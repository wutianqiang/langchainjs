import { CacheDelete, CacheDictionaryFetch, CacheDictionaryGetField, CacheDictionaryGetFields, CacheDictionaryIncrement, CacheDictionaryRemoveField, CacheDictionaryRemoveFields, CacheDictionarySetField, CacheDictionarySetFields, CacheGet, CacheIncrement, CacheListConcatenateBack, CacheListConcatenateFront, CacheListFetch, CacheListLength, CacheListPopBack, CacheListPopFront, CacheListPushBack, CacheListPushFront, CacheListRemoveValue, CacheListRetain, CacheSet, CacheSetAddElements, CacheSetFetch, CacheSetIfNotExists, CacheSetRemoveElements, CacheSortedSetFetch, CacheSortedSetGetRank, CacheSortedSetGetScore, CacheSortedSetGetScores, CacheSortedSetIncrementScore, CacheSortedSetPutElement, CacheSortedSetPutElements, CacheSortedSetRemoveElement, CacheSortedSetRemoveElements, ItemGetType, CollectionTtl, SortedSetOrder } from '..';
import { CacheClientProps } from '../cache-client-props';
import { IDataClient } from '@gomomento/sdk-core/dist/src/internal/clients';
export declare class DataClient implements IDataClient {
    private readonly clientWrapper;
    private readonly textEncoder;
    private readonly configuration;
    private readonly credentialProvider;
    private readonly defaultTtlSeconds;
    private readonly requestTimeoutMs;
    private static readonly DEFAULT_REQUEST_TIMEOUT_MS;
    private readonly logger;
    private readonly interceptors;
    /**
     * @param {CacheClientProps} props
     */
    constructor(props: CacheClientProps);
    getEndpoint(): string;
    private validateRequestTimeout;
    private convertECacheResult;
    private convertItemTypeResult;
    set(cacheName: string, key: string | Uint8Array, value: string | Uint8Array, ttl?: number): Promise<CacheSet.Response>;
    private sendSet;
    setFetch(cacheName: string, setName: string): Promise<CacheSetFetch.Response>;
    private sendSetFetch;
    setAddElements(cacheName: string, setName: string, elements: string[] | Uint8Array[], ttl?: CollectionTtl): Promise<CacheSetAddElements.Response>;
    private sendSetAddElements;
    setRemoveElements(cacheName: string, setName: string, elements: string[] | Uint8Array[]): Promise<CacheSetRemoveElements.Response>;
    private sendSetRemoveElements;
    setIfNotExists(cacheName: string, key: string | Uint8Array, value: string | Uint8Array, ttl?: number): Promise<CacheSetIfNotExists.Response>;
    private sendSetIfNotExists;
    delete(cacheName: string, key: string | Uint8Array): Promise<CacheDelete.Response>;
    private sendDelete;
    get(cacheName: string, key: string | Uint8Array): Promise<CacheGet.Response>;
    private sendGet;
    listConcatenateBack(cacheName: string, listName: string, values: string[] | Uint8Array[], truncateFrontToSize?: number, ttl?: CollectionTtl): Promise<CacheListConcatenateBack.Response>;
    private sendListConcatenateBack;
    listConcatenateFront(cacheName: string, listName: string, values: string[] | Uint8Array[], truncateBackToSize?: number, ttl?: CollectionTtl): Promise<CacheListConcatenateFront.Response>;
    private sendListConcatenateFront;
    listFetch(cacheName: string, listName: string, startIndex?: number, endIndex?: number): Promise<CacheListFetch.Response>;
    private sendListFetch;
    listRetain(cacheName: string, listName: string, startIndex?: number, endIndex?: number, ttl?: CollectionTtl): Promise<CacheListRetain.Response>;
    private sendListRetain;
    listLength(cacheName: string, listName: string): Promise<CacheListLength.Response>;
    private sendListLength;
    listPopBack(cacheName: string, listName: string): Promise<CacheListPopBack.Response>;
    private sendListPopBack;
    listPopFront(cacheName: string, listName: string): Promise<CacheListPopFront.Response>;
    private sendListPopFront;
    listPushBack(cacheName: string, listName: string, value: string | Uint8Array, truncateFrontToSize?: number, ttl?: CollectionTtl): Promise<CacheListPushBack.Response>;
    private sendListPushBack;
    listPushFront(cacheName: string, listName: string, value: string | Uint8Array, truncateBackToSize?: number, ttl?: CollectionTtl): Promise<CacheListPushFront.Response>;
    private sendListPushFront;
    listRemoveValue(cacheName: string, listName: string, value: string | Uint8Array): Promise<CacheListRemoveValue.Response>;
    private sendListRemoveValue;
    dictionaryFetch(cacheName: string, dictionaryName: string): Promise<CacheDictionaryFetch.Response>;
    private sendDictionaryFetch;
    dictionarySetField(cacheName: string, dictionaryName: string, field: string | Uint8Array, value: string | Uint8Array, ttl?: CollectionTtl): Promise<CacheDictionarySetField.Response>;
    private sendDictionarySetField;
    dictionarySetFields(cacheName: string, dictionaryName: string, elements: Map<string | Uint8Array, string | Uint8Array> | Record<string, string | Uint8Array>, ttl?: CollectionTtl): Promise<CacheDictionarySetFields.Response>;
    private sendDictionarySetFields;
    dictionaryGetField(cacheName: string, dictionaryName: string, field: string | Uint8Array): Promise<CacheDictionaryGetField.Response>;
    private sendDictionaryGetField;
    dictionaryGetFields(cacheName: string, dictionaryName: string, fields: string[] | Uint8Array[]): Promise<CacheDictionaryGetFields.Response>;
    private sendDictionaryGetFields;
    dictionaryRemoveField(cacheName: string, dictionaryName: string, field: string | Uint8Array): Promise<CacheDictionaryRemoveField.Response>;
    private sendDictionaryRemoveField;
    dictionaryRemoveFields(cacheName: string, dictionaryName: string, fields: string[] | Uint8Array[]): Promise<CacheDictionaryRemoveFields.Response>;
    private sendDictionaryRemoveFields;
    increment(cacheName: string, field: string | Uint8Array, amount?: number, ttl?: number): Promise<CacheIncrement.Response>;
    private sendIncrement;
    dictionaryIncrement(cacheName: string, dictionaryName: string, field: string | Uint8Array, amount?: number, ttl?: CollectionTtl): Promise<CacheDictionaryIncrement.Response>;
    private sendDictionaryIncrement;
    sortedSetPutElement(cacheName: string, sortedSetName: string, value: string | Uint8Array, score: number, ttl?: CollectionTtl): Promise<CacheSortedSetPutElement.Response>;
    private sendSortedSetPutElement;
    sortedSetPutElements(cacheName: string, sortedSetName: string, elements: Map<string | Uint8Array, number> | Record<string, number>, ttl?: CollectionTtl): Promise<CacheSortedSetPutElements.Response>;
    private sendSortedSetPutElements;
    sortedSetFetchByRank(cacheName: string, sortedSetName: string, order: SortedSetOrder, startRank: number, endRank?: number): Promise<CacheSortedSetFetch.Response>;
    private sendSortedSetFetchByRank;
    sortedSetFetchByScore(cacheName: string, sortedSetName: string, order: SortedSetOrder, minScore?: number, maxScore?: number, offset?: number, count?: number): Promise<CacheSortedSetFetch.Response>;
    private sendSortedSetFetchByScore;
    sortedSetGetRank(cacheName: string, sortedSetName: string, value: string | Uint8Array): Promise<CacheSortedSetGetRank.Response>;
    private sendSortedSetGetRank;
    sortedSetGetScore(cacheName: string, sortedSetName: string, value: string | Uint8Array): Promise<CacheSortedSetGetScore.Response>;
    sortedSetGetScores(cacheName: string, sortedSetName: string, values: string[] | Uint8Array[]): Promise<CacheSortedSetGetScores.Response>;
    private sendSortedSetGetScores;
    sortedSetIncrementScore(cacheName: string, sortedSetName: string, value: string | Uint8Array, amount?: number, ttl?: CollectionTtl): Promise<CacheSortedSetIncrementScore.Response>;
    private sendSortedSetIncrementScore;
    sortedSetRemoveElement(cacheName: string, sortedSetName: string, value: string | Uint8Array): Promise<CacheSortedSetRemoveElement.Response>;
    private sendSortedSetRemoveElement;
    sortedSetRemoveElements(cacheName: string, sortedSetName: string, values: string[] | Uint8Array[]): Promise<CacheSortedSetRemoveElements.Response>;
    private sendSortedSetRemoveElements;
    private initializeInterceptors;
    private convert;
    private convertArray;
    private convertMapOrRecord;
    private convertSortedSetMapOrRecord;
    itemGetType(cacheName: string, key: string | Uint8Array): Promise<ItemGetType.Response>;
    private sendItemGetType;
    private createMetadata;
    private toSingletonFieldValuePair;
}
