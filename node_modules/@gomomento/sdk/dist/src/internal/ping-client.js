"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InternalNodeGrpcPingClient = void 0;
const generated_types_1 = require("@gomomento/generated-types");
var grpcPing = generated_types_1.ping.cache_client;
const headers_interceptor_1 = require("./grpc/headers-interceptor");
const client_timeout_interceptor_1 = require("./grpc/client-timeout-interceptor");
const grpc_js_1 = require("@grpc/grpc-js");
const package_json_1 = require("../../package.json");
const idle_grpc_client_wrapper_1 = require("./grpc/idle-grpc-client-wrapper");
class InternalNodeGrpcPingClient {
    /**
     * @param {PingClientProps} props
     */
    constructor(props) {
        this.logger = props.configuration.getLoggerFactory().getLogger(this);
        const headers = [new headers_interceptor_1.Header('Agent', `nodejs:${package_json_1.version}`)];
        this.interceptors = [
            new headers_interceptor_1.HeaderInterceptorProvider(headers).createHeadersInterceptor(),
            (0, client_timeout_interceptor_1.ClientTimeoutInterceptor)(InternalNodeGrpcPingClient.REQUEST_TIMEOUT_MS),
        ];
        this.logger.debug(`Creating ping client using endpoint: '${props.endpoint}`);
        this.clientWrapper = new idle_grpc_client_wrapper_1.IdleGrpcClientWrapper({
            clientFactoryFn: () => new grpcPing.PingClient(props.endpoint, grpc_js_1.ChannelCredentials.createSsl()),
            configuration: props.configuration,
        });
    }
    async ping() {
        this.logger.info('pinging...');
        const request = new grpcPing._PingRequest();
        return await new Promise((resolve, reject) => {
            this.clientWrapper
                .getClient()
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                .Ping(request, { interceptors: this.interceptors }, (err, resp) => {
                if (err) {
                    this.logger.error('failed to ping');
                    reject(err);
                }
                else {
                    resolve();
                }
            });
        });
    }
}
exports.InternalNodeGrpcPingClient = InternalNodeGrpcPingClient;
InternalNodeGrpcPingClient.REQUEST_TIMEOUT_MS = 60 * 1000;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGluZy1jbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaW50ZXJuYWwvcGluZy1jbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsZ0VBQWdEO0FBQ2hELElBQU8sUUFBUSxHQUFHLHNCQUFJLENBQUMsWUFBWSxDQUFDO0FBQ3BDLG9FQUE2RTtBQUM3RSxrRkFBMkU7QUFDM0UsMkNBQThEO0FBQzlELHFEQUEyQztBQUMzQyw4RUFBc0U7QUFVdEUsTUFBYSwwQkFBMEI7SUFNckM7O09BRUc7SUFDSCxZQUFZLEtBQXNCO1FBQ2hDLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyRSxNQUFNLE9BQU8sR0FBRyxDQUFDLElBQUksNEJBQU0sQ0FBQyxPQUFPLEVBQUUsVUFBVSxzQkFBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzNELElBQUksQ0FBQyxZQUFZLEdBQUc7WUFDbEIsSUFBSSwrQ0FBeUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyx3QkFBd0IsRUFBRTtZQUNqRSxJQUFBLHFEQUF3QixFQUFDLDBCQUEwQixDQUFDLGtCQUFrQixDQUFDO1NBQ3hFLENBQUM7UUFDRixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FDZix5Q0FBeUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUMxRCxDQUFDO1FBQ0YsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLGdEQUFxQixDQUFDO1lBQzdDLGVBQWUsRUFBRSxHQUFHLEVBQUUsQ0FDcEIsSUFBSSxRQUFRLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsNEJBQWtCLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDekUsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1NBQ25DLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxLQUFLLENBQUMsSUFBSTtRQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQy9CLE1BQU0sT0FBTyxHQUFHLElBQUksUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzVDLE9BQU8sTUFBTSxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUMzQyxJQUFJLENBQUMsYUFBYTtpQkFDZixTQUFTLEVBQUU7Z0JBQ1osNkRBQTZEO2lCQUM1RCxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRTtnQkFDOUQsSUFBSSxHQUFHLEVBQUU7b0JBQ1AsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztvQkFDcEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUNiO3FCQUFNO29CQUNMLE9BQU8sRUFBRSxDQUFDO2lCQUNYO1lBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7O0FBMUNILGdFQTJDQztBQXhDeUIsNkNBQWtCLEdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7cGluZ30gZnJvbSAnQGdvbW9tZW50by9nZW5lcmF0ZWQtdHlwZXMnO1xuaW1wb3J0IGdycGNQaW5nID0gcGluZy5jYWNoZV9jbGllbnQ7XG5pbXBvcnQge0hlYWRlciwgSGVhZGVySW50ZXJjZXB0b3JQcm92aWRlcn0gZnJvbSAnLi9ncnBjL2hlYWRlcnMtaW50ZXJjZXB0b3InO1xuaW1wb3J0IHtDbGllbnRUaW1lb3V0SW50ZXJjZXB0b3J9IGZyb20gJy4vZ3JwYy9jbGllbnQtdGltZW91dC1pbnRlcmNlcHRvcic7XG5pbXBvcnQge0NoYW5uZWxDcmVkZW50aWFscywgSW50ZXJjZXB0b3J9IGZyb20gJ0BncnBjL2dycGMtanMnO1xuaW1wb3J0IHt2ZXJzaW9ufSBmcm9tICcuLi8uLi9wYWNrYWdlLmpzb24nO1xuaW1wb3J0IHtJZGxlR3JwY0NsaWVudFdyYXBwZXJ9IGZyb20gJy4vZ3JwYy9pZGxlLWdycGMtY2xpZW50LXdyYXBwZXInO1xuaW1wb3J0IHtHcnBjQ2xpZW50V3JhcHBlcn0gZnJvbSAnLi9ncnBjL2dycGMtY2xpZW50LXdyYXBwZXInO1xuaW1wb3J0IHtDb25maWd1cmF0aW9ufSBmcm9tICcuLi9jb25maWcvY29uZmlndXJhdGlvbic7XG5pbXBvcnQge01vbWVudG9Mb2dnZXJ9IGZyb20gJy4uLyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGluZ0NsaWVudFByb3BzIHtcbiAgY29uZmlndXJhdGlvbjogQ29uZmlndXJhdGlvbjtcbiAgZW5kcG9pbnQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIEludGVybmFsTm9kZUdycGNQaW5nQ2xpZW50IHtcbiAgcHJpdmF0ZSByZWFkb25seSBjbGllbnRXcmFwcGVyOiBHcnBjQ2xpZW50V3JhcHBlcjxncnBjUGluZy5QaW5nQ2xpZW50PjtcbiAgcHJpdmF0ZSByZWFkb25seSBpbnRlcmNlcHRvcnM6IEludGVyY2VwdG9yW107XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFJFUVVFU1RfVElNRU9VVF9NUzogbnVtYmVyID0gNjAgKiAxMDAwO1xuICBwcml2YXRlIHJlYWRvbmx5IGxvZ2dlcjogTW9tZW50b0xvZ2dlcjtcblxuICAvKipcbiAgICogQHBhcmFtIHtQaW5nQ2xpZW50UHJvcHN9IHByb3BzXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcm9wczogUGluZ0NsaWVudFByb3BzKSB7XG4gICAgdGhpcy5sb2dnZXIgPSBwcm9wcy5jb25maWd1cmF0aW9uLmdldExvZ2dlckZhY3RvcnkoKS5nZXRMb2dnZXIodGhpcyk7XG4gICAgY29uc3QgaGVhZGVycyA9IFtuZXcgSGVhZGVyKCdBZ2VudCcsIGBub2RlanM6JHt2ZXJzaW9ufWApXTtcbiAgICB0aGlzLmludGVyY2VwdG9ycyA9IFtcbiAgICAgIG5ldyBIZWFkZXJJbnRlcmNlcHRvclByb3ZpZGVyKGhlYWRlcnMpLmNyZWF0ZUhlYWRlcnNJbnRlcmNlcHRvcigpLFxuICAgICAgQ2xpZW50VGltZW91dEludGVyY2VwdG9yKEludGVybmFsTm9kZUdycGNQaW5nQ2xpZW50LlJFUVVFU1RfVElNRU9VVF9NUyksXG4gICAgXTtcbiAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcbiAgICAgIGBDcmVhdGluZyBwaW5nIGNsaWVudCB1c2luZyBlbmRwb2ludDogJyR7cHJvcHMuZW5kcG9pbnR9YFxuICAgICk7XG4gICAgdGhpcy5jbGllbnRXcmFwcGVyID0gbmV3IElkbGVHcnBjQ2xpZW50V3JhcHBlcih7XG4gICAgICBjbGllbnRGYWN0b3J5Rm46ICgpID0+XG4gICAgICAgIG5ldyBncnBjUGluZy5QaW5nQ2xpZW50KHByb3BzLmVuZHBvaW50LCBDaGFubmVsQ3JlZGVudGlhbHMuY3JlYXRlU3NsKCkpLFxuICAgICAgY29uZmlndXJhdGlvbjogcHJvcHMuY29uZmlndXJhdGlvbixcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBwaW5nKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMubG9nZ2VyLmluZm8oJ3BpbmdpbmcuLi4nKTtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNQaW5nLl9QaW5nUmVxdWVzdCgpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXJcbiAgICAgICAgLmdldENsaWVudCgpXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICAgICAgLlBpbmcocmVxdWVzdCwge2ludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnN9LCAoZXJyLCByZXNwKSA9PiB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoJ2ZhaWxlZCB0byBwaW5nJyk7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==