"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InternalSuperUserPermissions = exports.decodeAuthToken = void 0;
const errors_1 = require("../../errors");
const jwt_decode_1 = require("jwt-decode");
const validators_1 = require("./validators");
const string_1 = require("./string");
const token_scope_1 = require("../../auth/tokens/token-scope");
function decodeAuthTokenClaims(authToken) {
    return (0, jwt_decode_1.default)(authToken);
}
/**
 * @param {string} token
 * @returns TokenAndEndpoints
 */
const decodeAuthToken = (token) => {
    if (!token) {
        throw new errors_1.InvalidArgumentError('malformed auth token');
    }
    try {
        // v1 api tokens don't have an endpoint as part of their claims. Instead, when the SDK returns tokens, we
        // give it to them as a base64 encoded string of '{ "api_key": "<the key>", "endpoint": "prod.momentohq.com" }'.
        // Since in the near future, most customers are going to be using these newer tokens, we are first checking to see if
        // they are base64 encoded, which will tell us that they are our v1 api tokens. If its not, we will fall back to decoding
        // it as one of our legacy jwts.
        if ((0, validators_1.isBase64)(token)) {
            const base64DecodedToken = JSON.parse((0, string_1.decodeFromBase64)(token));
            if (!base64DecodedToken.endpoint || !base64DecodedToken.api_key) {
                throw new errors_1.InvalidArgumentError('failed to parse token');
            }
            return {
                controlEndpoint: `control.${base64DecodedToken.endpoint}`,
                cacheEndpoint: `cache.${base64DecodedToken.endpoint}`,
                authToken: base64DecodedToken.api_key,
            };
        }
        else {
            // This decode function uses generics to advertise that we will usually expect to find the LegacyClaims.  However,
            // if the token is a valid JWT but not actually one of our legacy tokens, the endpoint claims will be undefined,
            // which is why the return type for this function specifies that the controlEndpoint/cacheEndpoint may be undefined.
            const decodedLegacyToken = decodeAuthTokenClaims(token);
            return {
                controlEndpoint: decodedLegacyToken.cp,
                cacheEndpoint: decodedLegacyToken.c,
                authToken: token,
            };
        }
    }
    catch (e) {
        throw new errors_1.InvalidArgumentError('failed to parse token');
    }
};
exports.decodeAuthToken = decodeAuthToken;
class InternalSuperUserPermissions extends token_scope_1.PredefinedScope {
}
exports.InternalSuperUserPermissions = InternalSuperUserPermissions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pbnRlcm5hbC91dGlscy9hdXRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHlDQUFrRDtBQUNsRCwyQ0FBbUM7QUFDbkMsNkNBQXNDO0FBQ3RDLHFDQUEwQztBQUMxQywrREFBOEQ7QUFrQjlELFNBQVMscUJBQXFCLENBQUksU0FBaUI7SUFDakQsT0FBTyxJQUFBLG9CQUFTLEVBQUksU0FBUyxDQUFDLENBQUM7QUFDakMsQ0FBQztBQVVEOzs7R0FHRztBQUNJLE1BQU0sZUFBZSxHQUFHLENBQUMsS0FBYyxFQUFxQixFQUFFO0lBQ25FLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDVixNQUFNLElBQUksNkJBQW9CLENBQUMsc0JBQXNCLENBQUMsQ0FBQztLQUN4RDtJQUVELElBQUk7UUFDRix5R0FBeUc7UUFDekcsZ0hBQWdIO1FBQ2hILHFIQUFxSDtRQUNySCx5SEFBeUg7UUFDekgsZ0NBQWdDO1FBQ2hDLElBQUksSUFBQSxxQkFBUSxFQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ25CLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FDbkMsSUFBQSx5QkFBZ0IsRUFBQyxLQUFLLENBQUMsQ0FDQSxDQUFDO1lBQzFCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLEVBQUU7Z0JBQy9ELE1BQU0sSUFBSSw2QkFBb0IsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO2FBQ3pEO1lBQ0QsT0FBTztnQkFDTCxlQUFlLEVBQUUsV0FBVyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUU7Z0JBQ3pELGFBQWEsRUFBRSxTQUFTLGtCQUFrQixDQUFDLFFBQVEsRUFBRTtnQkFDckQsU0FBUyxFQUFFLGtCQUFrQixDQUFDLE9BQU87YUFDdEMsQ0FBQztTQUNIO2FBQU07WUFDTCxrSEFBa0g7WUFDbEgsZ0hBQWdIO1lBQ2hILG9IQUFvSDtZQUNwSCxNQUFNLGtCQUFrQixHQUFHLHFCQUFxQixDQUFlLEtBQUssQ0FBQyxDQUFDO1lBQ3RFLE9BQU87Z0JBQ0wsZUFBZSxFQUFFLGtCQUFrQixDQUFDLEVBQUU7Z0JBQ3RDLGFBQWEsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO2dCQUNuQyxTQUFTLEVBQUUsS0FBSzthQUNqQixDQUFDO1NBQ0g7S0FDRjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsTUFBTSxJQUFJLDZCQUFvQixDQUFDLHVCQUF1QixDQUFDLENBQUM7S0FDekQ7QUFDSCxDQUFDLENBQUM7QUFyQ1csUUFBQSxlQUFlLG1CQXFDMUI7QUFFRixNQUFhLDRCQUE2QixTQUFRLDZCQUFlO0NBQUc7QUFBcEUsb0VBQW9FIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbnZhbGlkQXJndW1lbnRFcnJvcn0gZnJvbSAnLi4vLi4vZXJyb3JzJztcbmltcG9ydCBqd3REZWNvZGUgZnJvbSAnand0LWRlY29kZSc7XG5pbXBvcnQge2lzQmFzZTY0fSBmcm9tICcuL3ZhbGlkYXRvcnMnO1xuaW1wb3J0IHtkZWNvZGVGcm9tQmFzZTY0fSBmcm9tICcuL3N0cmluZyc7XG5pbXBvcnQge1ByZWRlZmluZWRTY29wZX0gZnJvbSAnLi4vLi4vYXV0aC90b2tlbnMvdG9rZW4tc2NvcGUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIExlZ2FjeUNsYWltcyB7XG4gIC8qKlxuICAgKiBjb250cm9sIHBsYW5lIGVuZHBvaW50XG4gICAqL1xuICBjcDogc3RyaW5nO1xuICAvKipcbiAgICogY2FjaGUgZW5kcG9pbnRcbiAgICovXG4gIGM6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCYXNlNjREZWNvZGVkVjFUb2tlbiB7XG4gIGFwaV9rZXk6IHN0cmluZztcbiAgZW5kcG9pbnQ6IHN0cmluZztcbn1cblxuZnVuY3Rpb24gZGVjb2RlQXV0aFRva2VuQ2xhaW1zPFQ+KGF1dGhUb2tlbjogc3RyaW5nKTogVCB7XG4gIHJldHVybiBqd3REZWNvZGU8VD4oYXV0aFRva2VuKTtcbn1cblxuaW50ZXJmYWNlIFRva2VuQW5kRW5kcG9pbnRzIHtcbiAgLy8gSWYgd2UgZGVjb2RlIGEgSldUIHRoYXQgZG9lc24ndCBhY3R1YWxseSBoYXZlIHRoZSBjb250cm9sRW5kcG9pbnQvY2FjaGVFbmRwb2ludCBjbGFpbXMsIHRoZW4gdGhleSB3aWxsIGNvbWUgYmFja1xuICAvLyBhcyB1bmRlZmluZWQ7IHRodXMgd2UgbmVlZCB0aGUgdHlwZXMgaGVyZSB0byBiZSBgc3RyaW5nIHwgdW5kZWZpbmVkYC5cbiAgY29udHJvbEVuZHBvaW50OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIGNhY2hlRW5kcG9pbnQ6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgYXV0aFRva2VuOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHRva2VuXG4gKiBAcmV0dXJucyBUb2tlbkFuZEVuZHBvaW50c1xuICovXG5leHBvcnQgY29uc3QgZGVjb2RlQXV0aFRva2VuID0gKHRva2VuPzogc3RyaW5nKTogVG9rZW5BbmRFbmRwb2ludHMgPT4ge1xuICBpZiAoIXRva2VuKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdtYWxmb3JtZWQgYXV0aCB0b2tlbicpO1xuICB9XG5cbiAgdHJ5IHtcbiAgICAvLyB2MSBhcGkgdG9rZW5zIGRvbid0IGhhdmUgYW4gZW5kcG9pbnQgYXMgcGFydCBvZiB0aGVpciBjbGFpbXMuIEluc3RlYWQsIHdoZW4gdGhlIFNESyByZXR1cm5zIHRva2Vucywgd2VcbiAgICAvLyBnaXZlIGl0IHRvIHRoZW0gYXMgYSBiYXNlNjQgZW5jb2RlZCBzdHJpbmcgb2YgJ3sgXCJhcGlfa2V5XCI6IFwiPHRoZSBrZXk+XCIsIFwiZW5kcG9pbnRcIjogXCJwcm9kLm1vbWVudG9ocS5jb21cIiB9Jy5cbiAgICAvLyBTaW5jZSBpbiB0aGUgbmVhciBmdXR1cmUsIG1vc3QgY3VzdG9tZXJzIGFyZSBnb2luZyB0byBiZSB1c2luZyB0aGVzZSBuZXdlciB0b2tlbnMsIHdlIGFyZSBmaXJzdCBjaGVja2luZyB0byBzZWUgaWZcbiAgICAvLyB0aGV5IGFyZSBiYXNlNjQgZW5jb2RlZCwgd2hpY2ggd2lsbCB0ZWxsIHVzIHRoYXQgdGhleSBhcmUgb3VyIHYxIGFwaSB0b2tlbnMuIElmIGl0cyBub3QsIHdlIHdpbGwgZmFsbCBiYWNrIHRvIGRlY29kaW5nXG4gICAgLy8gaXQgYXMgb25lIG9mIG91ciBsZWdhY3kgand0cy5cbiAgICBpZiAoaXNCYXNlNjQodG9rZW4pKSB7XG4gICAgICBjb25zdCBiYXNlNjREZWNvZGVkVG9rZW4gPSBKU09OLnBhcnNlKFxuICAgICAgICBkZWNvZGVGcm9tQmFzZTY0KHRva2VuKVxuICAgICAgKSBhcyBCYXNlNjREZWNvZGVkVjFUb2tlbjtcbiAgICAgIGlmICghYmFzZTY0RGVjb2RlZFRva2VuLmVuZHBvaW50IHx8ICFiYXNlNjREZWNvZGVkVG9rZW4uYXBpX2tleSkge1xuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ2ZhaWxlZCB0byBwYXJzZSB0b2tlbicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29udHJvbEVuZHBvaW50OiBgY29udHJvbC4ke2Jhc2U2NERlY29kZWRUb2tlbi5lbmRwb2ludH1gLFxuICAgICAgICBjYWNoZUVuZHBvaW50OiBgY2FjaGUuJHtiYXNlNjREZWNvZGVkVG9rZW4uZW5kcG9pbnR9YCxcbiAgICAgICAgYXV0aFRva2VuOiBiYXNlNjREZWNvZGVkVG9rZW4uYXBpX2tleSxcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoaXMgZGVjb2RlIGZ1bmN0aW9uIHVzZXMgZ2VuZXJpY3MgdG8gYWR2ZXJ0aXNlIHRoYXQgd2Ugd2lsbCB1c3VhbGx5IGV4cGVjdCB0byBmaW5kIHRoZSBMZWdhY3lDbGFpbXMuICBIb3dldmVyLFxuICAgICAgLy8gaWYgdGhlIHRva2VuIGlzIGEgdmFsaWQgSldUIGJ1dCBub3QgYWN0dWFsbHkgb25lIG9mIG91ciBsZWdhY3kgdG9rZW5zLCB0aGUgZW5kcG9pbnQgY2xhaW1zIHdpbGwgYmUgdW5kZWZpbmVkLFxuICAgICAgLy8gd2hpY2ggaXMgd2h5IHRoZSByZXR1cm4gdHlwZSBmb3IgdGhpcyBmdW5jdGlvbiBzcGVjaWZpZXMgdGhhdCB0aGUgY29udHJvbEVuZHBvaW50L2NhY2hlRW5kcG9pbnQgbWF5IGJlIHVuZGVmaW5lZC5cbiAgICAgIGNvbnN0IGRlY29kZWRMZWdhY3lUb2tlbiA9IGRlY29kZUF1dGhUb2tlbkNsYWltczxMZWdhY3lDbGFpbXM+KHRva2VuKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvbnRyb2xFbmRwb2ludDogZGVjb2RlZExlZ2FjeVRva2VuLmNwLFxuICAgICAgICBjYWNoZUVuZHBvaW50OiBkZWNvZGVkTGVnYWN5VG9rZW4uYyxcbiAgICAgICAgYXV0aFRva2VuOiB0b2tlbixcbiAgICAgIH07XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdmYWlsZWQgdG8gcGFyc2UgdG9rZW4nKTtcbiAgfVxufTtcblxuZXhwb3J0IGNsYXNzIEludGVybmFsU3VwZXJVc2VyUGVybWlzc2lvbnMgZXh0ZW5kcyBQcmVkZWZpbmVkU2NvcGUge31cbiJdfQ==