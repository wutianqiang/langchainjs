"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.Miss = exports.Hit = exports.Response = void 0;
const errors_1 = require("../../errors");
const response_base_1 = require("./response-base");
const CacheSortedSetGetScoreResponse = require("./cache-sorted-set-get-score");
const grpc_response_types_1 = require("./grpc-response-types");
/**
 * Parent response type for a sorted set get scores request.  The
 * response object is resolved to a type-safe object of one of
 * the following subtypes:
 *
 * - {Hit}
 * - {Miss}
 * - {Error}
 *
 * `instanceof` type guards can be used to operate on the appropriate subtype.
 * @example
 * For example:
 * ```
 * if (response instanceof CacheSortedSetGetScores.Error) {
 *   // Handle error as appropriate.  The compiler will smart-cast `response` to type
 *   // `CacheSortedSetGetScores.Error` in this block, so you will have access to the properties
 *   // of the Error class; e.g. `response.errorCode()`.
 * }
 * ```
 */
class Response extends response_base_1.ResponseBase {
}
exports.Response = Response;
class _Hit extends Response {
    constructor(scores, values) {
        super();
        this._responses = [];
        scores.forEach((score, index) => {
            if (score.result === grpc_response_types_1._ECacheResult.Hit) {
                this._responses.push(new CacheSortedSetGetScoreResponse.Hit(score.score, values[index]));
            }
            else if (score.result === grpc_response_types_1._ECacheResult.Miss) {
                this._responses.push(new CacheSortedSetGetScoreResponse.Miss(values[index]));
            }
            else {
                this._responses.push(new CacheSortedSetGetScoreResponse.Error(new errors_1.UnknownError(score.result.toString()), values[index]));
            }
        });
    }
    responses() {
        return this._responses;
    }
    /**
     * Returns the data as a Map whose keys are byte arrays and values numbers.
     * @returns {Map<Uint8Array, number>}
     */
    valueMapUint8Array() {
        return this._responses.reduce((acc, response) => {
            if (response instanceof CacheSortedSetGetScoreResponse.Hit) {
                acc.set(response.valueUint8Array(), response.score());
            }
            return acc;
        }, new Map());
    }
    /**
     * Returns the data as a Map whose keys are utf-8 strings, decoded from the underlying byte arrays and values are numbers.
     * @returns {Map<string, number>}
     */
    valueMapString() {
        return this._responses.reduce((acc, response) => {
            if (response instanceof CacheSortedSetGetScoreResponse.Hit) {
                acc.set(response.valueString(), response.score());
            }
            return acc;
        }, new Map());
    }
    /**
     * Returns the data as a Map whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This is a convenience alias for {valueMapStringString}.
     * @returns {Map<string, number>}
     */
    valueMap() {
        return this.valueMapString();
    }
    /**
     * Returns the data as a Record whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This can be used in most places where an Object is desired.
     * @returns {Record<string, number>}
     */
    valueRecordString() {
        return this._responses.reduce((acc, response) => {
            if (response instanceof CacheSortedSetGetScoreResponse.Hit) {
                acc[response.valueString()] = response.score();
            }
            return acc;
        }, {});
    }
    /**
     * Returns the data as a Record whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This can be used in most places where an Object is desired.  This is a convenience alias for
     * {valueRecordStringString}.
     * @returns {Record<string, number>}
     */
    valueRecord() {
        return this.valueRecordString();
    }
    toString() {
        let stringRepresentation = '';
        this.valueMapString().forEach((value, key) => {
            const keyValue = `${key}: ${value}, `;
            stringRepresentation = stringRepresentation + keyValue;
        });
        return `${super.toString()}: valueMapString: ${stringRepresentation.slice(0, -2)}`;
    }
}
/**
 * Indicates that the requested data was successfully retrieved from the cache.  Provides
 * `value*` accessors to retrieve the data in the appropriate format.
 */
class Hit extends (0, response_base_1.ResponseHit)(_Hit) {
}
exports.Hit = Hit;
class _Miss extends Response {
}
/**
 * Indicates that the requested data was not available in the cache.
 */
class Miss extends (0, response_base_1.ResponseMiss)(_Miss) {
}
exports.Miss = Miss;
class _Error extends Response {
    constructor(_innerException) {
        super();
        this._innerException = _innerException;
    }
}
/**
 * Indicates that an error occurred during the dictionary get fields request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends (0, response_base_1.ResponseError)(_Error) {
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,