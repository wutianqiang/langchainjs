"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.Miss = exports.Hit = exports.Response = void 0;
const response_base_1 = require("./response-base");
const utils_1 = require("../../internal/utils");
const TEXT_DECODER = new TextDecoder();
/**
 * Parent response type for a dictionary get field request.  The
 * response object is resolved to a type-safe object of one of
 * the following subtypes:
 *
 * - {Hit}
 * - {Miss}
 * - {Error}
 *
 * `instanceof` type guards can be used to operate on the appropriate subtype.
 * @example
 * For example:
 * ```
 * if (response instanceof CacheDictionaryGetField.Error) {
 *   // Handle error as appropriate.  The compiler will smart-cast `response` to type
 *   // `CacheDictionaryGetField.Error` in this block, so you will have access to the properties
 *   // of the Error class; e.g. `response.errorCode()`.
 * }
 * ```
 */
class Response extends response_base_1.ResponseBase {
}
exports.Response = Response;
class _Hit extends Response {
    constructor(body) {
        super();
        this.body = body;
    }
    /**
     * Returns the data as a utf-8 string, decoded from the underlying byte array.
     * @returns string
     */
    valueString() {
        return TEXT_DECODER.decode(this.body);
    }
    /**
     * Returns the data as a byte array.
     * @returns {Uint8Array}
     */
    valueUint8Array() {
        return this.body;
    }
    toString() {
        const display = (0, utils_1.truncateString)(this.valueString());
        return `${super.toString()}: ${display}`;
    }
}
/**
 * Indicates that the requested data was successfully retrieved from the cache.  Provides
 * `value*` accessors to retrieve the data in the appropriate format.
 */
class Hit extends (0, response_base_1.ResponseHit)(_Hit) {
    constructor(body, field) {
        super(body);
        this.field = field;
    }
    /**
     * Returns the field name for the retrieved element, as a utf-8 string decoded from the underlying byte array.
     * @returns {string}
     */
    fieldString() {
        return TEXT_DECODER.decode(this.field);
    }
    /**
     * Returns the field name for the retrieved element, as a byte array.
     * @returns {Uint8Array}
     */
    fieldUint8Array() {
        return this.field;
    }
}
exports.Hit = Hit;
class _Miss extends Response {
}
/**
 * Indicates that the requested data was not available in the cache.
 */
class Miss extends (0, response_base_1.ResponseMiss)(_Miss) {
    constructor(field) {
        super();
        this.field = field;
    }
    /**
     * Returns the field name for the retrieved element, as a utf-8 string decoded from the underlying byte array.
     * @returns {string}
     */
    fieldString() {
        return TEXT_DECODER.decode(this.field);
    }
    /**
     * Returns the field name for the retrieved element, as a byte array.
     * @returns {Uint8Array}
     */
    fieldUint8Array() {
        return this.field;
    }
}
exports.Miss = Miss;
class _Error extends Response {
    constructor(_innerException) {
        super();
        this._innerException = _innerException;
    }
}
/**
 * Indicates that an error occurred during the dictionary get field request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends (0, response_base_1.ResponseError)(_Error) {
    constructor(_innerException, field) {
        super(_innerException);
        this._innerException = _innerException;
        this.field = field;
    }
    /**
     * Returns the field name for the retrieved element, as a utf-8 string decoded from the underlying byte array.
     * @returns {string}
     */
    fieldString() {
        return TEXT_DECODER.decode(this.field);
    }
    /**
     * Returns the field name for the retrieved element, as a byte array.
     * @returns {Uint8Array}
     */
    fieldUint8Array() {
        return this.field;
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,