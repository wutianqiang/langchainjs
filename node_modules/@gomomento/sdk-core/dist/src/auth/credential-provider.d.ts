/**
 * Encapsulates arguments for instantiating an EnvMomentoTokenProvider
 */
interface CredentialProviderProps {
    /**
     * optionally overrides the default controlEndpoint
     */
    controlEndpoint?: string;
    /**
     * optionally overrides the default cacheEndpoint
     */
    cacheEndpoint?: string;
}
/**
 * Provides information that the CacheClient needs in order to establish a connection to and authenticate with
 * the Momento service.
 * @export
 * @interface CredentialProvider
 */
export declare abstract class CredentialProvider {
    /**
     * @returns {string} Auth token provided by user, required to authenticate with the service
     */
    abstract getAuthToken(): string;
    /**
     * @returns {string} The host which the Momento client will connect to for Momento control plane operations
     */
    abstract getControlEndpoint(): string;
    /**
     * @returns {string} The host which the Momento client will connect to for Momento data plane operations
     */
    abstract getCacheEndpoint(): string;
    static fromEnvironmentVariable(props: EnvMomentoTokenProviderProps): CredentialProvider;
    static fromString(props: StringMomentoTokenProviderProps): CredentialProvider;
}
declare abstract class CredentialProviderBase implements CredentialProvider {
    abstract getAuthToken(): string;
    abstract getCacheEndpoint(): string;
    abstract getControlEndpoint(): string;
    valueOf(): object;
}
export interface StringMomentoTokenProviderProps extends CredentialProviderProps {
    /**
     * authToken the momento auth token
     */
    authToken: string;
}
/**
 * Reads and parses a momento auth token stored in a String
 * @export
 * @class StringMomentoTokenProvider
 */
export declare class StringMomentoTokenProvider extends CredentialProviderBase {
    private readonly authToken;
    private readonly controlEndpoint;
    private readonly cacheEndpoint;
    /**
     * @param {StringMomentoTokenProviderProps} props configuration options for the token provider
     */
    constructor(props: StringMomentoTokenProviderProps);
    getAuthToken(): string;
    getCacheEndpoint(): string;
    getControlEndpoint(): string;
}
export interface EnvMomentoTokenProviderProps extends CredentialProviderProps {
    /**
     * the name of the environment variable from which the auth token will be read
     */
    environmentVariableName: string;
}
/**
 * Reads and parses a momento auth token stored as an environment variable.
 * @export
 * @class EnvMomentoTokenProvider
 */
export declare class EnvMomentoTokenProvider extends StringMomentoTokenProvider {
    environmentVariableName: string;
    /**
     * @param {EnvMomentoTokenProviderProps} props configuration options for the token provider
     */
    constructor(props: EnvMomentoTokenProviderProps);
}
export {};
