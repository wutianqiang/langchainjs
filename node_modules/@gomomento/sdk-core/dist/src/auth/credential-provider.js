"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnvMomentoTokenProvider = exports.StringMomentoTokenProvider = exports.CredentialProvider = void 0;
const utils_1 = require("../internal/utils");
/**
 * Provides information that the CacheClient needs in order to establish a connection to and authenticate with
 * the Momento service.
 * @export
 * @interface CredentialProvider
 */
class CredentialProvider {
    static fromEnvironmentVariable(props) {
        return new EnvMomentoTokenProvider(props);
    }
    static fromString(props) {
        return new StringMomentoTokenProvider(props);
    }
}
exports.CredentialProvider = CredentialProvider;
class CredentialProviderBase {
    valueOf() {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const entries = Object.entries(this).filter(([k]) => k !== 'authToken');
        const clone = (0, utils_1.fromEntries)(entries);
        return clone.valueOf();
    }
}
/**
 * Reads and parses a momento auth token stored in a String
 * @export
 * @class StringMomentoTokenProvider
 */
class StringMomentoTokenProvider extends CredentialProviderBase {
    /**
     * @param {StringMomentoTokenProviderProps} props configuration options for the token provider
     */
    constructor(props) {
        var _a, _b;
        super();
        const decodedToken = (0, utils_1.decodeAuthToken)(props.authToken);
        this.authToken = decodedToken.authToken;
        const controlEndpoint = (_a = props.controlEndpoint) !== null && _a !== void 0 ? _a : decodedToken.controlEndpoint;
        if (controlEndpoint === undefined) {
            throw new Error('Malformed token; unable to determine control endpoint.  Depending on the type of token you are using, you may need to specify the controlEndpoint explicitly.');
        }
        const cacheEndpoint = (_b = props.cacheEndpoint) !== null && _b !== void 0 ? _b : decodedToken.cacheEndpoint;
        if (cacheEndpoint === undefined) {
            throw new Error('Malformed token; unable to determine cache endpoint.  Depending on the type of token you are using, you may need to specify the cacheEndpoint explicitly.');
        }
        this.controlEndpoint = controlEndpoint;
        this.cacheEndpoint = cacheEndpoint;
    }
    getAuthToken() {
        return this.authToken;
    }
    getCacheEndpoint() {
        return this.cacheEndpoint;
    }
    getControlEndpoint() {
        return this.controlEndpoint;
    }
}
exports.StringMomentoTokenProvider = StringMomentoTokenProvider;
/**
 * Reads and parses a momento auth token stored as an environment variable.
 * @export
 * @class EnvMomentoTokenProvider
 */
class EnvMomentoTokenProvider extends StringMomentoTokenProvider {
    /**
     * @param {EnvMomentoTokenProviderProps} props configuration options for the token provider
     */
    constructor(props) {
        var _a, _b;
        const authToken = process.env[props.environmentVariableName];
        if (!authToken) {
            throw new Error(`Missing required environment variable ${props.environmentVariableName}`);
        }
        const decodedToken = (0, utils_1.decodeAuthToken)(authToken);
        super({
            authToken: decodedToken.authToken,
            controlEndpoint: (_a = props.controlEndpoint) !== null && _a !== void 0 ? _a : decodedToken.controlEndpoint,
            cacheEndpoint: (_b = props.cacheEndpoint) !== null && _b !== void 0 ? _b : decodedToken.cacheEndpoint,
        });
        this.environmentVariableName = props.environmentVariableName;
    }
}
exports.EnvMomentoTokenProvider = EnvMomentoTokenProvider;
//# sourceMappingURL=data:application/json;base64,