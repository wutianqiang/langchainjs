"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.control_client = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.18.1
 * source: controlclient.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const pb_1 = __importStar(require("google-protobuf"));
const grpc_1 = __importStar(require("@grpc/grpc-js"));
var control_client;
(function (control_client) {
    var __DeleteCacheRequest_one_of_decls, __DeleteCacheResponse_one_of_decls, __CreateCacheRequest_one_of_decls, __CreateCacheResponse_one_of_decls, __ListCachesRequest_one_of_decls, __Cache_one_of_decls, __ListCachesResponse_one_of_decls, __CreateSigningKeyRequest_one_of_decls, __CreateSigningKeyResponse_one_of_decls, __RevokeSigningKeyRequest_one_of_decls, __RevokeSigningKeyResponse_one_of_decls, __SigningKey_one_of_decls, __ListSigningKeysRequest_one_of_decls, __ListSigningKeysResponse_one_of_decls, __FlushCacheRequest_one_of_decls, __FlushCacheResponse_one_of_decls;
    class _DeleteCacheRequest extends pb_1.Message {
        constructor(data) {
            super();
            __DeleteCacheRequest_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __DeleteCacheRequest_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cache_name" in data && data.cache_name != undefined) {
                    this.cache_name = data.cache_name;
                }
            }
        }
        get cache_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set cache_name(value) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data) {
            const message = new _DeleteCacheRequest({});
            if (data.cache_name != null) {
                message.cache_name = data.cache_name;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.cache_name != null) {
                data.cache_name = this.cache_name;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.cache_name.length)
                writer.writeString(1, this.cache_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _DeleteCacheRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.cache_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _DeleteCacheRequest.deserialize(bytes);
        }
    }
    __DeleteCacheRequest_one_of_decls = new WeakMap();
    control_client._DeleteCacheRequest = _DeleteCacheRequest;
    class _DeleteCacheResponse extends pb_1.Message {
        constructor(data) {
            super();
            __DeleteCacheResponse_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __DeleteCacheResponse_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data) {
            const message = new _DeleteCacheResponse({});
            return message;
        }
        toObject() {
            const data = {};
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _DeleteCacheResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _DeleteCacheResponse.deserialize(bytes);
        }
    }
    __DeleteCacheResponse_one_of_decls = new WeakMap();
    control_client._DeleteCacheResponse = _DeleteCacheResponse;
    class _CreateCacheRequest extends pb_1.Message {
        constructor(data) {
            super();
            __CreateCacheRequest_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __CreateCacheRequest_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cache_name" in data && data.cache_name != undefined) {
                    this.cache_name = data.cache_name;
                }
            }
        }
        get cache_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set cache_name(value) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data) {
            const message = new _CreateCacheRequest({});
            if (data.cache_name != null) {
                message.cache_name = data.cache_name;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.cache_name != null) {
                data.cache_name = this.cache_name;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.cache_name.length)
                writer.writeString(1, this.cache_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _CreateCacheRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.cache_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _CreateCacheRequest.deserialize(bytes);
        }
    }
    __CreateCacheRequest_one_of_decls = new WeakMap();
    control_client._CreateCacheRequest = _CreateCacheRequest;
    class _CreateCacheResponse extends pb_1.Message {
        constructor(data) {
            super();
            __CreateCacheResponse_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __CreateCacheResponse_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data) {
            const message = new _CreateCacheResponse({});
            return message;
        }
        toObject() {
            const data = {};
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _CreateCacheResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _CreateCacheResponse.deserialize(bytes);
        }
    }
    __CreateCacheResponse_one_of_decls = new WeakMap();
    control_client._CreateCacheResponse = _CreateCacheResponse;
    class _ListCachesRequest extends pb_1.Message {
        constructor(data) {
            super();
            __ListCachesRequest_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __ListCachesRequest_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("next_token" in data && data.next_token != undefined) {
                    this.next_token = data.next_token;
                }
            }
        }
        get next_token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set next_token(value) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data) {
            const message = new _ListCachesRequest({});
            if (data.next_token != null) {
                message.next_token = data.next_token;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.next_token != null) {
                data.next_token = this.next_token;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.next_token.length)
                writer.writeString(1, this.next_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _ListCachesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.next_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _ListCachesRequest.deserialize(bytes);
        }
    }
    __ListCachesRequest_one_of_decls = new WeakMap();
    control_client._ListCachesRequest = _ListCachesRequest;
    class _Cache extends pb_1.Message {
        constructor(data) {
            super();
            __Cache_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __Cache_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cache_name" in data && data.cache_name != undefined) {
                    this.cache_name = data.cache_name;
                }
            }
        }
        get cache_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set cache_name(value) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data) {
            const message = new _Cache({});
            if (data.cache_name != null) {
                message.cache_name = data.cache_name;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.cache_name != null) {
                data.cache_name = this.cache_name;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.cache_name.length)
                writer.writeString(1, this.cache_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _Cache();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.cache_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _Cache.deserialize(bytes);
        }
    }
    __Cache_one_of_decls = new WeakMap();
    control_client._Cache = _Cache;
    class _ListCachesResponse extends pb_1.Message {
        constructor(data) {
            super();
            __ListCachesResponse_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], __classPrivateFieldGet(this, __ListCachesResponse_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cache" in data && data.cache != undefined) {
                    this.cache = data.cache;
                }
                if ("next_token" in data && data.next_token != undefined) {
                    this.next_token = data.next_token;
                }
            }
        }
        get cache() {
            return pb_1.Message.getRepeatedWrapperField(this, _Cache, 1);
        }
        set cache(value) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "");
        }
        set next_token(value) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data) {
            const message = new _ListCachesResponse({});
            if (data.cache != null) {
                message.cache = data.cache.map(item => _Cache.fromObject(item));
            }
            if (data.next_token != null) {
                message.next_token = data.next_token;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.cache != null) {
                data.cache = this.cache.map((item) => item.toObject());
            }
            if (this.next_token != null) {
                data.next_token = this.next_token;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.cache.length)
                writer.writeRepeatedMessage(1, this.cache, (item) => item.serialize(writer));
            if (this.next_token.length)
                writer.writeString(2, this.next_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _ListCachesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.cache, () => pb_1.Message.addToRepeatedWrapperField(message, 1, _Cache.deserialize(reader), _Cache));
                        break;
                    case 2:
                        message.next_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _ListCachesResponse.deserialize(bytes);
        }
    }
    __ListCachesResponse_one_of_decls = new WeakMap();
    control_client._ListCachesResponse = _ListCachesResponse;
    class _CreateSigningKeyRequest extends pb_1.Message {
        constructor(data) {
            super();
            __CreateSigningKeyRequest_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __CreateSigningKeyRequest_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ttl_minutes" in data && data.ttl_minutes != undefined) {
                    this.ttl_minutes = data.ttl_minutes;
                }
            }
        }
        get ttl_minutes() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0);
        }
        set ttl_minutes(value) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data) {
            const message = new _CreateSigningKeyRequest({});
            if (data.ttl_minutes != null) {
                message.ttl_minutes = data.ttl_minutes;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.ttl_minutes != null) {
                data.ttl_minutes = this.ttl_minutes;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ttl_minutes != 0)
                writer.writeUint32(1, this.ttl_minutes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _CreateSigningKeyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ttl_minutes = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _CreateSigningKeyRequest.deserialize(bytes);
        }
    }
    __CreateSigningKeyRequest_one_of_decls = new WeakMap();
    control_client._CreateSigningKeyRequest = _CreateSigningKeyRequest;
    class _CreateSigningKeyResponse extends pb_1.Message {
        constructor(data) {
            super();
            __CreateSigningKeyResponse_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __CreateSigningKeyResponse_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("expires_at" in data && data.expires_at != undefined) {
                    this.expires_at = data.expires_at;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set key(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get expires_at() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0);
        }
        set expires_at(value) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data) {
            const message = new _CreateSigningKeyResponse({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.expires_at != null) {
                message.expires_at = data.expires_at;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.expires_at != null) {
                data.expires_at = this.expires_at;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key.length)
                writer.writeString(1, this.key);
            if (this.expires_at != 0)
                writer.writeUint64(2, this.expires_at);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _CreateSigningKeyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readString();
                        break;
                    case 2:
                        message.expires_at = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _CreateSigningKeyResponse.deserialize(bytes);
        }
    }
    __CreateSigningKeyResponse_one_of_decls = new WeakMap();
    control_client._CreateSigningKeyResponse = _CreateSigningKeyResponse;
    class _RevokeSigningKeyRequest extends pb_1.Message {
        constructor(data) {
            super();
            __RevokeSigningKeyRequest_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __RevokeSigningKeyRequest_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key_id" in data && data.key_id != undefined) {
                    this.key_id = data.key_id;
                }
            }
        }
        get key_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set key_id(value) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data) {
            const message = new _RevokeSigningKeyRequest({});
            if (data.key_id != null) {
                message.key_id = data.key_id;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.key_id != null) {
                data.key_id = this.key_id;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key_id.length)
                writer.writeString(1, this.key_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _RevokeSigningKeyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _RevokeSigningKeyRequest.deserialize(bytes);
        }
    }
    __RevokeSigningKeyRequest_one_of_decls = new WeakMap();
    control_client._RevokeSigningKeyRequest = _RevokeSigningKeyRequest;
    class _RevokeSigningKeyResponse extends pb_1.Message {
        constructor(data) {
            super();
            __RevokeSigningKeyResponse_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __RevokeSigningKeyResponse_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data) {
            const message = new _RevokeSigningKeyResponse({});
            return message;
        }
        toObject() {
            const data = {};
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _RevokeSigningKeyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _RevokeSigningKeyResponse.deserialize(bytes);
        }
    }
    __RevokeSigningKeyResponse_one_of_decls = new WeakMap();
    control_client._RevokeSigningKeyResponse = _RevokeSigningKeyResponse;
    class _SigningKey extends pb_1.Message {
        constructor(data) {
            super();
            __SigningKey_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __SigningKey_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key_id" in data && data.key_id != undefined) {
                    this.key_id = data.key_id;
                }
                if ("expires_at" in data && data.expires_at != undefined) {
                    this.expires_at = data.expires_at;
                }
            }
        }
        get key_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set key_id(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get expires_at() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0);
        }
        set expires_at(value) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data) {
            const message = new _SigningKey({});
            if (data.key_id != null) {
                message.key_id = data.key_id;
            }
            if (data.expires_at != null) {
                message.expires_at = data.expires_at;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.key_id != null) {
                data.key_id = this.key_id;
            }
            if (this.expires_at != null) {
                data.expires_at = this.expires_at;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key_id.length)
                writer.writeString(1, this.key_id);
            if (this.expires_at != 0)
                writer.writeUint64(2, this.expires_at);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _SigningKey();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key_id = reader.readString();
                        break;
                    case 2:
                        message.expires_at = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _SigningKey.deserialize(bytes);
        }
    }
    __SigningKey_one_of_decls = new WeakMap();
    control_client._SigningKey = _SigningKey;
    class _ListSigningKeysRequest extends pb_1.Message {
        constructor(data) {
            super();
            __ListSigningKeysRequest_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __ListSigningKeysRequest_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("next_token" in data && data.next_token != undefined) {
                    this.next_token = data.next_token;
                }
            }
        }
        get next_token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set next_token(value) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data) {
            const message = new _ListSigningKeysRequest({});
            if (data.next_token != null) {
                message.next_token = data.next_token;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.next_token != null) {
                data.next_token = this.next_token;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.next_token.length)
                writer.writeString(1, this.next_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _ListSigningKeysRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.next_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _ListSigningKeysRequest.deserialize(bytes);
        }
    }
    __ListSigningKeysRequest_one_of_decls = new WeakMap();
    control_client._ListSigningKeysRequest = _ListSigningKeysRequest;
    class _ListSigningKeysResponse extends pb_1.Message {
        constructor(data) {
            super();
            __ListSigningKeysResponse_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], __classPrivateFieldGet(this, __ListSigningKeysResponse_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signing_key" in data && data.signing_key != undefined) {
                    this.signing_key = data.signing_key;
                }
                if ("next_token" in data && data.next_token != undefined) {
                    this.next_token = data.next_token;
                }
            }
        }
        get signing_key() {
            return pb_1.Message.getRepeatedWrapperField(this, _SigningKey, 1);
        }
        set signing_key(value) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "");
        }
        set next_token(value) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data) {
            const message = new _ListSigningKeysResponse({});
            if (data.signing_key != null) {
                message.signing_key = data.signing_key.map(item => _SigningKey.fromObject(item));
            }
            if (data.next_token != null) {
                message.next_token = data.next_token;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.signing_key != null) {
                data.signing_key = this.signing_key.map((item) => item.toObject());
            }
            if (this.next_token != null) {
                data.next_token = this.next_token;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signing_key.length)
                writer.writeRepeatedMessage(1, this.signing_key, (item) => item.serialize(writer));
            if (this.next_token.length)
                writer.writeString(2, this.next_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _ListSigningKeysResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.signing_key, () => pb_1.Message.addToRepeatedWrapperField(message, 1, _SigningKey.deserialize(reader), _SigningKey));
                        break;
                    case 2:
                        message.next_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _ListSigningKeysResponse.deserialize(bytes);
        }
    }
    __ListSigningKeysResponse_one_of_decls = new WeakMap();
    control_client._ListSigningKeysResponse = _ListSigningKeysResponse;
    class _FlushCacheRequest extends pb_1.Message {
        constructor(data) {
            super();
            __FlushCacheRequest_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __FlushCacheRequest_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cache_name" in data && data.cache_name != undefined) {
                    this.cache_name = data.cache_name;
                }
            }
        }
        get cache_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set cache_name(value) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data) {
            const message = new _FlushCacheRequest({});
            if (data.cache_name != null) {
                message.cache_name = data.cache_name;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.cache_name != null) {
                data.cache_name = this.cache_name;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.cache_name.length)
                writer.writeString(1, this.cache_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _FlushCacheRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.cache_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _FlushCacheRequest.deserialize(bytes);
        }
    }
    __FlushCacheRequest_one_of_decls = new WeakMap();
    control_client._FlushCacheRequest = _FlushCacheRequest;
    class _FlushCacheResponse extends pb_1.Message {
        constructor(data) {
            super();
            __FlushCacheResponse_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __FlushCacheResponse_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data) {
            const message = new _FlushCacheResponse({});
            return message;
        }
        toObject() {
            const data = {};
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _FlushCacheResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _FlushCacheResponse.deserialize(bytes);
        }
    }
    __FlushCacheResponse_one_of_decls = new WeakMap();
    control_client._FlushCacheResponse = _FlushCacheResponse;
    class UnimplementedScsControlService {
    }
    UnimplementedScsControlService.definition = {
        CreateCache: {
            path: "/control_client.ScsControl/CreateCache",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes) => _CreateCacheRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes) => _CreateCacheResponse.deserialize(new Uint8Array(bytes))
        },
        DeleteCache: {
            path: "/control_client.ScsControl/DeleteCache",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes) => _DeleteCacheRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes) => _DeleteCacheResponse.deserialize(new Uint8Array(bytes))
        },
        ListCaches: {
            path: "/control_client.ScsControl/ListCaches",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes) => _ListCachesRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes) => _ListCachesResponse.deserialize(new Uint8Array(bytes))
        },
        FlushCache: {
            path: "/control_client.ScsControl/FlushCache",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes) => _FlushCacheRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes) => _FlushCacheResponse.deserialize(new Uint8Array(bytes))
        },
        CreateSigningKey: {
            path: "/control_client.ScsControl/CreateSigningKey",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes) => _CreateSigningKeyRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes) => _CreateSigningKeyResponse.deserialize(new Uint8Array(bytes))
        },
        RevokeSigningKey: {
            path: "/control_client.ScsControl/RevokeSigningKey",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes) => _RevokeSigningKeyRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes) => _RevokeSigningKeyResponse.deserialize(new Uint8Array(bytes))
        },
        ListSigningKeys: {
            path: "/control_client.ScsControl/ListSigningKeys",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes) => _ListSigningKeysRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes) => _ListSigningKeysResponse.deserialize(new Uint8Array(bytes))
        }
    };
    control_client.UnimplementedScsControlService = UnimplementedScsControlService;
    class ScsControlClient extends grpc_1.makeGenericClientConstructor(UnimplementedScsControlService.definition, "ScsControl", {}) {
        constructor(address, credentials, options) {
            super(address, credentials, options);
            this.CreateCache = (message, metadata, options, callback) => {
                return super.CreateCache(message, metadata, options, callback);
            };
            this.DeleteCache = (message, metadata, options, callback) => {
                return super.DeleteCache(message, metadata, options, callback);
            };
            this.ListCaches = (message, metadata, options, callback) => {
                return super.ListCaches(message, metadata, options, callback);
            };
            this.FlushCache = (message, metadata, options, callback) => {
                return super.FlushCache(message, metadata, options, callback);
            };
            this.CreateSigningKey = (message, metadata, options, callback) => {
                return super.CreateSigningKey(message, metadata, options, callback);
            };
            this.RevokeSigningKey = (message, metadata, options, callback) => {
                return super.RevokeSigningKey(message, metadata, options, callback);
            };
            this.ListSigningKeys = (message, metadata, options, callback) => {
                return super.ListSigningKeys(message, metadata, options, callback);
            };
        }
    }
    control_client.ScsControlClient = ScsControlClient;
})(control_client = exports.control_client || (exports.control_client = {}));
