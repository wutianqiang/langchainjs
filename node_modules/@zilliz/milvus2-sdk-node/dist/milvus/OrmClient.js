"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrmClient = void 0;
const _1 = require("./");
const orm_1 = require("./orm");
/**
 * ORM client that extends Milvus client
 */
class OrmClient extends _1.MilvusClient {
    // ORM-like APIs
    /**
     * Creates a new collection with the given name and schema, or returns an existing one with the same name.
     * @param data An object containing the collection name, dimension, schema (optional), enable_dynamic_field (optional), and description (optional).
     * @returns A Collection object representing the newly created or existing collection, and it is indexed and loaded
     */
    collection(data) {
        return __awaiter(this, void 0, void 0, function* () {
            // get params
            const { collection_name, dimension, primary_field_name = 'id', id_type = _1.DataType.Int64, vector_field_name = 'vector', enableDynamicField = true, loadOnInit = true, } = data;
            // check exist
            const exist = yield this.hasCollection({ collection_name });
            // build schema
            const schema = (0, orm_1.buildSchema)({
                primary_field_name,
                id_type,
                vector_field_name,
                dimension,
            });
            // not exist, create a new one
            if (!exist.value) {
                // create a new collection with fixed schema
                yield this.createCollection({
                    collection_name,
                    enable_dynamic_field: enableDynamicField,
                    fields: schema,
                });
            }
            // return collection object
            const col = new orm_1.Collection({
                name: collection_name,
                client: this,
            });
            try {
                // init
                yield col.init(loadOnInit);
            }
            catch (error) {
                console.log('creation error ', error);
            }
            return col;
        });
    }
    /**
     * Retrieves a list of collections from the Milvus server.
     * @param data An optional object containing parameters for filtering the list of collections.
     * @returns An array of Collection objects representing the collections returned by the server.
     */
    collections(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const cols = yield this.showCollections(data);
            return cols.data.map(col => {
                return new orm_1.Collection({ name: col.name, client: this });
            });
        });
    }
}
exports.OrmClient = OrmClient;
//# sourceMappingURL=OrmClient.js.map