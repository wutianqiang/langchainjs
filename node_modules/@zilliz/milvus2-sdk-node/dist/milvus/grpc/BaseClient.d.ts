import { Root, Type } from 'protobufjs';
import { Client, ChannelOptions } from '@grpc/grpc-js';
import { ClientConfig, ServerInfo } from '../';
/**
 * Base gRPC client, setup all configuration here
 */
export declare class BaseClient {
    protected metadata: Map<string, string>;
    protected protoPath: string;
    protected schemaProto: Root;
    protected milvusProto: Root;
    protected collectionSchemaType: Type;
    protected fieldSchemaType: Type;
    protected protoInternalPath: {
        serviceName: string;
        collectionSchema: string;
        fieldSchema: string;
    };
    config: ClientConfig;
    channelOptions: ChannelOptions;
    client: Client | undefined;
    serverInfo: ServerInfo;
    timeout: number;
    /**
     * Sets up the configuration object for the gRPC client.
     *
     * @param configOrAddress The configuration object or the Milvus address as a string.
     * @param ssl Whether to use SSL or not. Default is false.
     * @param username The username for authentication. Required if password is provided.
     * @param password The password for authentication. Required if username is provided.
     */
    constructor(configOrAddress: ClientConfig | string, ssl?: boolean, username?: string, password?: string, channelOptions?: ChannelOptions);
}
