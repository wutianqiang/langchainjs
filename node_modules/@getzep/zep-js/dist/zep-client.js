"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZepClient = void 0;
const axios_1 = __importStar(require("axios"));
const models_1 = require("./models");
const exceptions_1 = require("./exceptions");
const API_BASEURL = "/api/v1";
/**
 * ZepClient is a Typescript class for interacting with the Zep.
 */
// eslint-disable-next-line import/prefer-default-export
class ZepClient {
    constructor(baseURL, axiosInstance) {
        this.baseURL = baseURL;
        this.axiosInstance = axiosInstance || axios_1.default.create();
    }
    /**
     * Initializes the ZepClient instance by checking if the server is running.
     * @returns {Promise<boolean>} - A promise that returns true if the server
     *                              is running, false otherwise.
     * @throws {Error} - Throws an error if the server is not running.
     */
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const healthCheck = "/healthz";
                const healthCheckURL = `${this.baseURL}${healthCheck}`;
                const response = yield this.axiosInstance.get(healthCheckURL);
                return response.status === 200;
            }
            catch (error) {
                if (error instanceof axios_1.AxiosError && error.code === "ECONNREFUSED") {
                    // The server is not accepting connections.
                    return false;
                }
                throw error; // Rethrow other errors.
            }
        });
    }
    /**
     * Retrieves memory for a specific session.
     * @param {string} sessionID - The ID of the session to retrieve memory for.
     * @param {number} [lastn] - Optional. The number of most recent memories to retrieve.
     * @returns {Promise<Array<Memory>>} - A promise that returns a Memory object.
     */
    getMemory(sessionID, lastn) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${this.baseURL}${API_BASEURL}/sessions/${sessionID}/memory`;
            const params = lastn !== undefined ? { lastn } : {};
            try {
                const response = yield this.axiosInstance.get(url, {
                    params,
                });
                switch (response.status) {
                    case 200:
                        // Handle success case
                        if (response.data.messages) {
                            return new models_1.Memory({
                                messages: response.data.messages.map((message) => {
                                    return new models_1.Message(message);
                                }),
                                summary: response.data.summary,
                            });
                        }
                        return null; // Session found, but no messages found in the session
                    case 404:
                        // Handle Session not found case
                        throw new exceptions_1.NotFoundError(`Session with ID ${sessionID} not found`);
                    default:
                        throw new exceptions_1.UnexpectedResponseError(`Unexpected Status Code @getMemoryAsync: ${response.status}`);
                }
            }
            catch (error) {
                // Connection error
                if (error instanceof axios_1.AxiosError && error.code === "ECONNREFUSED") {
                    throw new exceptions_1.UnexpectedResponseError(`Server is down or connection was refused, from Zep at ${this.baseURL}`);
                }
                if (error instanceof axios_1.AxiosError && error.response) {
                    // Handle AxiosError case
                    if (error.response.status === 404) {
                        throw new exceptions_1.NotFoundError(`Session with ID ${sessionID} not found`);
                    }
                    throw new exceptions_1.UnexpectedResponseError(`getMemoryAsync got an Unexpected status code: ${error.response.status}`);
                }
                throw error;
            }
        });
    }
    /**
     * Adds a new memory to a specific session.
     * @param {string} sessionID - The ID of the session to add the memory to.
     * @param {Memory} memory - The memory object to add to the session.
     * @returns {Promise<Memory>} A promise that resolves to the added memory.
     */
    addMemory(sessionID, memory) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${this.baseURL}${API_BASEURL}/sessions/${sessionID}/memory`;
            try {
                const response = yield this.axiosInstance.post(url, memory.toDict());
                if (response.status !== 200) {
                    throw new exceptions_1.UnexpectedResponseError(`addMemoryAsync got an Unexpected status code: ${response.status}`);
                }
                return response.data;
            }
            catch (error) {
                // Connection error
                if (error instanceof axios_1.AxiosError && error.code === "ECONNREFUSED") {
                    throw new exceptions_1.UnexpectedResponseError(`Server is down or connection was refused, from Zep at ${this.baseURL}`);
                }
                if (error instanceof axios_1.AxiosError && error.response) {
                    throw new exceptions_1.UnexpectedResponseError(`addMemoryAsync got an Unexpected status code: ${error.response.status}`);
                }
                throw error;
            }
        });
    }
    /**
     * Deletes the memory of a specific session.
     * @param {string} sessionID - The ID of the session for which the memory
     *                             should be deleted.
     * @returns {Promise<string>} - Promise message indicating the memory has
     *                              been deleted.
     */
    deleteMemory(sessionID) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${this.baseURL}${API_BASEURL}/sessions/${sessionID}/memory`;
            try {
                const response = yield this.axiosInstance.delete(url);
                switch (response.status) {
                    case 404:
                        throw new exceptions_1.NotFoundError(`No session found for sessionID: 
                     ${sessionID}`);
                    case 200:
                        return response.data;
                    default:
                        throw new exceptions_1.UnexpectedResponseError(`deleteMemoryAsync got an Unexpected status code: ${response.status}`);
                }
            }
            catch (error) {
                // Connection error
                if (error instanceof axios_1.AxiosError && error.code === "ECONNREFUSED") {
                    throw new exceptions_1.UnexpectedResponseError(`Server is down or connection was refused, from Zep at ${this.baseURL}`);
                }
                if (error instanceof axios_1.AxiosError && error.response) {
                    // Handle AxiosError case
                    if (error.response.status === 404) {
                        throw new exceptions_1.NotFoundError(`Session with ID ${sessionID} not found`);
                    }
                    else {
                        throw new exceptions_1.UnexpectedResponseError(`deleteMemoryAsync got an Unexpected status code: ${error.response.status}`);
                    }
                }
                throw error;
            }
        });
    }
    /**
     * Searches memory of a specific session based on search payload provided.
     * @param {string} sessionID - ID of the session for which the memory should be searched.
     * @param {SearchPayload} searchPayload - The search payload containing the search criteria.
     * @param {number} [limit] - Optional limit on the number of search results returned.
     * @returns {Promise<Array<SearchResult>>} - Promise that resolves to array of search results.
     */
    searchMemory(sessionID, searchPayload, limit) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${this.baseURL}${API_BASEURL}/sessions/${sessionID}/search`;
            const params = limit !== undefined ? { limit } : {};
            try {
                const response = yield this.axiosInstance.post(url, searchPayload, {
                    params,
                });
                switch (response.status) {
                    case 200:
                        return response.data.map((searchResult) => new models_1.SearchResult(searchResult));
                    case 404:
                        throw new exceptions_1.NotFoundError(`No session found for sessionID: 
               sessionID`);
                    default:
                        throw new exceptions_1.UnexpectedResponseError(`searchMemoryAsync got an Unexpected status code: ${response.status}`);
                }
            }
            catch (error) {
                // Connection error
                if (error instanceof axios_1.AxiosError && error.code === "ECONNREFUSED") {
                    throw new exceptions_1.UnexpectedResponseError(`Server is down or connection was refused, from Zep at ${this.baseURL}`);
                }
                if (error instanceof axios_1.AxiosError && error.response) {
                    // Handle AxiosError case
                    if (error.response.status === 404) {
                        throw new exceptions_1.NotFoundError(`Session with ID ${sessionID} not found`);
                    }
                    else {
                        throw new exceptions_1.UnexpectedResponseError(`searchMemoryAsync got an Unexpected status code: ${error.response.status}`);
                    }
                }
                throw error;
            }
        });
    }
}
exports.ZepClient = ZepClient;
