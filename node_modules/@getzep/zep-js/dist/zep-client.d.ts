import { Memory, SearchPayload, SearchResult } from "./models";
/**
 * ZepClient is a Typescript class for interacting with the Zep.
 */
export declare class ZepClient {
    baseURL: string;
    /**
     * Constructs a new ZepClient instance.
     * @param {string} baseURL - The base URL of the Zep API.
     */
    axiosInstance: any;
    constructor(baseURL: string, axiosInstance?: any);
    /**
     * Initializes the ZepClient instance by checking if the server is running.
     * @returns {Promise<boolean>} - A promise that returns true if the server
     *                              is running, false otherwise.
     * @throws {Error} - Throws an error if the server is not running.
     */
    init(): Promise<boolean>;
    /**
     * Retrieves memory for a specific session.
     * @param {string} sessionID - The ID of the session to retrieve memory for.
     * @param {number} [lastn] - Optional. The number of most recent memories to retrieve.
     * @returns {Promise<Array<Memory>>} - A promise that returns a Memory object.
     */
    getMemory(sessionID: string, lastn?: number): Promise<Memory | null>;
    /**
     * Adds a new memory to a specific session.
     * @param {string} sessionID - The ID of the session to add the memory to.
     * @param {Memory} memory - The memory object to add to the session.
     * @returns {Promise<Memory>} A promise that resolves to the added memory.
     */
    addMemory(sessionID: string, memory: Memory): Promise<string>;
    /**
     * Deletes the memory of a specific session.
     * @param {string} sessionID - The ID of the session for which the memory
     *                             should be deleted.
     * @returns {Promise<string>} - Promise message indicating the memory has
     *                              been deleted.
     */
    deleteMemory(sessionID: string): Promise<string>;
    /**
     * Searches memory of a specific session based on search payload provided.
     * @param {string} sessionID - ID of the session for which the memory should be searched.
     * @param {SearchPayload} searchPayload - The search payload containing the search criteria.
     * @param {number} [limit] - Optional limit on the number of search results returned.
     * @returns {Promise<Array<SearchResult>>} - Promise that resolves to array of search results.
     */
    searchMemory(sessionID: string, searchPayload: SearchPayload, limit?: number): Promise<Array<SearchResult>>;
}
