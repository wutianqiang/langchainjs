/**
 * MessageData interface for providing input to create a Message instance.
 */
export interface MessageData {
    uuid?: string;
    created_at?: string;
    role: string;
    content: string;
    token_count?: number;
    metadata?: Record<string, any>;
}
/**
 * Represents a message in the memory.
 */
export declare class Message {
    uuid?: string;
    created_at?: string;
    role: string;
    content: string;
    token_count?: number;
    metadata?: Record<string, any>;
    /**
     * Constructs a new Message instance.
     * @param {MessageData} data - The data to create a message instance.
     */
    constructor(data: MessageData);
    /**
     * Converts the Message instance to a dictionary.
     * @returns {MessageData} A dictionary representation of Message instance.
     */
    toDict(): MessageData;
}
/**
 * SummaryData interface for providing input to create a Summary instance.
 */
export interface SummaryData {
    uuid: string;
    created_at: string;
    content: string;
    recent_message_uuid: string;
    token_count: number;
}
/**
 * Represents a summary of a memory.
 */
export declare class Summary {
    uuid: string;
    created_at: string;
    content: string;
    recent_message_uuid: string;
    token_count: number;
    /**
     * Constructs a new Summary instance.
     * @param {SummaryData} data - The data to create a summary instance.
     */
    constructor(data: SummaryData);
    /**
     * Converts the Summary instance to a dictionary.
     * @returns {SummaryData} A dictionary representation of Summary instance.
     */
    toDict(): SummaryData;
}
/**
 * MemoryData interface for providing input to create a Memory instance.
 */
export interface MemoryData {
    messages?: MessageData[];
    metadata?: Record<string, any>;
    summary?: SummaryData;
    uuid?: string;
    created_at?: string;
    token_count?: number;
}
/**
 * Represents a memory containing messages, metadata, and a summary.
 */
export declare class Memory {
    messages: Message[];
    metadata: Record<string, any>;
    summary?: Summary;
    uuid?: string;
    created_at?: string;
    token_count?: number;
    /**
     * Constructs a new Memory instance.
     * @param {MemoryData} data - The data to create a memory instance.
     */
    constructor(data?: MemoryData);
    /**
     * Converts the Memory instance to a dictionary.
     * @returns {MemoryData} A dictionary representation of the Memory instance.
     */
    toDict(): MemoryData;
}
/**
 * SearchPayloadData interface for providing input to create SearchPayload.
 */
export interface SearchPayloadData {
    meta: Record<string, any>;
    text: string;
}
/**
 * Represents the payload for a memory search.
 */
export declare class SearchPayload {
    meta: Record<string, any>;
    text: string;
    /**
     * Constructs a new SearchPayload instance.
     * @param {SearchPayloadData} data - The data to create a Search Payload.
     */
    constructor(data: SearchPayloadData);
}
/**
 * SearchResultData interface for providing input to create a SearchResult.
 */
export interface SearchResultData {
    message?: MessageData;
    meta?: Record<string, any>;
    score?: number;
    summary?: string;
    dist?: number;
}
/**
 * Represents a search result from a memory search.
 */
export declare class SearchResult {
    message?: Message;
    meta: Record<string, any>;
    score?: number;
    summary?: string;
    dist?: number;
    /**
     * Constructs a new SearchResult instance.
     * @param {SearchResultData} data - The data to create a search result instance.
     */
    constructor(data?: SearchResultData);
}
/**
 * Represents an error received from the API.
 */
export declare class APIError {
    code: number;
    message: string;
    /**
     * Constructs a new APIError instance.
     * @param {number} code - The error code.
     * @param {string} message - The error message.
     */
    constructor(code: number, message: string);
}
