"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogWriter = exports.DefaultLogger = void 0;
class DefaultLogger {
    debug({ module, message, args }) {
        console.debug(formatMessage({ module, message }), args);
    }
    info({ module, message, args }) {
        console.info(formatMessage({ module, message }), args);
    }
    warn({ module, message, args }) {
        console.warn(formatMessage({ module, message }), args);
    }
    error({ module, message, args, err }) {
        console.error(formatMessage({ module, message }), args, err);
    }
}
exports.DefaultLogger = DefaultLogger;
class LogWriter {
    constructor(logger) {
        Object.defineProperty(this, "logger", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: logger
        });
        Object.defineProperty(this, "logLevel", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.logLevel = this.getClickHouseLogLevel();
        this.info({
            module: 'Logger',
            message: `Log level is set to ${ClickHouseLogLevel[this.logLevel]}`,
        });
    }
    debug(params) {
        if (this.logLevel <= ClickHouseLogLevel.DEBUG) {
            this.logger.debug(params);
        }
    }
    info(params) {
        if (this.logLevel <= ClickHouseLogLevel.INFO) {
            this.logger.info(params);
        }
    }
    warn(params) {
        if (this.logLevel <= ClickHouseLogLevel.WARN) {
            this.logger.warn(params);
        }
    }
    error(params) {
        if (this.logLevel <= ClickHouseLogLevel.ERROR) {
            this.logger.error(params);
        }
    }
    getClickHouseLogLevel() {
        const logLevelFromEnv = process.env['CLICKHOUSE_LOG_LEVEL'];
        if (!logLevelFromEnv) {
            return ClickHouseLogLevel.OFF;
        }
        const logLevel = logLevelFromEnv.toLocaleLowerCase();
        if (logLevel === 'info') {
            return ClickHouseLogLevel.INFO;
        }
        if (logLevel === 'warn') {
            return ClickHouseLogLevel.WARN;
        }
        if (logLevel === 'error') {
            return ClickHouseLogLevel.ERROR;
        }
        if (logLevel === 'debug') {
            return ClickHouseLogLevel.DEBUG;
        }
        if (logLevel === 'trace') {
            return ClickHouseLogLevel.TRACE;
        }
        if (logLevel === 'off') {
            return ClickHouseLogLevel.OFF;
        }
        console.error(`Unknown CLICKHOUSE_LOG_LEVEL value: ${logLevelFromEnv}, logs are disabled`);
        return ClickHouseLogLevel.OFF;
    }
}
exports.LogWriter = LogWriter;
var ClickHouseLogLevel;
(function (ClickHouseLogLevel) {
    ClickHouseLogLevel[ClickHouseLogLevel["TRACE"] = 0] = "TRACE";
    ClickHouseLogLevel[ClickHouseLogLevel["DEBUG"] = 1] = "DEBUG";
    ClickHouseLogLevel[ClickHouseLogLevel["INFO"] = 2] = "INFO";
    ClickHouseLogLevel[ClickHouseLogLevel["WARN"] = 3] = "WARN";
    ClickHouseLogLevel[ClickHouseLogLevel["ERROR"] = 4] = "ERROR";
    ClickHouseLogLevel[ClickHouseLogLevel["OFF"] = 127] = "OFF";
})(ClickHouseLogLevel || (ClickHouseLogLevel = {}));
function formatMessage({ module, message, }) {
    return `[@clickhouse/client][${module}] ${message}`;
}
//# sourceMappingURL=logger.js.map