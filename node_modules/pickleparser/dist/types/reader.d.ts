type Encoding = 'ascii' | 'utf-8';
export interface IReader {
    byte(): number;
    bytes(length: number): Uint8Array | Int8Array | Uint8ClampedArray;
    uint16(): number;
    int32(): number;
    uint32(): number;
    uint64(): number;
    float32(): number;
    float64(): number;
    skip(offset: number): void;
    string(size: number, encoding: Encoding): string;
    line(): string;
    hasNext(): boolean;
}
export declare class BufferReader implements IReader {
    private readonly _buffer;
    private readonly _dataView;
    private readonly _utf8Decoder;
    private readonly _asciiDecoder;
    private _position;
    constructor(buffer: Uint8Array | Int8Array | Uint8ClampedArray);
    get length(): number;
    get position(): number;
    byte(): number;
    bytes(length: number): Uint8Array | Int8Array | Uint8ClampedArray;
    uint16(): number;
    int32(): number;
    uint32(): number;
    uint64(): number;
    float32(): number;
    float64(): number;
    skip(offset: number): void;
    string(size: number, encoding: Encoding): string;
    line(): string;
    hasNext(): boolean;
}
export declare function readUint64(data: Uint8Array | Int8Array | Uint8ClampedArray): number;
export declare function readUint64WithBigInt(data: Uint8Array | Int8Array | Uint8ClampedArray): bigint;
export {};
