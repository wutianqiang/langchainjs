import { FacetCount as ProtoFacetCount, FacetStats as ProtoFacetStats, Page as ProtoSearchPage, SearchFacet as ProtoSearchFacet, SearchHit as ProtoSearchHit, SearchHitMeta as ProtoSearchHitMeta, SearchMetadata as ProtoSearchMetadata, SearchResponse as ProtoSearchResponse, Match as ProtoMatch } from "../proto/server/v1/api_pb";
import { SearchIndexResponse as ProtoSearchIndexResponse } from "../proto/server/v1/search_pb";
import { TigrisClientConfig } from "../tigris";
import { TigrisCollectionType } from "../types";
export declare type Facets = {
    [key: string]: FacetCountDistribution;
};
export declare type GroupedHits<T> = {
    groupKeys: string[];
    hits: Array<IndexedDoc<T>>;
};
/**
 * Outcome of executing search query
 * @typeParam T - type of Tigris collection
 */
export declare class SearchResult<T> {
    /**
     * Array of matched documents
     * @readonly
     */
    readonly hits: ReadonlyArray<IndexedDoc<T>>;
    /**
     * Distribution of facets for fields included in facet query
     * @readonly
     */
    readonly facets: Facets;
    /**
     * Metadata associated with {@link SearchResult}
     * @readonly
     * @defaultValue undefined
     */
    readonly meta: SearchMeta;
    /**
     * Array of matched documents when group_by is used in the search request.
     * @readonly
     * @defaultValue []
     */
    readonly groupedHits: GroupedHits<T>[];
    constructor(hits: Array<IndexedDoc<T>>, facets: Facets, meta: SearchMeta, groupedHits: GroupedHits<T>[]);
    static get empty(): SearchResult<never>;
    static from<T>(resp: ProtoSearchResponse | ProtoSearchIndexResponse, config: TigrisClientConfig): SearchResult<T>;
}
/**
 * Matched document and relevance metadata for a search query
 * @typeParam T - type of Tigris collection
 */
export declare class IndexedDoc<T extends TigrisCollectionType> {
    /**
     * Deserialized collection/search index document
     * @readonly
     */
    readonly document: T;
    /**
     * Relevance metadata for the matched document
     * @readonly
     */
    readonly meta: DocMeta;
    constructor(document: T, meta: DocMeta);
    static from<T>(resp: ProtoSearchHit, config: TigrisClientConfig): IndexedDoc<T>;
}
/**
 * Relevance metadata for a matched document
 */
export declare class DocMeta {
    /**
     * Time at which document was inserted/replaced to a precision of milliseconds
     * @readonly
     */
    readonly createdAt: Date;
    /**
     * Time at which document was updated to a precision of milliseconds
     * @readonly
     */
    readonly updatedAt: Date;
    /**
     * Metadata for matched fields and relevant score
     * @readonly
     */
    readonly textMatch: TextMatchInfo;
    constructor(createdAt: Date, updatedAt: Date, textMatch: TextMatchInfo);
    static from(resp: ProtoSearchHitMeta): DocMeta;
}
/**
 * Information about the matched document
 */
export declare class TextMatchInfo {
    readonly fields: ReadonlyArray<string>;
    readonly score: string;
    readonly vectorDistance?: number;
    constructor(fields: ReadonlyArray<string>, score: string, vectorDistance?: number);
    static from(resp: ProtoMatch): TextMatchInfo;
}
/**
 * Distribution of values in a faceted field
 */
declare class FacetCountDistribution {
    /**
     * List of field values and their aggregated counts
     * @readonly
     */
    readonly counts: ReadonlyArray<FacetCount>;
    /**
     * Summary of faceted field
     * @readonly
     */
    readonly stats: FacetStats;
    constructor(counts: ReadonlyArray<FacetCount>, stats: FacetStats);
    static from(resp: ProtoSearchFacet): FacetCountDistribution;
}
/**
 * Aggregate count of values in a faceted field
 */
export declare class FacetCount {
    /**
     * Field's attribute value
     * @readonly
     */
    readonly value: string;
    /**
     * Count of field values in the search results
     * @readonly
     */
    readonly count: number;
    constructor(value: string, count: number);
    static from(resp: ProtoFacetCount): FacetCount;
}
/**
 * Summary of field values in a faceted field
 */
export declare class FacetStats {
    /**
     * Only for numeric fields. Average of values in a numeric field
     *
     * @defaultValue `0`
     * @readonly
     */
    readonly avg: number;
    /**
     * Count of values in a faceted field
     * @readonly
     */
    readonly count: number;
    /**
     * Only for numeric fields. Maximum value in a numeric field.
     *
     * @defaultValue `0`
     * @readonly
     */
    readonly max: number;
    /**
     * Only for numeric fields. Minimum value in a numeric field.
     *
     * @defaultValue `0`
     * @readonly
     */
    readonly min: number;
    /**
     * Only for numeric fields. Sum of numeric values in the field.
     *
     * @defaultValue `0`
     * @readonly
     */
    readonly sum: number;
    constructor(avg: number, count: number, max: number, min: number, sum: number);
    static from(resp: ProtoFacetStats): FacetStats;
}
/**
 * Metadata associated with search results
 */
export declare class SearchMeta {
    /**
     * Total number of matched hits for search query
     * @readonly
     */
    readonly found: number;
    /**
     * Total number of pages of search results
     * @readonly
     */
    readonly totalPages: number;
    /**
     * Current page information
     * @readonly
     */
    readonly page: Page;
    /**
     * List of document fields matching the given input
     * @readonly
     */
    readonly matchedFields: ReadonlyArray<string>;
    constructor(found: number, totalPages: number, page: Page, matchedFields: Array<string>);
    static from(resp: ProtoSearchMetadata): SearchMeta;
    /**
     * @returns default metadata to construct empty/default response
     * @readonly
     */
    static get default(): SearchMeta;
}
/**
 * Pagination metadata associated with search results
 */
export declare class Page {
    /**
     * Current page number for the paginated search results
     * @readonly
     */
    readonly current: any;
    /**
     * Maximum number of search results included per page
     * @readonly
     */
    readonly size: any;
    constructor(current: any, size: any);
    static from(resp: ProtoSearchPage): Page;
    /**
     * @returns the pre-defined page number and size to construct a default response
     * @readonly
     */
    static get default(): Page;
}
export {};
