"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Page = exports.SearchMeta = exports.FacetStats = exports.FacetCount = exports.TextMatchInfo = exports.DocMeta = exports.IndexedDoc = exports.SearchResult = void 0;
const utility_1 = require("../utility");
/**
 * Outcome of executing search query
 * @typeParam T - type of Tigris collection
 */
class SearchResult {
    constructor(hits, facets, meta, groupedHits) {
        this.hits = hits;
        this.facets = facets;
        this.meta = meta;
        this.groupedHits = groupedHits;
    }
    static get empty() {
        return new SearchResult([], {}, SearchMeta.default, []);
    }
    static from(resp, config) {
        const _meta = typeof (resp === null || resp === void 0 ? void 0 : resp.getMeta()) !== "undefined" ? SearchMeta.from(resp.getMeta()) : SearchMeta.default;
        const _hits = resp
            .getHitsList()
            .map((h) => IndexedDoc.from(h, config));
        const _facets = {};
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        for (const [k, _] of resp.getFacetsMap().toArray()) {
            _facets[k] = FacetCountDistribution.from(resp.getFacetsMap().get(k));
        }
        const _groupedHits = resp.getGroupList().map((g) => {
            return {
                groupKeys: g.getGroupKeysList(),
                hits: g.getHitsList().map((h) => IndexedDoc.from(h, config)),
            };
        });
        return new SearchResult(_hits, _facets, _meta, _groupedHits);
    }
}
exports.SearchResult = SearchResult;
/**
 * Matched document and relevance metadata for a search query
 * @typeParam T - type of Tigris collection
 */
class IndexedDoc {
    constructor(document, meta) {
        this.document = document;
        this.meta = meta;
    }
    static from(resp, config) {
        const docAsB64 = resp.getData_asB64();
        if (!docAsB64) {
            return new IndexedDoc(undefined, undefined);
        }
        const document = utility_1.Utility.jsonStringToObj(utility_1.Utility._base64Decode(docAsB64), config);
        const meta = resp.hasMetadata() ? DocMeta.from(resp.getMetadata()) : undefined;
        return new IndexedDoc(document, meta);
    }
}
exports.IndexedDoc = IndexedDoc;
/**
 * Relevance metadata for a matched document
 */
class DocMeta {
    constructor(createdAt, updatedAt, textMatch) {
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.textMatch = textMatch;
    }
    static from(resp) {
        var _a, _b;
        const _createdAt = typeof ((_a = resp === null || resp === void 0 ? void 0 : resp.getCreatedAt()) === null || _a === void 0 ? void 0 : _a.getSeconds()) !== "undefined"
            ? new Date(resp.getCreatedAt().getSeconds() * 1000)
            : undefined;
        const _updatedAt = typeof ((_b = resp === null || resp === void 0 ? void 0 : resp.getUpdatedAt()) === null || _b === void 0 ? void 0 : _b.getSeconds()) !== "undefined"
            ? new Date(resp.getUpdatedAt().getSeconds() * 1000)
            : undefined;
        const _textMatch = typeof (resp === null || resp === void 0 ? void 0 : resp.getMatch()) !== "undefined" ? TextMatchInfo.from(resp.getMatch()) : undefined;
        return new DocMeta(_createdAt, _updatedAt, _textMatch);
    }
}
exports.DocMeta = DocMeta;
/**
 * Information about the matched document
 */
class TextMatchInfo {
    constructor(fields, score, vectorDistance) {
        this.fields = fields;
        this.score = score;
        if (vectorDistance) {
            this.vectorDistance = vectorDistance;
        }
    }
    static from(resp) {
        const matchFields = resp.getFieldsList().map((f) => f.getName());
        return new TextMatchInfo(matchFields, resp.getScore(), resp.getVectorDistance());
    }
}
exports.TextMatchInfo = TextMatchInfo;
/**
 * Distribution of values in a faceted field
 */
class FacetCountDistribution {
    constructor(counts, stats) {
        this.counts = counts;
        this.stats = stats;
    }
    static from(resp) {
        const stats = typeof (resp === null || resp === void 0 ? void 0 : resp.getStats()) !== "undefined" ? FacetStats.from(resp.getStats()) : undefined;
        const counts = resp.getCountsList().map((c) => FacetCount.from(c));
        return new FacetCountDistribution(counts, stats);
    }
}
/**
 * Aggregate count of values in a faceted field
 */
class FacetCount {
    constructor(value, count) {
        this.value = value;
        this.count = count;
    }
    static from(resp) {
        return new FacetCount(resp.getValue(), resp.getCount());
    }
}
exports.FacetCount = FacetCount;
/**
 * Summary of field values in a faceted field
 */
class FacetStats {
    constructor(avg, count, max, min, sum) {
        this.avg = avg;
        this.count = count;
        this.max = max;
        this.min = min;
        this.sum = sum;
    }
    static from(resp) {
        var _a, _b, _c, _d, _e;
        return new FacetStats((_a = resp === null || resp === void 0 ? void 0 : resp.getAvg()) !== null && _a !== void 0 ? _a : 0, (_b = resp === null || resp === void 0 ? void 0 : resp.getCount()) !== null && _b !== void 0 ? _b : 0, (_c = resp === null || resp === void 0 ? void 0 : resp.getMax()) !== null && _c !== void 0 ? _c : 0, (_d = resp === null || resp === void 0 ? void 0 : resp.getMin()) !== null && _d !== void 0 ? _d : 0, (_e = resp === null || resp === void 0 ? void 0 : resp.getSum()) !== null && _e !== void 0 ? _e : 0);
    }
}
exports.FacetStats = FacetStats;
/**
 * Metadata associated with search results
 */
class SearchMeta {
    constructor(found, totalPages, page, matchedFields) {
        this.found = found;
        this.totalPages = totalPages;
        this.page = page;
        this.matchedFields = matchedFields;
    }
    static from(resp) {
        var _a, _b;
        const found = (_a = resp === null || resp === void 0 ? void 0 : resp.getFound()) !== null && _a !== void 0 ? _a : 0;
        const totalPages = (_b = resp === null || resp === void 0 ? void 0 : resp.getTotalPages()) !== null && _b !== void 0 ? _b : 0;
        const page = typeof (resp === null || resp === void 0 ? void 0 : resp.getPage()) !== "undefined" ? Page.from(resp.getPage()) : undefined;
        return new SearchMeta(found, totalPages, page, resp.getMatchedFieldsList());
    }
    /**
     * @returns default metadata to construct empty/default response
     * @readonly
     */
    static get default() {
        return new SearchMeta(0, 1, Page.default, []);
    }
}
exports.SearchMeta = SearchMeta;
/**
 * Pagination metadata associated with search results
 */
class Page {
    constructor(current, size) {
        this.current = current;
        this.size = size;
    }
    static from(resp) {
        var _a, _b;
        const current = (_a = resp === null || resp === void 0 ? void 0 : resp.getCurrent()) !== null && _a !== void 0 ? _a : 0;
        const size = (_b = resp === null || resp === void 0 ? void 0 : resp.getSize()) !== null && _b !== void 0 ? _b : 0;
        return new Page(current, size);
    }
    /**
     * @returns the pre-defined page number and size to construct a default response
     * @readonly
     */
    static get default() {
        return new Page(1, 20);
    }
}
exports.Page = Page;
