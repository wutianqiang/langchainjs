import { TigrisArrayItem, TigrisDataTypes, TigrisResponse } from "../types";
import { DeleteIndexResponse as ProtoDeleteIndexResponse, DocStatus as ProtoDocStatus, IndexInfo as ProtoIndexInfo } from "../proto/server/v1/search_pb";
import { Status } from "../constants";
import { TigrisError } from "../error";
export declare type SearchFieldOptions = {
    searchIndex?: boolean;
    sort?: boolean;
    facet?: boolean;
    dimensions?: number;
    id?: boolean;
};
export interface TigrisIndexType {
}
export declare type TigrisIndexSchema<T extends TigrisIndexType> = {
    [K in keyof T]: {
        type: TigrisDataTypes | TigrisIndexSchema<unknown>;
        items?: TigrisArrayItem;
    } & SearchFieldOptions;
};
export declare class IndexInfo {
    private readonly _name;
    private readonly _schema;
    constructor(name: any, schema: any);
    static from(info: ProtoIndexInfo): IndexInfo;
    get name(): string;
    get schema(): object;
}
export declare class DeleteIndexResponse implements TigrisResponse {
    status: Status;
    private readonly _message;
    constructor(message: string);
    get message(): string;
    static from(resp: ProtoDeleteIndexResponse): DeleteIndexResponse;
}
export declare class DocStatus {
    readonly id: string;
    readonly error?: TigrisError;
    constructor(id: string, error: TigrisError);
    static from(protoStatus: ProtoDocStatus): DocStatus;
}
