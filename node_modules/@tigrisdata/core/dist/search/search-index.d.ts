import { DocStatus, TigrisIndexType } from "./types";
import { Filter } from "../types";
import { SearchIterator } from "../consumables/search-iterator";
import { SearchQuery } from "./query";
import { IndexedDoc, SearchResult } from "./result";
export declare class SearchIndex<T extends TigrisIndexType> {
    private readonly grpcClient;
    private readonly name;
    private readonly config;
    constructor(client: any, name: any, config: any);
    createMany(docs: Array<T>): Promise<Array<DocStatus>>;
    createOne(doc: T): Promise<DocStatus>;
    deleteMany(ids: Array<string>): Promise<Array<DocStatus>>;
    deleteByQuery(filter: Filter<T>): Promise<number>;
    deleteOne(id: string): Promise<DocStatus>;
    createOrReplaceMany(docs: Array<T>): Promise<Array<DocStatus>>;
    createOrReplaceOne(doc: T): Promise<DocStatus>;
    getMany(ids: Array<string>): Promise<Array<IndexedDoc<T>>>;
    getOne(id: string): Promise<IndexedDoc<T>>;
    updateMany(docs: Array<T>): Promise<Array<DocStatus>>;
    updateOne(doc: T): Promise<DocStatus>;
    /**
     * Search for documents in an Index. Easily perform sophisticated queries and refine
     * results using filters with advanced features like faceting and ordering.
     *
     * @param query - Search query to execute
     * @returns {@link SearchIterator} - To iterate over pages of {@link SearchResult}
     *
     * @example
     * ```
     * const iterator = client.getIndex<Book>("books").search(query);
     *
     * for await (const resultPage of iterator) {
     *   console.log(resultPage.hits);
     *   console.log(resultPage.facets);
     * }
     * ```
     */
    search(query: SearchQuery<T>): SearchIterator<T>;
    /**
     * Search for documents in a collection. Easily perform sophisticated queries and refine
     * results using filters with advanced features like faceting and ordering.
     *
     * @param query - Search query to execute
     * @param page - Page number to retrieve. Page number `1` fetches the first page of search results.
     * @returns - Single page of results wrapped in a Promise
     *
     * @example To retrieve page number 5 of matched documents
     * ```
     * const resultPromise = client.getIndex<Book>("books").search(query, 5);
     *
     * resultPromise
     * 		.then((res: SearchResult<Book>) => console.log(res.hits))
     * 		.catch( // catch the error)
     * 		.finally( // finally do something);
     *
     * ```
     */
    search(query: SearchQuery<T>, page: number): Promise<SearchResult<T>>;
    private encodedDoc;
}
