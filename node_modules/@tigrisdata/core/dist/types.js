"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GeneratedField = exports.TigrisDataTypes = exports.ServerMetadata = exports.CacheGetResponse = exports.CacheDelResponse = exports.CacheGetSetResponse = exports.CacheSetResponse = exports.DeleteCacheResponse = exports.ListCachesResponse = exports.CacheMetadata = exports.TransactionResponse = exports.RollbackTransactionResponse = exports.CommitTransactionResponse = exports.TransactionOptions = exports.FindQueryOptions = exports.UpdateQueryOptions = exports.DeleteQueryOptions = exports.WriteOptions = exports.UpdateResponse = exports.DeleteResponse = exports.DMLMetadata = exports.CollectionDescription = exports.DatabaseDescription = exports.DropCollectionResponse = exports.DeleteBranchResponse = exports.CreateBranchResponse = exports.CollectionOptions = exports.DatabaseOptions = exports.CollectionMetadata = exports.DatabaseMetadata = exports.CollectionInfo = exports.DatabaseInfo = void 0;
const constants_1 = require("./constants");
class DatabaseInfo {
    constructor(name, metadata) {
        this._name = name;
        this._metadata = metadata;
    }
    get name() {
        return this._name;
    }
    get metadata() {
        return this._metadata;
    }
}
exports.DatabaseInfo = DatabaseInfo;
class CollectionInfo {
    constructor(name, metadata) {
        this._name = name;
        this._metadata = metadata;
    }
    get name() {
        return this._name;
    }
    get metadata() {
        return this._metadata;
    }
}
exports.CollectionInfo = CollectionInfo;
class DatabaseMetadata {
}
exports.DatabaseMetadata = DatabaseMetadata;
class CollectionMetadata {
}
exports.CollectionMetadata = CollectionMetadata;
class DatabaseOptions {
}
exports.DatabaseOptions = DatabaseOptions;
class CollectionOptions {
}
exports.CollectionOptions = CollectionOptions;
class CreateBranchResponse {
    constructor(message) {
        this.status = constants_1.Status.Created;
        this._message = message;
    }
    get message() {
        return this._message;
    }
    static from(response) {
        return new this(response.getMessage());
    }
}
exports.CreateBranchResponse = CreateBranchResponse;
class DeleteBranchResponse {
    constructor(message) {
        this.status = constants_1.Status.Deleted;
        this._message = message;
    }
    get message() {
        return this._message;
    }
    static from(response) {
        return new this(response.getMessage());
    }
}
exports.DeleteBranchResponse = DeleteBranchResponse;
class DropCollectionResponse {
    constructor(message) {
        this.status = constants_1.Status.Dropped;
        this._message = message;
    }
    get message() {
        return this._message;
    }
}
exports.DropCollectionResponse = DropCollectionResponse;
class DatabaseDescription {
    constructor(metadata, collectionsDescription, branches) {
        this._metadata = metadata;
        this._collectionsDescription = collectionsDescription;
        this._branches = branches;
    }
    get metadata() {
        return this._metadata;
    }
    get collectionsDescription() {
        return this._collectionsDescription;
    }
    get branches() {
        return this._branches;
    }
}
exports.DatabaseDescription = DatabaseDescription;
class CollectionDescription {
    constructor(collection, metadata, schema, indexDescriptions) {
        this._collection = collection;
        this._metadata = metadata;
        this._schema = schema;
        this._indexDescriptions = indexDescriptions;
    }
    get collection() {
        return this._collection;
    }
    get metadata() {
        return this._metadata;
    }
    get schema() {
        return this._schema;
    }
    get indexDescriptions() {
        if (!this._indexDescriptions) {
            return [];
        }
        return this._indexDescriptions;
    }
}
exports.CollectionDescription = CollectionDescription;
class DMLMetadata {
    constructor(createdAt, updatedAt) {
        this._createdAt = createdAt;
        this._updatedAt = updatedAt;
    }
    get createdAt() {
        return this._createdAt;
    }
    get updatedAt() {
        return this._updatedAt;
    }
}
exports.DMLMetadata = DMLMetadata;
class DeleteResponse {
    constructor(metadata) {
        this.status = constants_1.Status.Deleted;
        this._metadata = metadata;
    }
    get metadata() {
        return this._metadata;
    }
}
exports.DeleteResponse = DeleteResponse;
class UpdateResponse {
    constructor(modifiedCount, metadata) {
        this.status = constants_1.Status.Updated;
        this._modifiedCount = modifiedCount;
        this._metadata = metadata;
    }
    get modifiedCount() {
        return this._modifiedCount;
    }
    get metadata() {
        return this._metadata;
    }
}
exports.UpdateResponse = UpdateResponse;
class WriteOptions {
}
exports.WriteOptions = WriteOptions;
class DeleteQueryOptions {
    constructor(limit, collation) {
        this._limit = limit;
        this._collation = collation;
    }
    get limit() {
        return this._limit;
    }
    set limit(value) {
        this._limit = value;
    }
    get collation() {
        return this._collation;
    }
    set collation(value) {
        this._collation = value;
    }
}
exports.DeleteQueryOptions = DeleteQueryOptions;
class UpdateQueryOptions {
    constructor(limit, collation) {
        this._limit = limit;
        this._collation = collation;
    }
    get limit() {
        return this._limit;
    }
    set limit(value) {
        this._limit = value;
    }
    get collation() {
        return this._collation;
    }
    set collation(value) {
        this._collation = value;
    }
}
exports.UpdateQueryOptions = UpdateQueryOptions;
class FindQueryOptions {
    constructor(limit, skip, offset, collation) {
        this._limit = limit !== null && limit !== void 0 ? limit : FindQueryOptions.DEFAULT_LIMIT;
        this._skip = skip !== null && skip !== void 0 ? skip : FindQueryOptions.DEFAULT_SKIP;
        this._offset = offset;
        this._collation = collation;
    }
    get limit() {
        return this._limit;
    }
    set limit(value) {
        this._limit = value;
    }
    get skip() {
        return this._skip;
    }
    set skip(value) {
        this._skip = value;
    }
    get offset() {
        return this._offset;
    }
    set offset(value) {
        this._offset = value;
    }
    get collation() {
        return this._collation;
    }
    set collation(value) {
        this._collation = value;
    }
}
exports.FindQueryOptions = FindQueryOptions;
FindQueryOptions.DEFAULT_LIMIT = 100;
FindQueryOptions.DEFAULT_SKIP = 0;
class TransactionOptions {
}
exports.TransactionOptions = TransactionOptions;
class CommitTransactionResponse {
    constructor(message) {
        this.status = constants_1.Status.Ok;
        this._message = message;
    }
    get message() {
        return this._message;
    }
}
exports.CommitTransactionResponse = CommitTransactionResponse;
class RollbackTransactionResponse {
    constructor(message) {
        this.status = constants_1.Status.Ok;
        this._message = message;
    }
    get message() {
        return this._message;
    }
}
exports.RollbackTransactionResponse = RollbackTransactionResponse;
class TransactionResponse {
    constructor() {
        this.status = constants_1.Status.Ok;
    }
}
exports.TransactionResponse = TransactionResponse;
class CacheMetadata {
    constructor(name) {
        this._name = name;
    }
    get name() {
        return this._name;
    }
}
exports.CacheMetadata = CacheMetadata;
class ListCachesResponse {
    constructor(caches) {
        this._caches = caches;
    }
    get caches() {
        return this._caches;
    }
}
exports.ListCachesResponse = ListCachesResponse;
class DeleteCacheResponse {
    constructor(message) {
        this.status = constants_1.Status.Deleted;
        this._message = message;
    }
    get message() {
        return this._message;
    }
}
exports.DeleteCacheResponse = DeleteCacheResponse;
class CacheSetResponse {
    constructor(message) {
        this.status = constants_1.Status.Set;
        this._message = message;
    }
    get message() {
        return this._message;
    }
}
exports.CacheSetResponse = CacheSetResponse;
class CacheGetSetResponse extends CacheSetResponse {
    constructor(message, old_value) {
        super(message);
        if (old_value !== undefined) {
            this._old_value = old_value;
        }
    }
    get old_value() {
        return this._old_value;
    }
}
exports.CacheGetSetResponse = CacheGetSetResponse;
class CacheDelResponse {
    constructor(status, message) {
        this.status = constants_1.Status.Deleted;
        this._message = message;
    }
    get message() {
        return this._message;
    }
}
exports.CacheDelResponse = CacheDelResponse;
class CacheGetResponse {
    constructor(value) {
        this._value = value;
    }
    get value() {
        return this._value;
    }
}
exports.CacheGetResponse = CacheGetResponse;
class ServerMetadata {
    constructor(serverVersion) {
        this._serverVersion = serverVersion;
    }
    get serverVersion() {
        return this._serverVersion;
    }
}
exports.ServerMetadata = ServerMetadata;
var TigrisDataTypes;
(function (TigrisDataTypes) {
    TigrisDataTypes["STRING"] = "string";
    TigrisDataTypes["BOOLEAN"] = "boolean";
    TigrisDataTypes["INT32"] = "int32";
    /**
     * Due to Javascript's limitation if you want to use int64 with values greater than 53bits
     * then use bigint or string in your model (data container interface) schema will still say
     * INT64. If you are using default serializer/deserializer
     * in your application use it as `string`. server will still keep it as `int64`.
     *
     * If you have no serde else where in the app or all the serde are handling bigint properly
     * then use bigint.
     */
    TigrisDataTypes["INT64"] = "int64";
    TigrisDataTypes["NUMBER"] = "number";
    TigrisDataTypes["NUMBER_BIGINT"] = "bigint";
    TigrisDataTypes["DATE_TIME"] = "date-time";
    TigrisDataTypes["BYTE_STRING"] = "byte-string";
    TigrisDataTypes["UUID"] = "uuid";
    TigrisDataTypes["ARRAY"] = "array";
    TigrisDataTypes["OBJECT"] = "object";
})(TigrisDataTypes = exports.TigrisDataTypes || (exports.TigrisDataTypes = {}));
/**
 * DB generated values for the schema fields
 */
var GeneratedField;
(function (GeneratedField) {
    GeneratedField["NOW"] = "now()";
    GeneratedField["CUID"] = "cuid()";
    GeneratedField["UUID"] = "uuid()";
})(GeneratedField = exports.GeneratedField || (exports.GeneratedField = {}));
