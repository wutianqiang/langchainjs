"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Session = void 0;
const api_pb_1 = require("./proto/server/v1/api_pb");
const types_1 = require("./types");
const utility_1 = require("./utility");
class Session {
    constructor(id, origin, grpcClient, db, branch, additionalMetadata) {
        this._id = id;
        this._origin = origin;
        this.grpcClient = grpcClient;
        this.db = db;
        this.branch = branch;
        this._additionalMetadata = additionalMetadata;
    }
    get id() {
        return this._id;
    }
    get origin() {
        return this._origin;
    }
    get additionalMetadata() {
        return this._additionalMetadata;
    }
    commit() {
        return new Promise((resolve, reject) => {
            const request = new api_pb_1.CommitTransactionRequest()
                .setProject(this.db)
                .setBranch(this.branch);
            this.grpcClient.commitTransaction(request, utility_1.Utility.txToMetadata(this), (error, response) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(new types_1.CommitTransactionResponse(response.getStatus()));
                }
            });
        });
    }
    rollback() {
        return new Promise((resolve, reject) => {
            const request = new api_pb_1.RollbackTransactionRequest()
                .setProject(this.db)
                .setBranch(this.branch);
            this.grpcClient.rollbackTransaction(request, utility_1.Utility.txToMetadata(this), (error, response) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(new types_1.RollbackTransactionResponse(response.getStatus()));
                }
            });
        });
    }
}
exports.Session = Session;
