// GENERATED CODE -- DO NOT EDIT!

// Original file comments:
// Copyright 2022-2023 Tigris Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
'use strict';
var grpc = require('@grpc/grpc-js');
var server_v1_auth_pb = require('../../server/v1/auth_pb.js');
var google_api_annotations_pb = require('../../google/api/annotations_pb.js');
var openapiv3_annotations_pb = require('../../openapiv3/annotations_pb.js');

function serialize_tigrisdata_auth_v1_CreateInvitationsRequest(arg) {
  if (!(arg instanceof server_v1_auth_pb.CreateInvitationsRequest)) {
    throw new Error('Expected argument of type tigrisdata.auth.v1.CreateInvitationsRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_auth_v1_CreateInvitationsRequest(buffer_arg) {
  return server_v1_auth_pb.CreateInvitationsRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_auth_v1_CreateInvitationsResponse(arg) {
  if (!(arg instanceof server_v1_auth_pb.CreateInvitationsResponse)) {
    throw new Error('Expected argument of type tigrisdata.auth.v1.CreateInvitationsResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_auth_v1_CreateInvitationsResponse(buffer_arg) {
  return server_v1_auth_pb.CreateInvitationsResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_auth_v1_DeleteInvitationsRequest(arg) {
  if (!(arg instanceof server_v1_auth_pb.DeleteInvitationsRequest)) {
    throw new Error('Expected argument of type tigrisdata.auth.v1.DeleteInvitationsRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_auth_v1_DeleteInvitationsRequest(buffer_arg) {
  return server_v1_auth_pb.DeleteInvitationsRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_auth_v1_DeleteInvitationsResponse(arg) {
  if (!(arg instanceof server_v1_auth_pb.DeleteInvitationsResponse)) {
    throw new Error('Expected argument of type tigrisdata.auth.v1.DeleteInvitationsResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_auth_v1_DeleteInvitationsResponse(buffer_arg) {
  return server_v1_auth_pb.DeleteInvitationsResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_auth_v1_GetAccessTokenRequest(arg) {
  if (!(arg instanceof server_v1_auth_pb.GetAccessTokenRequest)) {
    throw new Error('Expected argument of type tigrisdata.auth.v1.GetAccessTokenRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_auth_v1_GetAccessTokenRequest(buffer_arg) {
  return server_v1_auth_pb.GetAccessTokenRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_auth_v1_GetAccessTokenResponse(arg) {
  if (!(arg instanceof server_v1_auth_pb.GetAccessTokenResponse)) {
    throw new Error('Expected argument of type tigrisdata.auth.v1.GetAccessTokenResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_auth_v1_GetAccessTokenResponse(buffer_arg) {
  return server_v1_auth_pb.GetAccessTokenResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_auth_v1_ListInvitationsRequest(arg) {
  if (!(arg instanceof server_v1_auth_pb.ListInvitationsRequest)) {
    throw new Error('Expected argument of type tigrisdata.auth.v1.ListInvitationsRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_auth_v1_ListInvitationsRequest(buffer_arg) {
  return server_v1_auth_pb.ListInvitationsRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_auth_v1_ListInvitationsResponse(arg) {
  if (!(arg instanceof server_v1_auth_pb.ListInvitationsResponse)) {
    throw new Error('Expected argument of type tigrisdata.auth.v1.ListInvitationsResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_auth_v1_ListInvitationsResponse(buffer_arg) {
  return server_v1_auth_pb.ListInvitationsResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_auth_v1_ListUsersRequest(arg) {
  if (!(arg instanceof server_v1_auth_pb.ListUsersRequest)) {
    throw new Error('Expected argument of type tigrisdata.auth.v1.ListUsersRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_auth_v1_ListUsersRequest(buffer_arg) {
  return server_v1_auth_pb.ListUsersRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_auth_v1_ListUsersResponse(arg) {
  if (!(arg instanceof server_v1_auth_pb.ListUsersResponse)) {
    throw new Error('Expected argument of type tigrisdata.auth.v1.ListUsersResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_auth_v1_ListUsersResponse(buffer_arg) {
  return server_v1_auth_pb.ListUsersResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_auth_v1_VerifyInvitationRequest(arg) {
  if (!(arg instanceof server_v1_auth_pb.VerifyInvitationRequest)) {
    throw new Error('Expected argument of type tigrisdata.auth.v1.VerifyInvitationRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_auth_v1_VerifyInvitationRequest(buffer_arg) {
  return server_v1_auth_pb.VerifyInvitationRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_auth_v1_VerifyInvitationResponse(arg) {
  if (!(arg instanceof server_v1_auth_pb.VerifyInvitationResponse)) {
    throw new Error('Expected argument of type tigrisdata.auth.v1.VerifyInvitationResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_auth_v1_VerifyInvitationResponse(buffer_arg) {
  return server_v1_auth_pb.VerifyInvitationResponse.deserializeBinary(new Uint8Array(buffer_arg));
}


var AuthService = exports.AuthService = {
  // Endpoint for receiving access token from Tigris Server. The endpoint
// requires Grant Type(`grant_type`) which has two possible values
// <i>"REFRESH_TOKEN"</i> or <i>"CLIENT_CREDENTIALS"</i> based on which either
// Refresh token(`refresh_token`) needs to be set or client
// credentials(`client_id`, `client_secret`).
getAccessToken: {
    path: '/tigrisdata.auth.v1.Auth/GetAccessToken',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_auth_pb.GetAccessTokenRequest,
    responseType: server_v1_auth_pb.GetAccessTokenResponse,
    requestSerialize: serialize_tigrisdata_auth_v1_GetAccessTokenRequest,
    requestDeserialize: deserialize_tigrisdata_auth_v1_GetAccessTokenRequest,
    responseSerialize: serialize_tigrisdata_auth_v1_GetAccessTokenResponse,
    responseDeserialize: deserialize_tigrisdata_auth_v1_GetAccessTokenResponse,
  },
  // Creates invitations to the namespace
createInvitations: {
    path: '/tigrisdata.auth.v1.Auth/CreateInvitations',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_auth_pb.CreateInvitationsRequest,
    responseType: server_v1_auth_pb.CreateInvitationsResponse,
    requestSerialize: serialize_tigrisdata_auth_v1_CreateInvitationsRequest,
    requestDeserialize: deserialize_tigrisdata_auth_v1_CreateInvitationsRequest,
    responseSerialize: serialize_tigrisdata_auth_v1_CreateInvitationsResponse,
    responseDeserialize: deserialize_tigrisdata_auth_v1_CreateInvitationsResponse,
  },
  // Deletes invitations to the namespace
deleteInvitations: {
    path: '/tigrisdata.auth.v1.Auth/DeleteInvitations',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_auth_pb.DeleteInvitationsRequest,
    responseType: server_v1_auth_pb.DeleteInvitationsResponse,
    requestSerialize: serialize_tigrisdata_auth_v1_DeleteInvitationsRequest,
    requestDeserialize: deserialize_tigrisdata_auth_v1_DeleteInvitationsRequest,
    responseSerialize: serialize_tigrisdata_auth_v1_DeleteInvitationsResponse,
    responseDeserialize: deserialize_tigrisdata_auth_v1_DeleteInvitationsResponse,
  },
  // Lists all the invitations to the namespace
listInvitations: {
    path: '/tigrisdata.auth.v1.Auth/ListInvitations',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_auth_pb.ListInvitationsRequest,
    responseType: server_v1_auth_pb.ListInvitationsResponse,
    requestSerialize: serialize_tigrisdata_auth_v1_ListInvitationsRequest,
    requestDeserialize: deserialize_tigrisdata_auth_v1_ListInvitationsRequest,
    responseSerialize: serialize_tigrisdata_auth_v1_ListInvitationsResponse,
    responseDeserialize: deserialize_tigrisdata_auth_v1_ListInvitationsResponse,
  },
  // Verify invitation
verifyInvitation: {
    path: '/tigrisdata.auth.v1.Auth/VerifyInvitation',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_auth_pb.VerifyInvitationRequest,
    responseType: server_v1_auth_pb.VerifyInvitationResponse,
    requestSerialize: serialize_tigrisdata_auth_v1_VerifyInvitationRequest,
    requestDeserialize: deserialize_tigrisdata_auth_v1_VerifyInvitationRequest,
    responseSerialize: serialize_tigrisdata_auth_v1_VerifyInvitationResponse,
    responseDeserialize: deserialize_tigrisdata_auth_v1_VerifyInvitationResponse,
  },
  // List users
listUsers: {
    path: '/tigrisdata.auth.v1.Auth/ListUsers',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_auth_pb.ListUsersRequest,
    responseType: server_v1_auth_pb.ListUsersResponse,
    requestSerialize: serialize_tigrisdata_auth_v1_ListUsersRequest,
    requestDeserialize: deserialize_tigrisdata_auth_v1_ListUsersRequest,
    responseSerialize: serialize_tigrisdata_auth_v1_ListUsersResponse,
    responseDeserialize: deserialize_tigrisdata_auth_v1_ListUsersResponse,
  },
};

exports.AuthClient = grpc.makeGenericClientConstructor(AuthService);
