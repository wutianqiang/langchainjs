// GENERATED CODE -- DO NOT EDIT!

// Original file comments:
// Copyright 2022-2023 Tigris Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
'use strict';
var grpc = require('@grpc/grpc-js');
var server_v1_api_pb = require('../../server/v1/api_pb.js');
var google_api_annotations_pb = require('../../google/api/annotations_pb.js');
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
var openapiv3_annotations_pb = require('../../openapiv3/annotations_pb.js');

function serialize_tigrisdata_v1_BeginTransactionRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.BeginTransactionRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.BeginTransactionRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_BeginTransactionRequest(buffer_arg) {
  return server_v1_api_pb.BeginTransactionRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_BeginTransactionResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.BeginTransactionResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.BeginTransactionResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_BeginTransactionResponse(buffer_arg) {
  return server_v1_api_pb.BeginTransactionResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_BuildCollectionIndexRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.BuildCollectionIndexRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.BuildCollectionIndexRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_BuildCollectionIndexRequest(buffer_arg) {
  return server_v1_api_pb.BuildCollectionIndexRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_BuildCollectionIndexResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.BuildCollectionIndexResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.BuildCollectionIndexResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_BuildCollectionIndexResponse(buffer_arg) {
  return server_v1_api_pb.BuildCollectionIndexResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_CommitTransactionRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.CommitTransactionRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.CommitTransactionRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_CommitTransactionRequest(buffer_arg) {
  return server_v1_api_pb.CommitTransactionRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_CommitTransactionResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.CommitTransactionResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.CommitTransactionResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_CommitTransactionResponse(buffer_arg) {
  return server_v1_api_pb.CommitTransactionResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_CountRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.CountRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.CountRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_CountRequest(buffer_arg) {
  return server_v1_api_pb.CountRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_CountResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.CountResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.CountResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_CountResponse(buffer_arg) {
  return server_v1_api_pb.CountResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_CreateAppKeyRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.CreateAppKeyRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.CreateAppKeyRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_CreateAppKeyRequest(buffer_arg) {
  return server_v1_api_pb.CreateAppKeyRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_CreateAppKeyResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.CreateAppKeyResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.CreateAppKeyResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_CreateAppKeyResponse(buffer_arg) {
  return server_v1_api_pb.CreateAppKeyResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_CreateBranchRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.CreateBranchRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.CreateBranchRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_CreateBranchRequest(buffer_arg) {
  return server_v1_api_pb.CreateBranchRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_CreateBranchResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.CreateBranchResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.CreateBranchResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_CreateBranchResponse(buffer_arg) {
  return server_v1_api_pb.CreateBranchResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_CreateOrUpdateCollectionRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.CreateOrUpdateCollectionRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.CreateOrUpdateCollectionRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_CreateOrUpdateCollectionRequest(buffer_arg) {
  return server_v1_api_pb.CreateOrUpdateCollectionRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_CreateOrUpdateCollectionResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.CreateOrUpdateCollectionResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.CreateOrUpdateCollectionResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_CreateOrUpdateCollectionResponse(buffer_arg) {
  return server_v1_api_pb.CreateOrUpdateCollectionResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_CreateProjectRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.CreateProjectRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.CreateProjectRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_CreateProjectRequest(buffer_arg) {
  return server_v1_api_pb.CreateProjectRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_CreateProjectResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.CreateProjectResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.CreateProjectResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_CreateProjectResponse(buffer_arg) {
  return server_v1_api_pb.CreateProjectResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_DeleteAppKeyRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.DeleteAppKeyRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.DeleteAppKeyRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_DeleteAppKeyRequest(buffer_arg) {
  return server_v1_api_pb.DeleteAppKeyRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_DeleteAppKeyResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.DeleteAppKeyResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.DeleteAppKeyResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_DeleteAppKeyResponse(buffer_arg) {
  return server_v1_api_pb.DeleteAppKeyResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_DeleteBranchRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.DeleteBranchRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.DeleteBranchRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_DeleteBranchRequest(buffer_arg) {
  return server_v1_api_pb.DeleteBranchRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_DeleteBranchResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.DeleteBranchResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.DeleteBranchResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_DeleteBranchResponse(buffer_arg) {
  return server_v1_api_pb.DeleteBranchResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_DeleteProjectRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.DeleteProjectRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.DeleteProjectRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_DeleteProjectRequest(buffer_arg) {
  return server_v1_api_pb.DeleteProjectRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_DeleteProjectResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.DeleteProjectResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.DeleteProjectResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_DeleteProjectResponse(buffer_arg) {
  return server_v1_api_pb.DeleteProjectResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_DeleteRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.DeleteRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.DeleteRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_DeleteRequest(buffer_arg) {
  return server_v1_api_pb.DeleteRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_DeleteResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.DeleteResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.DeleteResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_DeleteResponse(buffer_arg) {
  return server_v1_api_pb.DeleteResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_DescribeCollectionRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.DescribeCollectionRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.DescribeCollectionRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_DescribeCollectionRequest(buffer_arg) {
  return server_v1_api_pb.DescribeCollectionRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_DescribeCollectionResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.DescribeCollectionResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.DescribeCollectionResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_DescribeCollectionResponse(buffer_arg) {
  return server_v1_api_pb.DescribeCollectionResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_DescribeDatabaseRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.DescribeDatabaseRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.DescribeDatabaseRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_DescribeDatabaseRequest(buffer_arg) {
  return server_v1_api_pb.DescribeDatabaseRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_DescribeDatabaseResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.DescribeDatabaseResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.DescribeDatabaseResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_DescribeDatabaseResponse(buffer_arg) {
  return server_v1_api_pb.DescribeDatabaseResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_DropCollectionRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.DropCollectionRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.DropCollectionRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_DropCollectionRequest(buffer_arg) {
  return server_v1_api_pb.DropCollectionRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_DropCollectionResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.DropCollectionResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.DropCollectionResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_DropCollectionResponse(buffer_arg) {
  return server_v1_api_pb.DropCollectionResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_ExplainResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.ExplainResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.ExplainResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_ExplainResponse(buffer_arg) {
  return server_v1_api_pb.ExplainResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_ImportRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.ImportRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.ImportRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_ImportRequest(buffer_arg) {
  return server_v1_api_pb.ImportRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_ImportResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.ImportResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.ImportResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_ImportResponse(buffer_arg) {
  return server_v1_api_pb.ImportResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_InsertRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.InsertRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.InsertRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_InsertRequest(buffer_arg) {
  return server_v1_api_pb.InsertRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_InsertResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.InsertResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.InsertResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_InsertResponse(buffer_arg) {
  return server_v1_api_pb.InsertResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_ListAppKeysRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.ListAppKeysRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.ListAppKeysRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_ListAppKeysRequest(buffer_arg) {
  return server_v1_api_pb.ListAppKeysRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_ListAppKeysResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.ListAppKeysResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.ListAppKeysResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_ListAppKeysResponse(buffer_arg) {
  return server_v1_api_pb.ListAppKeysResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_ListBranchesRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.ListBranchesRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.ListBranchesRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_ListBranchesRequest(buffer_arg) {
  return server_v1_api_pb.ListBranchesRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_ListBranchesResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.ListBranchesResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.ListBranchesResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_ListBranchesResponse(buffer_arg) {
  return server_v1_api_pb.ListBranchesResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_ListCollectionsRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.ListCollectionsRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.ListCollectionsRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_ListCollectionsRequest(buffer_arg) {
  return server_v1_api_pb.ListCollectionsRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_ListCollectionsResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.ListCollectionsResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.ListCollectionsResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_ListCollectionsResponse(buffer_arg) {
  return server_v1_api_pb.ListCollectionsResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_ListProjectsRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.ListProjectsRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.ListProjectsRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_ListProjectsRequest(buffer_arg) {
  return server_v1_api_pb.ListProjectsRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_ListProjectsResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.ListProjectsResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.ListProjectsResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_ListProjectsResponse(buffer_arg) {
  return server_v1_api_pb.ListProjectsResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_ReadRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.ReadRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.ReadRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_ReadRequest(buffer_arg) {
  return server_v1_api_pb.ReadRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_ReadResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.ReadResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.ReadResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_ReadResponse(buffer_arg) {
  return server_v1_api_pb.ReadResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_ReplaceRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.ReplaceRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.ReplaceRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_ReplaceRequest(buffer_arg) {
  return server_v1_api_pb.ReplaceRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_ReplaceResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.ReplaceResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.ReplaceResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_ReplaceResponse(buffer_arg) {
  return server_v1_api_pb.ReplaceResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_RollbackTransactionRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.RollbackTransactionRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.RollbackTransactionRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_RollbackTransactionRequest(buffer_arg) {
  return server_v1_api_pb.RollbackTransactionRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_RollbackTransactionResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.RollbackTransactionResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.RollbackTransactionResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_RollbackTransactionResponse(buffer_arg) {
  return server_v1_api_pb.RollbackTransactionResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_RotateAppKeyRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.RotateAppKeyRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.RotateAppKeyRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_RotateAppKeyRequest(buffer_arg) {
  return server_v1_api_pb.RotateAppKeyRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_RotateAppKeyResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.RotateAppKeyResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.RotateAppKeyResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_RotateAppKeyResponse(buffer_arg) {
  return server_v1_api_pb.RotateAppKeyResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_SearchRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.SearchRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.SearchRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_SearchRequest(buffer_arg) {
  return server_v1_api_pb.SearchRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_SearchResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.SearchResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.SearchResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_SearchResponse(buffer_arg) {
  return server_v1_api_pb.SearchResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_UpdateAppKeyRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.UpdateAppKeyRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.UpdateAppKeyRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_UpdateAppKeyRequest(buffer_arg) {
  return server_v1_api_pb.UpdateAppKeyRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_UpdateAppKeyResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.UpdateAppKeyResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.UpdateAppKeyResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_UpdateAppKeyResponse(buffer_arg) {
  return server_v1_api_pb.UpdateAppKeyResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_UpdateRequest(arg) {
  if (!(arg instanceof server_v1_api_pb.UpdateRequest)) {
    throw new Error('Expected argument of type tigrisdata.v1.UpdateRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_UpdateRequest(buffer_arg) {
  return server_v1_api_pb.UpdateRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_v1_UpdateResponse(arg) {
  if (!(arg instanceof server_v1_api_pb.UpdateResponse)) {
    throw new Error('Expected argument of type tigrisdata.v1.UpdateResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_v1_UpdateResponse(buffer_arg) {
  return server_v1_api_pb.UpdateResponse.deserializeBinary(new Uint8Array(buffer_arg));
}


var TigrisService = exports.TigrisService = {
  // Starts a new transaction and returns a transactional object. All reads/writes performed
// within a transaction will run with serializable isolation. Tigris offers global transactions,
// with ACID properties and strict serializability.
beginTransaction: {
    path: '/tigrisdata.v1.Tigris/BeginTransaction',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.BeginTransactionRequest,
    responseType: server_v1_api_pb.BeginTransactionResponse,
    requestSerialize: serialize_tigrisdata_v1_BeginTransactionRequest,
    requestDeserialize: deserialize_tigrisdata_v1_BeginTransactionRequest,
    responseSerialize: serialize_tigrisdata_v1_BeginTransactionResponse,
    responseDeserialize: deserialize_tigrisdata_v1_BeginTransactionResponse,
  },
  // Atomically commit all the changes performed in the context of the transaction. Commit provides all
// or nothing semantics by ensuring no partial updates are in the project due to a transaction failure.
commitTransaction: {
    path: '/tigrisdata.v1.Tigris/CommitTransaction',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.CommitTransactionRequest,
    responseType: server_v1_api_pb.CommitTransactionResponse,
    requestSerialize: serialize_tigrisdata_v1_CommitTransactionRequest,
    requestDeserialize: deserialize_tigrisdata_v1_CommitTransactionRequest,
    responseSerialize: serialize_tigrisdata_v1_CommitTransactionResponse,
    responseDeserialize: deserialize_tigrisdata_v1_CommitTransactionResponse,
  },
  // Rollback transaction discards all the changes
// performed in the transaction
rollbackTransaction: {
    path: '/tigrisdata.v1.Tigris/RollbackTransaction',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.RollbackTransactionRequest,
    responseType: server_v1_api_pb.RollbackTransactionResponse,
    requestSerialize: serialize_tigrisdata_v1_RollbackTransactionRequest,
    requestDeserialize: deserialize_tigrisdata_v1_RollbackTransactionRequest,
    responseSerialize: serialize_tigrisdata_v1_RollbackTransactionResponse,
    responseDeserialize: deserialize_tigrisdata_v1_RollbackTransactionResponse,
  },
  // Inserts new documents in the collection and returns an AlreadyExists error if any of the documents
// in the request already exists. Insert provides idempotency by returning an error if the document
// already exists. To replace documents, use REPLACE API instead of INSERT.
insert: {
    path: '/tigrisdata.v1.Tigris/Insert',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.InsertRequest,
    responseType: server_v1_api_pb.InsertResponse,
    requestSerialize: serialize_tigrisdata_v1_InsertRequest,
    requestDeserialize: deserialize_tigrisdata_v1_InsertRequest,
    responseSerialize: serialize_tigrisdata_v1_InsertResponse,
    responseDeserialize: deserialize_tigrisdata_v1_InsertResponse,
  },
  // Inserts the documents or replaces the existing documents in the collections.
replace: {
    path: '/tigrisdata.v1.Tigris/Replace',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.ReplaceRequest,
    responseType: server_v1_api_pb.ReplaceResponse,
    requestSerialize: serialize_tigrisdata_v1_ReplaceRequest,
    requestDeserialize: deserialize_tigrisdata_v1_ReplaceRequest,
    responseSerialize: serialize_tigrisdata_v1_ReplaceResponse,
    responseDeserialize: deserialize_tigrisdata_v1_ReplaceResponse,
  },
  // Delete a range of documents in the collection using the condition provided in the filter.
delete: {
    path: '/tigrisdata.v1.Tigris/Delete',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.DeleteRequest,
    responseType: server_v1_api_pb.DeleteResponse,
    requestSerialize: serialize_tigrisdata_v1_DeleteRequest,
    requestDeserialize: deserialize_tigrisdata_v1_DeleteRequest,
    responseSerialize: serialize_tigrisdata_v1_DeleteResponse,
    responseDeserialize: deserialize_tigrisdata_v1_DeleteResponse,
  },
  // Update a range of documents in the collection using the condition provided in the filter.
update: {
    path: '/tigrisdata.v1.Tigris/Update',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.UpdateRequest,
    responseType: server_v1_api_pb.UpdateResponse,
    requestSerialize: serialize_tigrisdata_v1_UpdateRequest,
    requestDeserialize: deserialize_tigrisdata_v1_UpdateRequest,
    responseSerialize: serialize_tigrisdata_v1_UpdateResponse,
    responseDeserialize: deserialize_tigrisdata_v1_UpdateResponse,
  },
  // Reads a range of documents from the collection, or messages from a collection in case of event streaming. Tigris does not require you to
// index any fields and automatically index all the fields which means you can filter by any field in the document.
// An empty filter will trigger reading all the documents inside this collection. The API supports pagination that
// can be used by passing `Limit/Skip` parameters. The `skip` parameter skips the number of documents from the start and
// the `limit` parameter is used to specify the number of documents to read. You can find more detailed documentation
// of the Read API <a href="https://docs.tigrisdata.com/overview/query" title="here">here</a>.
read: {
    path: '/tigrisdata.v1.Tigris/Read',
    requestStream: false,
    responseStream: true,
    requestType: server_v1_api_pb.ReadRequest,
    responseType: server_v1_api_pb.ReadResponse,
    requestSerialize: serialize_tigrisdata_v1_ReadRequest,
    requestDeserialize: deserialize_tigrisdata_v1_ReadRequest,
    responseSerialize: serialize_tigrisdata_v1_ReadResponse,
    responseDeserialize: deserialize_tigrisdata_v1_ReadResponse,
  },
  // Count returns the number of documents in the collection. The filter parameter
// can be used to select which documents contribute to the count. An empty filter means
// count all documents in the collection.
count: {
    path: '/tigrisdata.v1.Tigris/Count',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.CountRequest,
    responseType: server_v1_api_pb.CountResponse,
    requestSerialize: serialize_tigrisdata_v1_CountRequest,
    requestDeserialize: deserialize_tigrisdata_v1_CountRequest,
    responseSerialize: serialize_tigrisdata_v1_CountResponse,
    responseDeserialize: deserialize_tigrisdata_v1_CountResponse,
  },
  // Index Collection will do a full scan off all documents in the collection and rebuild
// all indexes in the collection
buildCollectionIndex: {
    path: '/tigrisdata.v1.Tigris/BuildCollectionIndex',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.BuildCollectionIndexRequest,
    responseType: server_v1_api_pb.BuildCollectionIndexResponse,
    requestSerialize: serialize_tigrisdata_v1_BuildCollectionIndexRequest,
    requestDeserialize: deserialize_tigrisdata_v1_BuildCollectionIndexRequest,
    responseSerialize: serialize_tigrisdata_v1_BuildCollectionIndexResponse,
    responseDeserialize: deserialize_tigrisdata_v1_BuildCollectionIndexResponse,
  },
  // Explain takes the same parameters as Read and returns how the Tigris Query Planner would process the
// response
explain: {
    path: '/tigrisdata.v1.Tigris/Explain',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.ReadRequest,
    responseType: server_v1_api_pb.ExplainResponse,
    requestSerialize: serialize_tigrisdata_v1_ReadRequest,
    requestDeserialize: deserialize_tigrisdata_v1_ReadRequest,
    responseSerialize: serialize_tigrisdata_v1_ExplainResponse,
    responseDeserialize: deserialize_tigrisdata_v1_ExplainResponse,
  },
  // Searches a collection for the documents matching the query, or messages in case of event streaming. A search can be
// a term search or a phrase search. Search API allows filtering the result set using filters as documented <a href="https://docs.tigrisdata.com/overview/query#specification-1" title="here">here</a>.
// You can also perform a faceted search by passing the fields in the facet parameter.
// You can find more detailed documentation of the Search API with multiple examples <a href="https://docs.tigrisdata.com/overview/search" title="here">here</a>.
search: {
    path: '/tigrisdata.v1.Tigris/Search',
    requestStream: false,
    responseStream: true,
    requestType: server_v1_api_pb.SearchRequest,
    responseType: server_v1_api_pb.SearchResponse,
    requestSerialize: serialize_tigrisdata_v1_SearchRequest,
    requestDeserialize: deserialize_tigrisdata_v1_SearchRequest,
    responseSerialize: serialize_tigrisdata_v1_SearchResponse,
    responseDeserialize: deserialize_tigrisdata_v1_SearchResponse,
  },
  // Imports documents into the collection.
//
// It automatically:
//  * Detects the schema of the documents in the batch
//  * Evolves the schema as soon as it's backward compatible
//  * Creates collection with inferred schema (if requested)
import: {
    path: '/tigrisdata.v1.Tigris/Import',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.ImportRequest,
    responseType: server_v1_api_pb.ImportResponse,
    requestSerialize: serialize_tigrisdata_v1_ImportRequest,
    requestDeserialize: deserialize_tigrisdata_v1_ImportRequest,
    responseSerialize: serialize_tigrisdata_v1_ImportResponse,
    responseDeserialize: deserialize_tigrisdata_v1_ImportResponse,
  },
  // Creates a new collection or atomically upgrades the collection to the new schema provided in the request.
// Schema changes are applied atomically and immediately without any downtime.
// Tigris Offers two types of collections: <p></p>
//    <li> `DOCUMENTS`: Offers rich CRUD APIs.
//    <li> `MESSAGES`: Offers event streaming APIs.
createOrUpdateCollection: {
    path: '/tigrisdata.v1.Tigris/CreateOrUpdateCollection',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.CreateOrUpdateCollectionRequest,
    responseType: server_v1_api_pb.CreateOrUpdateCollectionResponse,
    requestSerialize: serialize_tigrisdata_v1_CreateOrUpdateCollectionRequest,
    requestDeserialize: deserialize_tigrisdata_v1_CreateOrUpdateCollectionRequest,
    responseSerialize: serialize_tigrisdata_v1_CreateOrUpdateCollectionResponse,
    responseDeserialize: deserialize_tigrisdata_v1_CreateOrUpdateCollectionResponse,
  },
  // Drops the collection inside this project. This API deletes all of the
// documents inside this collection and any metadata associated with it.
dropCollection: {
    path: '/tigrisdata.v1.Tigris/DropCollection',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.DropCollectionRequest,
    responseType: server_v1_api_pb.DropCollectionResponse,
    requestSerialize: serialize_tigrisdata_v1_DropCollectionRequest,
    requestDeserialize: deserialize_tigrisdata_v1_DropCollectionRequest,
    responseSerialize: serialize_tigrisdata_v1_DropCollectionResponse,
    responseDeserialize: deserialize_tigrisdata_v1_DropCollectionResponse,
  },
  // List returns all the projects.
listProjects: {
    path: '/tigrisdata.v1.Tigris/ListProjects',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.ListProjectsRequest,
    responseType: server_v1_api_pb.ListProjectsResponse,
    requestSerialize: serialize_tigrisdata_v1_ListProjectsRequest,
    requestDeserialize: deserialize_tigrisdata_v1_ListProjectsRequest,
    responseSerialize: serialize_tigrisdata_v1_ListProjectsResponse,
    responseDeserialize: deserialize_tigrisdata_v1_ListProjectsResponse,
  },
  // List all the collections present in the project passed in the request.
listCollections: {
    path: '/tigrisdata.v1.Tigris/ListCollections',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.ListCollectionsRequest,
    responseType: server_v1_api_pb.ListCollectionsResponse,
    requestSerialize: serialize_tigrisdata_v1_ListCollectionsRequest,
    requestDeserialize: deserialize_tigrisdata_v1_ListCollectionsRequest,
    responseSerialize: serialize_tigrisdata_v1_ListCollectionsResponse,
    responseDeserialize: deserialize_tigrisdata_v1_ListCollectionsResponse,
  },
  // Creates a new project. Returns an AlreadyExists error with a status code 409 if the project already exists.
createProject: {
    path: '/tigrisdata.v1.Tigris/CreateProject',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.CreateProjectRequest,
    responseType: server_v1_api_pb.CreateProjectResponse,
    requestSerialize: serialize_tigrisdata_v1_CreateProjectRequest,
    requestDeserialize: deserialize_tigrisdata_v1_CreateProjectRequest,
    responseSerialize: serialize_tigrisdata_v1_CreateProjectResponse,
    responseDeserialize: deserialize_tigrisdata_v1_CreateProjectResponse,
  },
  // Delete Project deletes all the collections in this project along with all of the documents, and associated metadata for these collections.
deleteProject: {
    path: '/tigrisdata.v1.Tigris/DeleteProject',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.DeleteProjectRequest,
    responseType: server_v1_api_pb.DeleteProjectResponse,
    requestSerialize: serialize_tigrisdata_v1_DeleteProjectRequest,
    requestDeserialize: deserialize_tigrisdata_v1_DeleteProjectRequest,
    responseSerialize: serialize_tigrisdata_v1_DeleteProjectResponse,
    responseDeserialize: deserialize_tigrisdata_v1_DeleteProjectResponse,
  },
  // This API returns information related to the project along with all the collections inside the project.
// This can be used to retrieve the size of the project or to retrieve schemas, branches and the size of all the collections present in this project.
describeDatabase: {
    path: '/tigrisdata.v1.Tigris/DescribeDatabase',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.DescribeDatabaseRequest,
    responseType: server_v1_api_pb.DescribeDatabaseResponse,
    requestSerialize: serialize_tigrisdata_v1_DescribeDatabaseRequest,
    requestDeserialize: deserialize_tigrisdata_v1_DescribeDatabaseRequest,
    responseSerialize: serialize_tigrisdata_v1_DescribeDatabaseResponse,
    responseDeserialize: deserialize_tigrisdata_v1_DescribeDatabaseResponse,
  },
  // Creates a new database branch, if not already existing.
createBranch: {
    path: '/tigrisdata.v1.Tigris/CreateBranch',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.CreateBranchRequest,
    responseType: server_v1_api_pb.CreateBranchResponse,
    requestSerialize: serialize_tigrisdata_v1_CreateBranchRequest,
    requestDeserialize: deserialize_tigrisdata_v1_CreateBranchRequest,
    responseSerialize: serialize_tigrisdata_v1_CreateBranchResponse,
    responseDeserialize: deserialize_tigrisdata_v1_CreateBranchResponse,
  },
  // Deletes a database branch, if exists.
// Throws 400 Bad Request if "main" branch is being deleted
deleteBranch: {
    path: '/tigrisdata.v1.Tigris/DeleteBranch',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.DeleteBranchRequest,
    responseType: server_v1_api_pb.DeleteBranchResponse,
    requestSerialize: serialize_tigrisdata_v1_DeleteBranchRequest,
    requestDeserialize: deserialize_tigrisdata_v1_DeleteBranchRequest,
    responseSerialize: serialize_tigrisdata_v1_DeleteBranchResponse,
    responseDeserialize: deserialize_tigrisdata_v1_DeleteBranchResponse,
  },
  // List database branches
listBranches: {
    path: '/tigrisdata.v1.Tigris/ListBranches',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.ListBranchesRequest,
    responseType: server_v1_api_pb.ListBranchesResponse,
    requestSerialize: serialize_tigrisdata_v1_ListBranchesRequest,
    requestDeserialize: deserialize_tigrisdata_v1_ListBranchesRequest,
    responseSerialize: serialize_tigrisdata_v1_ListBranchesResponse,
    responseDeserialize: deserialize_tigrisdata_v1_ListBranchesResponse,
  },
  // Returns the information related to the collection. This can be used to retrieve the schema or size of the collection.
describeCollection: {
    path: '/tigrisdata.v1.Tigris/DescribeCollection',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.DescribeCollectionRequest,
    responseType: server_v1_api_pb.DescribeCollectionResponse,
    requestSerialize: serialize_tigrisdata_v1_DescribeCollectionRequest,
    requestDeserialize: deserialize_tigrisdata_v1_DescribeCollectionRequest,
    responseSerialize: serialize_tigrisdata_v1_DescribeCollectionResponse,
    responseDeserialize: deserialize_tigrisdata_v1_DescribeCollectionResponse,
  },
  // Create an app key.
createAppKey: {
    path: '/tigrisdata.v1.Tigris/CreateAppKey',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.CreateAppKeyRequest,
    responseType: server_v1_api_pb.CreateAppKeyResponse,
    requestSerialize: serialize_tigrisdata_v1_CreateAppKeyRequest,
    requestDeserialize: deserialize_tigrisdata_v1_CreateAppKeyRequest,
    responseSerialize: serialize_tigrisdata_v1_CreateAppKeyResponse,
    responseDeserialize: deserialize_tigrisdata_v1_CreateAppKeyResponse,
  },
  // Update the description of an app key.
updateAppKey: {
    path: '/tigrisdata.v1.Tigris/UpdateAppKey',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.UpdateAppKeyRequest,
    responseType: server_v1_api_pb.UpdateAppKeyResponse,
    requestSerialize: serialize_tigrisdata_v1_UpdateAppKeyRequest,
    requestDeserialize: deserialize_tigrisdata_v1_UpdateAppKeyRequest,
    responseSerialize: serialize_tigrisdata_v1_UpdateAppKeyResponse,
    responseDeserialize: deserialize_tigrisdata_v1_UpdateAppKeyResponse,
  },
  // Delete an app key.
deleteAppKey: {
    path: '/tigrisdata.v1.Tigris/DeleteAppKey',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.DeleteAppKeyRequest,
    responseType: server_v1_api_pb.DeleteAppKeyResponse,
    requestSerialize: serialize_tigrisdata_v1_DeleteAppKeyRequest,
    requestDeserialize: deserialize_tigrisdata_v1_DeleteAppKeyRequest,
    responseSerialize: serialize_tigrisdata_v1_DeleteAppKeyResponse,
    responseDeserialize: deserialize_tigrisdata_v1_DeleteAppKeyResponse,
  },
  // Lists all app keys visible to requesting actor.
listAppKeys: {
    path: '/tigrisdata.v1.Tigris/ListAppKeys',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.ListAppKeysRequest,
    responseType: server_v1_api_pb.ListAppKeysResponse,
    requestSerialize: serialize_tigrisdata_v1_ListAppKeysRequest,
    requestDeserialize: deserialize_tigrisdata_v1_ListAppKeysRequest,
    responseSerialize: serialize_tigrisdata_v1_ListAppKeysResponse,
    responseDeserialize: deserialize_tigrisdata_v1_ListAppKeysResponse,
  },
  // Endpoint is used to rotate the secret for the app key.
rotateAppKeySecret: {
    path: '/tigrisdata.v1.Tigris/RotateAppKeySecret',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_api_pb.RotateAppKeyRequest,
    responseType: server_v1_api_pb.RotateAppKeyResponse,
    requestSerialize: serialize_tigrisdata_v1_RotateAppKeyRequest,
    requestDeserialize: deserialize_tigrisdata_v1_RotateAppKeyRequest,
    responseSerialize: serialize_tigrisdata_v1_RotateAppKeyResponse,
    responseDeserialize: deserialize_tigrisdata_v1_RotateAppKeyResponse,
  },
};

exports.TigrisClient = grpc.makeGenericClientConstructor(TigrisService);
