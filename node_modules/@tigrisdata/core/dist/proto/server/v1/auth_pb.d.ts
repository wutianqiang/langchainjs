// package: tigrisdata.auth.v1
// file: server/v1/auth.proto

/* tslint:disable */
/* eslint-disable */

import * as jspb from "google-protobuf";
import * as openapiv3_annotations_pb from "../../openapiv3/annotations_pb";

export class GetAccessTokenRequest extends jspb.Message { 
    getGrantType(): GrantType;
    setGrantType(value: GrantType): GetAccessTokenRequest;
    getRefreshToken(): string;
    setRefreshToken(value: string): GetAccessTokenRequest;
    getClientId(): string;
    setClientId(value: string): GetAccessTokenRequest;
    getClientSecret(): string;
    setClientSecret(value: string): GetAccessTokenRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GetAccessTokenRequest.AsObject;
    static toObject(includeInstance: boolean, msg: GetAccessTokenRequest): GetAccessTokenRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GetAccessTokenRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GetAccessTokenRequest;
    static deserializeBinaryFromReader(message: GetAccessTokenRequest, reader: jspb.BinaryReader): GetAccessTokenRequest;
}

export namespace GetAccessTokenRequest {
    export type AsObject = {
        grantType: GrantType,
        refreshToken: string,
        clientId: string,
        clientSecret: string,
    }
}

export class GetAccessTokenResponse extends jspb.Message { 
    getAccessToken(): string;
    setAccessToken(value: string): GetAccessTokenResponse;
    getRefreshToken(): string;
    setRefreshToken(value: string): GetAccessTokenResponse;
    getExpiresIn(): number;
    setExpiresIn(value: number): GetAccessTokenResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GetAccessTokenResponse.AsObject;
    static toObject(includeInstance: boolean, msg: GetAccessTokenResponse): GetAccessTokenResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GetAccessTokenResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GetAccessTokenResponse;
    static deserializeBinaryFromReader(message: GetAccessTokenResponse, reader: jspb.BinaryReader): GetAccessTokenResponse;
}

export namespace GetAccessTokenResponse {
    export type AsObject = {
        accessToken: string,
        refreshToken: string,
        expiresIn: number,
    }
}

export class InvitationInfo extends jspb.Message { 
    getEmail(): string;
    setEmail(value: string): InvitationInfo;
    getRole(): string;
    setRole(value: string): InvitationInfo;
    getInvitationSentByName(): string;
    setInvitationSentByName(value: string): InvitationInfo;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): InvitationInfo.AsObject;
    static toObject(includeInstance: boolean, msg: InvitationInfo): InvitationInfo.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: InvitationInfo, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): InvitationInfo;
    static deserializeBinaryFromReader(message: InvitationInfo, reader: jspb.BinaryReader): InvitationInfo;
}

export namespace InvitationInfo {
    export type AsObject = {
        email: string,
        role: string,
        invitationSentByName: string,
    }
}

export class CreateInvitationsRequest extends jspb.Message { 
    clearInvitationsList(): void;
    getInvitationsList(): Array<InvitationInfo>;
    setInvitationsList(value: Array<InvitationInfo>): CreateInvitationsRequest;
    addInvitations(value?: InvitationInfo, index?: number): InvitationInfo;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateInvitationsRequest.AsObject;
    static toObject(includeInstance: boolean, msg: CreateInvitationsRequest): CreateInvitationsRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateInvitationsRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateInvitationsRequest;
    static deserializeBinaryFromReader(message: CreateInvitationsRequest, reader: jspb.BinaryReader): CreateInvitationsRequest;
}

export namespace CreateInvitationsRequest {
    export type AsObject = {
        invitationsList: Array<InvitationInfo.AsObject>,
    }
}

export class CreateInvitationsResponse extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateInvitationsResponse.AsObject;
    static toObject(includeInstance: boolean, msg: CreateInvitationsResponse): CreateInvitationsResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateInvitationsResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateInvitationsResponse;
    static deserializeBinaryFromReader(message: CreateInvitationsResponse, reader: jspb.BinaryReader): CreateInvitationsResponse;
}

export namespace CreateInvitationsResponse {
    export type AsObject = {
    }
}

export class DeleteInvitationsRequest extends jspb.Message { 
    getEmail(): string;
    setEmail(value: string): DeleteInvitationsRequest;

    hasStatus(): boolean;
    clearStatus(): void;
    getStatus(): string | undefined;
    setStatus(value: string): DeleteInvitationsRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DeleteInvitationsRequest.AsObject;
    static toObject(includeInstance: boolean, msg: DeleteInvitationsRequest): DeleteInvitationsRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DeleteInvitationsRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DeleteInvitationsRequest;
    static deserializeBinaryFromReader(message: DeleteInvitationsRequest, reader: jspb.BinaryReader): DeleteInvitationsRequest;
}

export namespace DeleteInvitationsRequest {
    export type AsObject = {
        email: string,
        status?: string,
    }
}

export class DeleteInvitationsResponse extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DeleteInvitationsResponse.AsObject;
    static toObject(includeInstance: boolean, msg: DeleteInvitationsResponse): DeleteInvitationsResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DeleteInvitationsResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DeleteInvitationsResponse;
    static deserializeBinaryFromReader(message: DeleteInvitationsResponse, reader: jspb.BinaryReader): DeleteInvitationsResponse;
}

export namespace DeleteInvitationsResponse {
    export type AsObject = {
    }
}

export class Invitation extends jspb.Message { 
    getEmail(): string;
    setEmail(value: string): Invitation;
    getRole(): string;
    setRole(value: string): Invitation;
    getStatus(): string;
    setStatus(value: string): Invitation;
    getTigrisNamespace(): string;
    setTigrisNamespace(value: string): Invitation;
    getTigrisNamespaceName(): string;
    setTigrisNamespaceName(value: string): Invitation;
    getCreatedBy(): string;
    setCreatedBy(value: string): Invitation;
    getCreatedByName(): string;
    setCreatedByName(value: string): Invitation;
    getExpirationTime(): number;
    setExpirationTime(value: number): Invitation;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Invitation.AsObject;
    static toObject(includeInstance: boolean, msg: Invitation): Invitation.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Invitation, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Invitation;
    static deserializeBinaryFromReader(message: Invitation, reader: jspb.BinaryReader): Invitation;
}

export namespace Invitation {
    export type AsObject = {
        email: string,
        role: string,
        status: string,
        tigrisNamespace: string,
        tigrisNamespaceName: string,
        createdBy: string,
        createdByName: string,
        expirationTime: number,
    }
}

export class ListInvitationsRequest extends jspb.Message { 

    hasStatus(): boolean;
    clearStatus(): void;
    getStatus(): string | undefined;
    setStatus(value: string): ListInvitationsRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListInvitationsRequest.AsObject;
    static toObject(includeInstance: boolean, msg: ListInvitationsRequest): ListInvitationsRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListInvitationsRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListInvitationsRequest;
    static deserializeBinaryFromReader(message: ListInvitationsRequest, reader: jspb.BinaryReader): ListInvitationsRequest;
}

export namespace ListInvitationsRequest {
    export type AsObject = {
        status?: string,
    }
}

export class ListInvitationsResponse extends jspb.Message { 
    clearInvitationsList(): void;
    getInvitationsList(): Array<Invitation>;
    setInvitationsList(value: Array<Invitation>): ListInvitationsResponse;
    addInvitations(value?: Invitation, index?: number): Invitation;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListInvitationsResponse.AsObject;
    static toObject(includeInstance: boolean, msg: ListInvitationsResponse): ListInvitationsResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListInvitationsResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListInvitationsResponse;
    static deserializeBinaryFromReader(message: ListInvitationsResponse, reader: jspb.BinaryReader): ListInvitationsResponse;
}

export namespace ListInvitationsResponse {
    export type AsObject = {
        invitationsList: Array<Invitation.AsObject>,
    }
}

export class VerifyInvitationRequest extends jspb.Message { 
    getEmail(): string;
    setEmail(value: string): VerifyInvitationRequest;
    getCode(): string;
    setCode(value: string): VerifyInvitationRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): VerifyInvitationRequest.AsObject;
    static toObject(includeInstance: boolean, msg: VerifyInvitationRequest): VerifyInvitationRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: VerifyInvitationRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): VerifyInvitationRequest;
    static deserializeBinaryFromReader(message: VerifyInvitationRequest, reader: jspb.BinaryReader): VerifyInvitationRequest;
}

export namespace VerifyInvitationRequest {
    export type AsObject = {
        email: string,
        code: string,
    }
}

export class VerifyInvitationResponse extends jspb.Message { 
    getTigrisNamespace(): string;
    setTigrisNamespace(value: string): VerifyInvitationResponse;
    getTigrisNamespaceName(): string;
    setTigrisNamespaceName(value: string): VerifyInvitationResponse;
    getRole(): string;
    setRole(value: string): VerifyInvitationResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): VerifyInvitationResponse.AsObject;
    static toObject(includeInstance: boolean, msg: VerifyInvitationResponse): VerifyInvitationResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: VerifyInvitationResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): VerifyInvitationResponse;
    static deserializeBinaryFromReader(message: VerifyInvitationResponse, reader: jspb.BinaryReader): VerifyInvitationResponse;
}

export namespace VerifyInvitationResponse {
    export type AsObject = {
        tigrisNamespace: string,
        tigrisNamespaceName: string,
        role: string,
    }
}

export class ListUsersRequest extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListUsersRequest.AsObject;
    static toObject(includeInstance: boolean, msg: ListUsersRequest): ListUsersRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListUsersRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListUsersRequest;
    static deserializeBinaryFromReader(message: ListUsersRequest, reader: jspb.BinaryReader): ListUsersRequest;
}

export namespace ListUsersRequest {
    export type AsObject = {
    }
}

export class ListUsersResponse extends jspb.Message { 
    clearUsersList(): void;
    getUsersList(): Array<User>;
    setUsersList(value: Array<User>): ListUsersResponse;
    addUsers(value?: User, index?: number): User;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListUsersResponse.AsObject;
    static toObject(includeInstance: boolean, msg: ListUsersResponse): ListUsersResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListUsersResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListUsersResponse;
    static deserializeBinaryFromReader(message: ListUsersResponse, reader: jspb.BinaryReader): ListUsersResponse;
}

export namespace ListUsersResponse {
    export type AsObject = {
        usersList: Array<User.AsObject>,
    }
}

export class User extends jspb.Message { 
    getEmail(): string;
    setEmail(value: string): User;
    getName(): string;
    setName(value: string): User;
    getCreatedAt(): number;
    setCreatedAt(value: number): User;
    getPicture(): string;
    setPicture(value: string): User;
    getRole(): string;
    setRole(value: string): User;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): User.AsObject;
    static toObject(includeInstance: boolean, msg: User): User.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: User, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): User;
    static deserializeBinaryFromReader(message: User, reader: jspb.BinaryReader): User;
}

export namespace User {
    export type AsObject = {
        email: string,
        name: string,
        createdAt: number,
        picture: string,
        role: string,
    }
}

export enum GrantType {
    REFRESH_TOKEN = 0,
    CLIENT_CREDENTIALS = 1,
}
