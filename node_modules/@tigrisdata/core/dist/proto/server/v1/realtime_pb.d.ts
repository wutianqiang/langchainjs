// package: tigrisdata.realtime.v1
// file: server/v1/realtime.proto

/* tslint:disable */
/* eslint-disable */

import * as jspb from "google-protobuf";
import * as openapiv3_annotations_pb from "../../openapiv3/annotations_pb";

export class RealTimeMessage extends jspb.Message { 
    getEventType(): EventType;
    setEventType(value: EventType): RealTimeMessage;
    getEvent(): Uint8Array | string;
    getEvent_asU8(): Uint8Array;
    getEvent_asB64(): string;
    setEvent(value: Uint8Array | string): RealTimeMessage;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): RealTimeMessage.AsObject;
    static toObject(includeInstance: boolean, msg: RealTimeMessage): RealTimeMessage.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: RealTimeMessage, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): RealTimeMessage;
    static deserializeBinaryFromReader(message: RealTimeMessage, reader: jspb.BinaryReader): RealTimeMessage;
}

export namespace RealTimeMessage {
    export type AsObject = {
        eventType: EventType,
        event: Uint8Array | string,
    }
}

export class ConnectedEvent extends jspb.Message { 
    getSessionId(): string;
    setSessionId(value: string): ConnectedEvent;
    getSocketId(): string;
    setSocketId(value: string): ConnectedEvent;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ConnectedEvent.AsObject;
    static toObject(includeInstance: boolean, msg: ConnectedEvent): ConnectedEvent.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ConnectedEvent, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ConnectedEvent;
    static deserializeBinaryFromReader(message: ConnectedEvent, reader: jspb.BinaryReader): ConnectedEvent;
}

export namespace ConnectedEvent {
    export type AsObject = {
        sessionId: string,
        socketId: string,
    }
}

export class HeartbeatEvent extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): HeartbeatEvent.AsObject;
    static toObject(includeInstance: boolean, msg: HeartbeatEvent): HeartbeatEvent.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: HeartbeatEvent, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): HeartbeatEvent;
    static deserializeBinaryFromReader(message: HeartbeatEvent, reader: jspb.BinaryReader): HeartbeatEvent;
}

export namespace HeartbeatEvent {
    export type AsObject = {
    }
}

export class ErrorEvent extends jspb.Message { 
    getCode(): number;
    setCode(value: number): ErrorEvent;
    getMessage(): string;
    setMessage(value: string): ErrorEvent;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ErrorEvent.AsObject;
    static toObject(includeInstance: boolean, msg: ErrorEvent): ErrorEvent.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ErrorEvent, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ErrorEvent;
    static deserializeBinaryFromReader(message: ErrorEvent, reader: jspb.BinaryReader): ErrorEvent;
}

export namespace ErrorEvent {
    export type AsObject = {
        code: number,
        message: string,
    }
}

export class AuthEvent extends jspb.Message { 
    getAccessToken(): Uint8Array | string;
    getAccessToken_asU8(): Uint8Array;
    getAccessToken_asB64(): string;
    setAccessToken(value: Uint8Array | string): AuthEvent;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): AuthEvent.AsObject;
    static toObject(includeInstance: boolean, msg: AuthEvent): AuthEvent.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: AuthEvent, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): AuthEvent;
    static deserializeBinaryFromReader(message: AuthEvent, reader: jspb.BinaryReader): AuthEvent;
}

export namespace AuthEvent {
    export type AsObject = {
        accessToken: Uint8Array | string,
    }
}

export class DisconnectEvent extends jspb.Message { 
    getChannel(): string;
    setChannel(value: string): DisconnectEvent;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DisconnectEvent.AsObject;
    static toObject(includeInstance: boolean, msg: DisconnectEvent): DisconnectEvent.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DisconnectEvent, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DisconnectEvent;
    static deserializeBinaryFromReader(message: DisconnectEvent, reader: jspb.BinaryReader): DisconnectEvent;
}

export namespace DisconnectEvent {
    export type AsObject = {
        channel: string,
    }
}

export class UnsubscribeEvent extends jspb.Message { 
    getChannel(): string;
    setChannel(value: string): UnsubscribeEvent;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): UnsubscribeEvent.AsObject;
    static toObject(includeInstance: boolean, msg: UnsubscribeEvent): UnsubscribeEvent.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: UnsubscribeEvent, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): UnsubscribeEvent;
    static deserializeBinaryFromReader(message: UnsubscribeEvent, reader: jspb.BinaryReader): UnsubscribeEvent;
}

export namespace UnsubscribeEvent {
    export type AsObject = {
        channel: string,
    }
}

export class AttachEvent extends jspb.Message { 
    getChannel(): string;
    setChannel(value: string): AttachEvent;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): AttachEvent.AsObject;
    static toObject(includeInstance: boolean, msg: AttachEvent): AttachEvent.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: AttachEvent, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): AttachEvent;
    static deserializeBinaryFromReader(message: AttachEvent, reader: jspb.BinaryReader): AttachEvent;
}

export namespace AttachEvent {
    export type AsObject = {
        channel: string,
    }
}

export class DetachEvent extends jspb.Message { 
    getChannel(): string;
    setChannel(value: string): DetachEvent;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DetachEvent.AsObject;
    static toObject(includeInstance: boolean, msg: DetachEvent): DetachEvent.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DetachEvent, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DetachEvent;
    static deserializeBinaryFromReader(message: DetachEvent, reader: jspb.BinaryReader): DetachEvent;
}

export namespace DetachEvent {
    export type AsObject = {
        channel: string,
    }
}

export class SubscribeEvent extends jspb.Message { 
    getChannel(): string;
    setChannel(value: string): SubscribeEvent;
    getPosition(): string;
    setPosition(value: string): SubscribeEvent;
    getName(): string;
    setName(value: string): SubscribeEvent;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): SubscribeEvent.AsObject;
    static toObject(includeInstance: boolean, msg: SubscribeEvent): SubscribeEvent.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: SubscribeEvent, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): SubscribeEvent;
    static deserializeBinaryFromReader(message: SubscribeEvent, reader: jspb.BinaryReader): SubscribeEvent;
}

export namespace SubscribeEvent {
    export type AsObject = {
        channel: string,
        position: string,
        name: string,
    }
}

export class SubscribedEvent extends jspb.Message { 
    getChannel(): string;
    setChannel(value: string): SubscribedEvent;
    getPosition(): string;
    setPosition(value: string): SubscribedEvent;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): SubscribedEvent.AsObject;
    static toObject(includeInstance: boolean, msg: SubscribedEvent): SubscribedEvent.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: SubscribedEvent, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): SubscribedEvent;
    static deserializeBinaryFromReader(message: SubscribedEvent, reader: jspb.BinaryReader): SubscribedEvent;
}

export namespace SubscribedEvent {
    export type AsObject = {
        channel: string,
        position: string,
    }
}

export class MessageEvent extends jspb.Message { 
    getId(): string;
    setId(value: string): MessageEvent;
    getName(): string;
    setName(value: string): MessageEvent;
    getChannel(): string;
    setChannel(value: string): MessageEvent;
    getData(): Uint8Array | string;
    getData_asU8(): Uint8Array;
    getData_asB64(): string;
    setData(value: Uint8Array | string): MessageEvent;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): MessageEvent.AsObject;
    static toObject(includeInstance: boolean, msg: MessageEvent): MessageEvent.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: MessageEvent, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): MessageEvent;
    static deserializeBinaryFromReader(message: MessageEvent, reader: jspb.BinaryReader): MessageEvent;
}

export namespace MessageEvent {
    export type AsObject = {
        id: string,
        name: string,
        channel: string,
        data: Uint8Array | string,
    }
}

export class PresenceEvent extends jspb.Message { 
    getChannel(): string;
    setChannel(value: string): PresenceEvent;
    getAction(): PresenceActions;
    setAction(value: PresenceActions): PresenceEvent;
    getData(): Uint8Array | string;
    getData_asU8(): Uint8Array;
    getData_asB64(): string;
    setData(value: Uint8Array | string): PresenceEvent;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): PresenceEvent.AsObject;
    static toObject(includeInstance: boolean, msg: PresenceEvent): PresenceEvent.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: PresenceEvent, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): PresenceEvent;
    static deserializeBinaryFromReader(message: PresenceEvent, reader: jspb.BinaryReader): PresenceEvent;
}

export namespace PresenceEvent {
    export type AsObject = {
        channel: string,
        action: PresenceActions,
        data: Uint8Array | string,
    }
}

export class PresenceMemberEvent extends jspb.Message { 
    getChannel(): string;
    setChannel(value: string): PresenceMemberEvent;
    clearPresenceList(): void;
    getPresenceList(): Array<PresenceEvent>;
    setPresenceList(value: Array<PresenceEvent>): PresenceMemberEvent;
    addPresence(value?: PresenceEvent, index?: number): PresenceEvent;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): PresenceMemberEvent.AsObject;
    static toObject(includeInstance: boolean, msg: PresenceMemberEvent): PresenceMemberEvent.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: PresenceMemberEvent, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): PresenceMemberEvent;
    static deserializeBinaryFromReader(message: PresenceMemberEvent, reader: jspb.BinaryReader): PresenceMemberEvent;
}

export namespace PresenceMemberEvent {
    export type AsObject = {
        channel: string,
        presenceList: Array<PresenceEvent.AsObject>,
    }
}

export class PresenceRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): PresenceRequest;
    getChannel(): string;
    setChannel(value: string): PresenceRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): PresenceRequest.AsObject;
    static toObject(includeInstance: boolean, msg: PresenceRequest): PresenceRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: PresenceRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): PresenceRequest;
    static deserializeBinaryFromReader(message: PresenceRequest, reader: jspb.BinaryReader): PresenceRequest;
}

export namespace PresenceRequest {
    export type AsObject = {
        project: string,
        channel: string,
    }
}

export class PresenceResponse extends jspb.Message { 
    getResponse(): Uint8Array | string;
    getResponse_asU8(): Uint8Array;
    getResponse_asB64(): string;
    setResponse(value: Uint8Array | string): PresenceResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): PresenceResponse.AsObject;
    static toObject(includeInstance: boolean, msg: PresenceResponse): PresenceResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: PresenceResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): PresenceResponse;
    static deserializeBinaryFromReader(message: PresenceResponse, reader: jspb.BinaryReader): PresenceResponse;
}

export namespace PresenceResponse {
    export type AsObject = {
        response: Uint8Array | string,
    }
}

export class GetRTChannelRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): GetRTChannelRequest;
    getChannel(): string;
    setChannel(value: string): GetRTChannelRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GetRTChannelRequest.AsObject;
    static toObject(includeInstance: boolean, msg: GetRTChannelRequest): GetRTChannelRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GetRTChannelRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GetRTChannelRequest;
    static deserializeBinaryFromReader(message: GetRTChannelRequest, reader: jspb.BinaryReader): GetRTChannelRequest;
}

export namespace GetRTChannelRequest {
    export type AsObject = {
        project: string,
        channel: string,
    }
}

export class ChannelMetadata extends jspb.Message { 
    getChannel(): string;
    setChannel(value: string): ChannelMetadata;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ChannelMetadata.AsObject;
    static toObject(includeInstance: boolean, msg: ChannelMetadata): ChannelMetadata.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ChannelMetadata, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ChannelMetadata;
    static deserializeBinaryFromReader(message: ChannelMetadata, reader: jspb.BinaryReader): ChannelMetadata;
}

export namespace ChannelMetadata {
    export type AsObject = {
        channel: string,
    }
}

export class GetRTChannelResponse extends jspb.Message { 
    getChannel(): string;
    setChannel(value: string): GetRTChannelResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GetRTChannelResponse.AsObject;
    static toObject(includeInstance: boolean, msg: GetRTChannelResponse): GetRTChannelResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GetRTChannelResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GetRTChannelResponse;
    static deserializeBinaryFromReader(message: GetRTChannelResponse, reader: jspb.BinaryReader): GetRTChannelResponse;
}

export namespace GetRTChannelResponse {
    export type AsObject = {
        channel: string,
    }
}

export class GetRTChannelsRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): GetRTChannelsRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GetRTChannelsRequest.AsObject;
    static toObject(includeInstance: boolean, msg: GetRTChannelsRequest): GetRTChannelsRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GetRTChannelsRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GetRTChannelsRequest;
    static deserializeBinaryFromReader(message: GetRTChannelsRequest, reader: jspb.BinaryReader): GetRTChannelsRequest;
}

export namespace GetRTChannelsRequest {
    export type AsObject = {
        project: string,
    }
}

export class GetRTChannelsResponse extends jspb.Message { 
    clearChannelsList(): void;
    getChannelsList(): Array<ChannelMetadata>;
    setChannelsList(value: Array<ChannelMetadata>): GetRTChannelsResponse;
    addChannels(value?: ChannelMetadata, index?: number): ChannelMetadata;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GetRTChannelsResponse.AsObject;
    static toObject(includeInstance: boolean, msg: GetRTChannelsResponse): GetRTChannelsResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GetRTChannelsResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GetRTChannelsResponse;
    static deserializeBinaryFromReader(message: GetRTChannelsResponse, reader: jspb.BinaryReader): GetRTChannelsResponse;
}

export namespace GetRTChannelsResponse {
    export type AsObject = {
        channelsList: Array<ChannelMetadata.AsObject>,
    }
}

export class ReadMessagesRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): ReadMessagesRequest;
    getChannel(): string;
    setChannel(value: string): ReadMessagesRequest;
    getSessionId(): string;
    setSessionId(value: string): ReadMessagesRequest;
    getSocketId(): string;
    setSocketId(value: string): ReadMessagesRequest;
    getEvent(): string;
    setEvent(value: string): ReadMessagesRequest;

    hasStart(): boolean;
    clearStart(): void;
    getStart(): string | undefined;
    setStart(value: string): ReadMessagesRequest;

    hasEnd(): boolean;
    clearEnd(): void;
    getEnd(): string | undefined;
    setEnd(value: string): ReadMessagesRequest;

    hasLimit(): boolean;
    clearLimit(): void;
    getLimit(): number | undefined;
    setLimit(value: number): ReadMessagesRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ReadMessagesRequest.AsObject;
    static toObject(includeInstance: boolean, msg: ReadMessagesRequest): ReadMessagesRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ReadMessagesRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ReadMessagesRequest;
    static deserializeBinaryFromReader(message: ReadMessagesRequest, reader: jspb.BinaryReader): ReadMessagesRequest;
}

export namespace ReadMessagesRequest {
    export type AsObject = {
        project: string,
        channel: string,
        sessionId: string,
        socketId: string,
        event: string,
        start?: string,
        end?: string,
        limit?: number,
    }
}

export class ReadMessagesResponse extends jspb.Message { 

    hasMessage(): boolean;
    clearMessage(): void;
    getMessage(): Message | undefined;
    setMessage(value?: Message): ReadMessagesResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ReadMessagesResponse.AsObject;
    static toObject(includeInstance: boolean, msg: ReadMessagesResponse): ReadMessagesResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ReadMessagesResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ReadMessagesResponse;
    static deserializeBinaryFromReader(message: ReadMessagesResponse, reader: jspb.BinaryReader): ReadMessagesResponse;
}

export namespace ReadMessagesResponse {
    export type AsObject = {
        message?: Message.AsObject,
    }
}

export class Message extends jspb.Message { 

    hasId(): boolean;
    clearId(): void;
    getId(): string | undefined;
    setId(value: string): Message;
    getName(): string;
    setName(value: string): Message;
    getSequence(): string;
    setSequence(value: string): Message;
    getData(): Uint8Array | string;
    getData_asU8(): Uint8Array;
    getData_asB64(): string;
    setData(value: Uint8Array | string): Message;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Message.AsObject;
    static toObject(includeInstance: boolean, msg: Message): Message.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Message, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Message;
    static deserializeBinaryFromReader(message: Message, reader: jspb.BinaryReader): Message;
}

export namespace Message {
    export type AsObject = {
        id?: string,
        name: string,
        sequence: string,
        data: Uint8Array | string,
    }
}

export class MessagesRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): MessagesRequest;
    getChannel(): string;
    setChannel(value: string): MessagesRequest;
    clearMessagesList(): void;
    getMessagesList(): Array<Message>;
    setMessagesList(value: Array<Message>): MessagesRequest;
    addMessages(value?: Message, index?: number): Message;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): MessagesRequest.AsObject;
    static toObject(includeInstance: boolean, msg: MessagesRequest): MessagesRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: MessagesRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): MessagesRequest;
    static deserializeBinaryFromReader(message: MessagesRequest, reader: jspb.BinaryReader): MessagesRequest;
}

export namespace MessagesRequest {
    export type AsObject = {
        project: string,
        channel: string,
        messagesList: Array<Message.AsObject>,
    }
}

export class MessagesResponse extends jspb.Message { 
    clearIdsList(): void;
    getIdsList(): Array<string>;
    setIdsList(value: Array<string>): MessagesResponse;
    addIds(value: string, index?: number): string;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): MessagesResponse.AsObject;
    static toObject(includeInstance: boolean, msg: MessagesResponse): MessagesResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: MessagesResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): MessagesResponse;
    static deserializeBinaryFromReader(message: MessagesResponse, reader: jspb.BinaryReader): MessagesResponse;
}

export namespace MessagesResponse {
    export type AsObject = {
        idsList: Array<string>,
    }
}

export class UnSubscribeRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): UnSubscribeRequest;
    getChannel(): string;
    setChannel(value: string): UnSubscribeRequest;
    getDeviceId(): string;
    setDeviceId(value: string): UnSubscribeRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): UnSubscribeRequest.AsObject;
    static toObject(includeInstance: boolean, msg: UnSubscribeRequest): UnSubscribeRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: UnSubscribeRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): UnSubscribeRequest;
    static deserializeBinaryFromReader(message: UnSubscribeRequest, reader: jspb.BinaryReader): UnSubscribeRequest;
}

export namespace UnSubscribeRequest {
    export type AsObject = {
        project: string,
        channel: string,
        deviceId: string,
    }
}

export class UnSubscribeResponse extends jspb.Message { 
    getStatus(): string;
    setStatus(value: string): UnSubscribeResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): UnSubscribeResponse.AsObject;
    static toObject(includeInstance: boolean, msg: UnSubscribeResponse): UnSubscribeResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: UnSubscribeResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): UnSubscribeResponse;
    static deserializeBinaryFromReader(message: UnSubscribeResponse, reader: jspb.BinaryReader): UnSubscribeResponse;
}

export namespace UnSubscribeResponse {
    export type AsObject = {
        status: string,
    }
}

export class ListSubscriptionRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): ListSubscriptionRequest;
    getChannel(): string;
    setChannel(value: string): ListSubscriptionRequest;
    getPageSize(): number;
    setPageSize(value: number): ListSubscriptionRequest;
    getPage(): number;
    setPage(value: number): ListSubscriptionRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListSubscriptionRequest.AsObject;
    static toObject(includeInstance: boolean, msg: ListSubscriptionRequest): ListSubscriptionRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListSubscriptionRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListSubscriptionRequest;
    static deserializeBinaryFromReader(message: ListSubscriptionRequest, reader: jspb.BinaryReader): ListSubscriptionRequest;
}

export namespace ListSubscriptionRequest {
    export type AsObject = {
        project: string,
        channel: string,
        pageSize: number,
        page: number,
    }
}

export class ListSubscriptionResponse extends jspb.Message { 
    clearDevicesList(): void;
    getDevicesList(): Array<string>;
    setDevicesList(value: Array<string>): ListSubscriptionResponse;
    addDevices(value: string, index?: number): string;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListSubscriptionResponse.AsObject;
    static toObject(includeInstance: boolean, msg: ListSubscriptionResponse): ListSubscriptionResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListSubscriptionResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListSubscriptionResponse;
    static deserializeBinaryFromReader(message: ListSubscriptionResponse, reader: jspb.BinaryReader): ListSubscriptionResponse;
}

export namespace ListSubscriptionResponse {
    export type AsObject = {
        devicesList: Array<string>,
    }
}

export enum EventType {
    ACK = 0,
    AUTH = 1,
    ERROR = 2,
    MESSAGE = 3,
    SUBSCRIBE = 4,
    PRESENCE = 5,
    PRESENCE_MEMBER = 6,
    SUBSCRIBED = 7,
    UNSUBSCRIBE = 8,
    HEARTBEAT = 9,
    CONNECTED = 11,
    DISCONNECT = 12,
    DISCONNECTED = 13,
    ATTACH = 14,
    DETACH = 15,
}

export enum PresenceActions {
    PRESENT = 0,
    ENTER = 1,
    LEAVE = 2,
    UPDATE = 3,
}
