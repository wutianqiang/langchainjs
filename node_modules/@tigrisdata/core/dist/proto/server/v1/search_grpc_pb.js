// GENERATED CODE -- DO NOT EDIT!

// Original file comments:
// Copyright 2022-2023 Tigris Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
'use strict';
var grpc = require('@grpc/grpc-js');
var server_v1_search_pb = require('../../server/v1/search_pb.js');
var google_api_annotations_pb = require('../../google/api/annotations_pb.js');
var openapiv3_annotations_pb = require('../../openapiv3/annotations_pb.js');
var server_v1_observability_pb = require('../../server/v1/observability_pb.js');
var server_v1_api_pb = require('../../server/v1/api_pb.js');

function serialize_tigrisdata_search_v1_CreateByIdRequest(arg) {
  if (!(arg instanceof server_v1_search_pb.CreateByIdRequest)) {
    throw new Error('Expected argument of type tigrisdata.search.v1.CreateByIdRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_search_v1_CreateByIdRequest(buffer_arg) {
  return server_v1_search_pb.CreateByIdRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_search_v1_CreateByIdResponse(arg) {
  if (!(arg instanceof server_v1_search_pb.CreateByIdResponse)) {
    throw new Error('Expected argument of type tigrisdata.search.v1.CreateByIdResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_search_v1_CreateByIdResponse(buffer_arg) {
  return server_v1_search_pb.CreateByIdResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_search_v1_CreateDocumentRequest(arg) {
  if (!(arg instanceof server_v1_search_pb.CreateDocumentRequest)) {
    throw new Error('Expected argument of type tigrisdata.search.v1.CreateDocumentRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_search_v1_CreateDocumentRequest(buffer_arg) {
  return server_v1_search_pb.CreateDocumentRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_search_v1_CreateDocumentResponse(arg) {
  if (!(arg instanceof server_v1_search_pb.CreateDocumentResponse)) {
    throw new Error('Expected argument of type tigrisdata.search.v1.CreateDocumentResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_search_v1_CreateDocumentResponse(buffer_arg) {
  return server_v1_search_pb.CreateDocumentResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_search_v1_CreateOrReplaceDocumentRequest(arg) {
  if (!(arg instanceof server_v1_search_pb.CreateOrReplaceDocumentRequest)) {
    throw new Error('Expected argument of type tigrisdata.search.v1.CreateOrReplaceDocumentRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_search_v1_CreateOrReplaceDocumentRequest(buffer_arg) {
  return server_v1_search_pb.CreateOrReplaceDocumentRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_search_v1_CreateOrReplaceDocumentResponse(arg) {
  if (!(arg instanceof server_v1_search_pb.CreateOrReplaceDocumentResponse)) {
    throw new Error('Expected argument of type tigrisdata.search.v1.CreateOrReplaceDocumentResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_search_v1_CreateOrReplaceDocumentResponse(buffer_arg) {
  return server_v1_search_pb.CreateOrReplaceDocumentResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_search_v1_CreateOrUpdateIndexRequest(arg) {
  if (!(arg instanceof server_v1_search_pb.CreateOrUpdateIndexRequest)) {
    throw new Error('Expected argument of type tigrisdata.search.v1.CreateOrUpdateIndexRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_search_v1_CreateOrUpdateIndexRequest(buffer_arg) {
  return server_v1_search_pb.CreateOrUpdateIndexRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_search_v1_CreateOrUpdateIndexResponse(arg) {
  if (!(arg instanceof server_v1_search_pb.CreateOrUpdateIndexResponse)) {
    throw new Error('Expected argument of type tigrisdata.search.v1.CreateOrUpdateIndexResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_search_v1_CreateOrUpdateIndexResponse(buffer_arg) {
  return server_v1_search_pb.CreateOrUpdateIndexResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_search_v1_DeleteByQueryRequest(arg) {
  if (!(arg instanceof server_v1_search_pb.DeleteByQueryRequest)) {
    throw new Error('Expected argument of type tigrisdata.search.v1.DeleteByQueryRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_search_v1_DeleteByQueryRequest(buffer_arg) {
  return server_v1_search_pb.DeleteByQueryRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_search_v1_DeleteByQueryResponse(arg) {
  if (!(arg instanceof server_v1_search_pb.DeleteByQueryResponse)) {
    throw new Error('Expected argument of type tigrisdata.search.v1.DeleteByQueryResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_search_v1_DeleteByQueryResponse(buffer_arg) {
  return server_v1_search_pb.DeleteByQueryResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_search_v1_DeleteDocumentRequest(arg) {
  if (!(arg instanceof server_v1_search_pb.DeleteDocumentRequest)) {
    throw new Error('Expected argument of type tigrisdata.search.v1.DeleteDocumentRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_search_v1_DeleteDocumentRequest(buffer_arg) {
  return server_v1_search_pb.DeleteDocumentRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_search_v1_DeleteDocumentResponse(arg) {
  if (!(arg instanceof server_v1_search_pb.DeleteDocumentResponse)) {
    throw new Error('Expected argument of type tigrisdata.search.v1.DeleteDocumentResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_search_v1_DeleteDocumentResponse(buffer_arg) {
  return server_v1_search_pb.DeleteDocumentResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_search_v1_DeleteIndexRequest(arg) {
  if (!(arg instanceof server_v1_search_pb.DeleteIndexRequest)) {
    throw new Error('Expected argument of type tigrisdata.search.v1.DeleteIndexRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_search_v1_DeleteIndexRequest(buffer_arg) {
  return server_v1_search_pb.DeleteIndexRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_search_v1_DeleteIndexResponse(arg) {
  if (!(arg instanceof server_v1_search_pb.DeleteIndexResponse)) {
    throw new Error('Expected argument of type tigrisdata.search.v1.DeleteIndexResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_search_v1_DeleteIndexResponse(buffer_arg) {
  return server_v1_search_pb.DeleteIndexResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_search_v1_GetDocumentRequest(arg) {
  if (!(arg instanceof server_v1_search_pb.GetDocumentRequest)) {
    throw new Error('Expected argument of type tigrisdata.search.v1.GetDocumentRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_search_v1_GetDocumentRequest(buffer_arg) {
  return server_v1_search_pb.GetDocumentRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_search_v1_GetDocumentResponse(arg) {
  if (!(arg instanceof server_v1_search_pb.GetDocumentResponse)) {
    throw new Error('Expected argument of type tigrisdata.search.v1.GetDocumentResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_search_v1_GetDocumentResponse(buffer_arg) {
  return server_v1_search_pb.GetDocumentResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_search_v1_GetIndexRequest(arg) {
  if (!(arg instanceof server_v1_search_pb.GetIndexRequest)) {
    throw new Error('Expected argument of type tigrisdata.search.v1.GetIndexRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_search_v1_GetIndexRequest(buffer_arg) {
  return server_v1_search_pb.GetIndexRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_search_v1_GetIndexResponse(arg) {
  if (!(arg instanceof server_v1_search_pb.GetIndexResponse)) {
    throw new Error('Expected argument of type tigrisdata.search.v1.GetIndexResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_search_v1_GetIndexResponse(buffer_arg) {
  return server_v1_search_pb.GetIndexResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_search_v1_ListIndexesRequest(arg) {
  if (!(arg instanceof server_v1_search_pb.ListIndexesRequest)) {
    throw new Error('Expected argument of type tigrisdata.search.v1.ListIndexesRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_search_v1_ListIndexesRequest(buffer_arg) {
  return server_v1_search_pb.ListIndexesRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_search_v1_ListIndexesResponse(arg) {
  if (!(arg instanceof server_v1_search_pb.ListIndexesResponse)) {
    throw new Error('Expected argument of type tigrisdata.search.v1.ListIndexesResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_search_v1_ListIndexesResponse(buffer_arg) {
  return server_v1_search_pb.ListIndexesResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_search_v1_SearchIndexRequest(arg) {
  if (!(arg instanceof server_v1_search_pb.SearchIndexRequest)) {
    throw new Error('Expected argument of type tigrisdata.search.v1.SearchIndexRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_search_v1_SearchIndexRequest(buffer_arg) {
  return server_v1_search_pb.SearchIndexRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_search_v1_SearchIndexResponse(arg) {
  if (!(arg instanceof server_v1_search_pb.SearchIndexResponse)) {
    throw new Error('Expected argument of type tigrisdata.search.v1.SearchIndexResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_search_v1_SearchIndexResponse(buffer_arg) {
  return server_v1_search_pb.SearchIndexResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_search_v1_UpdateDocumentRequest(arg) {
  if (!(arg instanceof server_v1_search_pb.UpdateDocumentRequest)) {
    throw new Error('Expected argument of type tigrisdata.search.v1.UpdateDocumentRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_search_v1_UpdateDocumentRequest(buffer_arg) {
  return server_v1_search_pb.UpdateDocumentRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_tigrisdata_search_v1_UpdateDocumentResponse(arg) {
  if (!(arg instanceof server_v1_search_pb.UpdateDocumentResponse)) {
    throw new Error('Expected argument of type tigrisdata.search.v1.UpdateDocumentResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_tigrisdata_search_v1_UpdateDocumentResponse(buffer_arg) {
  return server_v1_search_pb.UpdateDocumentResponse.deserializeBinary(new Uint8Array(buffer_arg));
}


var SearchService = exports.SearchService = {
  createOrUpdateIndex: {
    path: '/tigrisdata.search.v1.Search/CreateOrUpdateIndex',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_search_pb.CreateOrUpdateIndexRequest,
    responseType: server_v1_search_pb.CreateOrUpdateIndexResponse,
    requestSerialize: serialize_tigrisdata_search_v1_CreateOrUpdateIndexRequest,
    requestDeserialize: deserialize_tigrisdata_search_v1_CreateOrUpdateIndexRequest,
    responseSerialize: serialize_tigrisdata_search_v1_CreateOrUpdateIndexResponse,
    responseDeserialize: deserialize_tigrisdata_search_v1_CreateOrUpdateIndexResponse,
  },
  getIndex: {
    path: '/tigrisdata.search.v1.Search/GetIndex',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_search_pb.GetIndexRequest,
    responseType: server_v1_search_pb.GetIndexResponse,
    requestSerialize: serialize_tigrisdata_search_v1_GetIndexRequest,
    requestDeserialize: deserialize_tigrisdata_search_v1_GetIndexRequest,
    responseSerialize: serialize_tigrisdata_search_v1_GetIndexResponse,
    responseDeserialize: deserialize_tigrisdata_search_v1_GetIndexResponse,
  },
  deleteIndex: {
    path: '/tigrisdata.search.v1.Search/DeleteIndex',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_search_pb.DeleteIndexRequest,
    responseType: server_v1_search_pb.DeleteIndexResponse,
    requestSerialize: serialize_tigrisdata_search_v1_DeleteIndexRequest,
    requestDeserialize: deserialize_tigrisdata_search_v1_DeleteIndexRequest,
    responseSerialize: serialize_tigrisdata_search_v1_DeleteIndexResponse,
    responseDeserialize: deserialize_tigrisdata_search_v1_DeleteIndexResponse,
  },
  listIndexes: {
    path: '/tigrisdata.search.v1.Search/ListIndexes',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_search_pb.ListIndexesRequest,
    responseType: server_v1_search_pb.ListIndexesResponse,
    requestSerialize: serialize_tigrisdata_search_v1_ListIndexesRequest,
    requestDeserialize: deserialize_tigrisdata_search_v1_ListIndexesRequest,
    responseSerialize: serialize_tigrisdata_search_v1_ListIndexesResponse,
    responseDeserialize: deserialize_tigrisdata_search_v1_ListIndexesResponse,
  },
  // Retrieves one or more documents by id. The response is an array of documents in the same order it is requests.
// A null is returned for the documents that are not found.
get: {
    path: '/tigrisdata.search.v1.Search/Get',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_search_pb.GetDocumentRequest,
    responseType: server_v1_search_pb.GetDocumentResponse,
    requestSerialize: serialize_tigrisdata_search_v1_GetDocumentRequest,
    requestDeserialize: deserialize_tigrisdata_search_v1_GetDocumentRequest,
    responseSerialize: serialize_tigrisdata_search_v1_GetDocumentResponse,
    responseDeserialize: deserialize_tigrisdata_search_v1_GetDocumentResponse,
  },
  // CreateById is used for indexing a single document. The API expects a single document. An "id" is optional
// and the server can automatically generate it for you in case it is missing. In cases an id is provided in
// the document and the document already exists then that document will not be indexed and an error is returned
// with HTTP status code 409.
createById: {
    path: '/tigrisdata.search.v1.Search/CreateById',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_search_pb.CreateByIdRequest,
    responseType: server_v1_search_pb.CreateByIdResponse,
    requestSerialize: serialize_tigrisdata_search_v1_CreateByIdRequest,
    requestDeserialize: deserialize_tigrisdata_search_v1_CreateByIdRequest,
    responseSerialize: serialize_tigrisdata_search_v1_CreateByIdResponse,
    responseDeserialize: deserialize_tigrisdata_search_v1_CreateByIdResponse,
  },
  // Create is used for indexing a single or multiple documents. The API expects an array of documents.
// Each document is a JSON object. An "id" is optional and the server can automatically generate it for you in
// case it is missing. In cases when an id is provided in the document and the document already exists then that
// document will not be indexed and in the response there will be an error corresponding to that document id other
// documents will succeed. Returns an array of status indicating the status of each document.
create: {
    path: '/tigrisdata.search.v1.Search/Create',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_search_pb.CreateDocumentRequest,
    responseType: server_v1_search_pb.CreateDocumentResponse,
    requestSerialize: serialize_tigrisdata_search_v1_CreateDocumentRequest,
    requestDeserialize: deserialize_tigrisdata_search_v1_CreateDocumentRequest,
    responseSerialize: serialize_tigrisdata_search_v1_CreateDocumentResponse,
    responseDeserialize: deserialize_tigrisdata_search_v1_CreateDocumentResponse,
  },
  // Creates or replaces one or more documents. Each document is a JSON object. A document is replaced
// if it already exists. An "id" is generated automatically in case it is missing in the document. The
// document is created if "id" doesn't exists otherwise it is replaced. Returns an array of status indicating
// the status of each document.
createOrReplace: {
    path: '/tigrisdata.search.v1.Search/CreateOrReplace',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_search_pb.CreateOrReplaceDocumentRequest,
    responseType: server_v1_search_pb.CreateOrReplaceDocumentResponse,
    requestSerialize: serialize_tigrisdata_search_v1_CreateOrReplaceDocumentRequest,
    requestDeserialize: deserialize_tigrisdata_search_v1_CreateOrReplaceDocumentRequest,
    responseSerialize: serialize_tigrisdata_search_v1_CreateOrReplaceDocumentResponse,
    responseDeserialize: deserialize_tigrisdata_search_v1_CreateOrReplaceDocumentResponse,
  },
  // Updates one or more documents by "id". Each document is required to have the
// "id" field in it. Returns an array of status indicating the status of each document. Each status
// has an error field that is set to null in case document is updated successfully otherwise the error
// field is set with a code and message.
update: {
    path: '/tigrisdata.search.v1.Search/Update',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_search_pb.UpdateDocumentRequest,
    responseType: server_v1_search_pb.UpdateDocumentResponse,
    requestSerialize: serialize_tigrisdata_search_v1_UpdateDocumentRequest,
    requestDeserialize: deserialize_tigrisdata_search_v1_UpdateDocumentRequest,
    responseSerialize: serialize_tigrisdata_search_v1_UpdateDocumentResponse,
    responseDeserialize: deserialize_tigrisdata_search_v1_UpdateDocumentResponse,
  },
  // Delete one or more documents by id. Returns an array of status indicating the status of each document. Each status
// has an error field that is set to null in case document is deleted successfully otherwise it will non null with
// an error code and message.
delete: {
    path: '/tigrisdata.search.v1.Search/Delete',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_search_pb.DeleteDocumentRequest,
    responseType: server_v1_search_pb.DeleteDocumentResponse,
    requestSerialize: serialize_tigrisdata_search_v1_DeleteDocumentRequest,
    requestDeserialize: deserialize_tigrisdata_search_v1_DeleteDocumentRequest,
    responseSerialize: serialize_tigrisdata_search_v1_DeleteDocumentResponse,
    responseDeserialize: deserialize_tigrisdata_search_v1_DeleteDocumentResponse,
  },
  // DeleteByQuery is used to delete documents that match the filter. A filter is required. To delete document by id,
// you can pass the filter as follows ```{"id": "test"}```. Returns a count of number of documents deleted.
deleteByQuery: {
    path: '/tigrisdata.search.v1.Search/DeleteByQuery',
    requestStream: false,
    responseStream: false,
    requestType: server_v1_search_pb.DeleteByQueryRequest,
    responseType: server_v1_search_pb.DeleteByQueryResponse,
    requestSerialize: serialize_tigrisdata_search_v1_DeleteByQueryRequest,
    requestDeserialize: deserialize_tigrisdata_search_v1_DeleteByQueryRequest,
    responseSerialize: serialize_tigrisdata_search_v1_DeleteByQueryResponse,
    responseDeserialize: deserialize_tigrisdata_search_v1_DeleteByQueryResponse,
  },
  // Searches an index for the documents matching the query. A search can be a term search or a phrase search.
// Search API allows filtering the result set using filters as documented
// <a href="https://docs.tigrisdata.com/overview/query#specification-1" title="here">here</a>. You can also perform
// a faceted search by passing the fields in the facet parameter. You can find more detailed documentation of the
// Search API with multiple examples <a href="https://docs.tigrisdata.com/overview/search" title="here">here</a>.
search: {
    path: '/tigrisdata.search.v1.Search/Search',
    requestStream: false,
    responseStream: true,
    requestType: server_v1_search_pb.SearchIndexRequest,
    responseType: server_v1_search_pb.SearchIndexResponse,
    requestSerialize: serialize_tigrisdata_search_v1_SearchIndexRequest,
    requestDeserialize: deserialize_tigrisdata_search_v1_SearchIndexRequest,
    responseSerialize: serialize_tigrisdata_search_v1_SearchIndexResponse,
    responseDeserialize: deserialize_tigrisdata_search_v1_SearchIndexResponse,
  },
};

exports.SearchClient = grpc.makeGenericClientConstructor(SearchService);
