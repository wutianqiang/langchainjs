// package: tigrisdata.search.v1
// file: server/v1/search.proto

/* tslint:disable */
/* eslint-disable */

import * as jspb from "google-protobuf";
import * as openapiv3_annotations_pb from "../../openapiv3/annotations_pb";
import * as server_v1_observability_pb from "../../server/v1/observability_pb";
import * as server_v1_api_pb from "../../server/v1/api_pb";

export class CreateOrUpdateIndexRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): CreateOrUpdateIndexRequest;
    getName(): string;
    setName(value: string): CreateOrUpdateIndexRequest;
    getSchema(): Uint8Array | string;
    getSchema_asU8(): Uint8Array;
    getSchema_asB64(): string;
    setSchema(value: Uint8Array | string): CreateOrUpdateIndexRequest;
    getOnlyCreate(): boolean;
    setOnlyCreate(value: boolean): CreateOrUpdateIndexRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateOrUpdateIndexRequest.AsObject;
    static toObject(includeInstance: boolean, msg: CreateOrUpdateIndexRequest): CreateOrUpdateIndexRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateOrUpdateIndexRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateOrUpdateIndexRequest;
    static deserializeBinaryFromReader(message: CreateOrUpdateIndexRequest, reader: jspb.BinaryReader): CreateOrUpdateIndexRequest;
}

export namespace CreateOrUpdateIndexRequest {
    export type AsObject = {
        project: string,
        name: string,
        schema: Uint8Array | string,
        onlyCreate: boolean,
    }
}

export class IndexSource extends jspb.Message { 
    getType(): string;
    setType(value: string): IndexSource;
    getCollection(): string;
    setCollection(value: string): IndexSource;
    getBranch(): string;
    setBranch(value: string): IndexSource;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): IndexSource.AsObject;
    static toObject(includeInstance: boolean, msg: IndexSource): IndexSource.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: IndexSource, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): IndexSource;
    static deserializeBinaryFromReader(message: IndexSource, reader: jspb.BinaryReader): IndexSource;
}

export namespace IndexSource {
    export type AsObject = {
        type: string,
        collection: string,
        branch: string,
    }
}

export class CreateOrUpdateIndexResponse extends jspb.Message { 
    getMessage(): string;
    setMessage(value: string): CreateOrUpdateIndexResponse;
    getStatus(): string;
    setStatus(value: string): CreateOrUpdateIndexResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateOrUpdateIndexResponse.AsObject;
    static toObject(includeInstance: boolean, msg: CreateOrUpdateIndexResponse): CreateOrUpdateIndexResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateOrUpdateIndexResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateOrUpdateIndexResponse;
    static deserializeBinaryFromReader(message: CreateOrUpdateIndexResponse, reader: jspb.BinaryReader): CreateOrUpdateIndexResponse;
}

export namespace CreateOrUpdateIndexResponse {
    export type AsObject = {
        message: string,
        status: string,
    }
}

export class GetIndexRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): GetIndexRequest;
    getName(): string;
    setName(value: string): GetIndexRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GetIndexRequest.AsObject;
    static toObject(includeInstance: boolean, msg: GetIndexRequest): GetIndexRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GetIndexRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GetIndexRequest;
    static deserializeBinaryFromReader(message: GetIndexRequest, reader: jspb.BinaryReader): GetIndexRequest;
}

export namespace GetIndexRequest {
    export type AsObject = {
        project: string,
        name: string,
    }
}

export class GetIndexResponse extends jspb.Message { 

    hasIndex(): boolean;
    clearIndex(): void;
    getIndex(): IndexInfo | undefined;
    setIndex(value?: IndexInfo): GetIndexResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GetIndexResponse.AsObject;
    static toObject(includeInstance: boolean, msg: GetIndexResponse): GetIndexResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GetIndexResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GetIndexResponse;
    static deserializeBinaryFromReader(message: GetIndexResponse, reader: jspb.BinaryReader): GetIndexResponse;
}

export namespace GetIndexResponse {
    export type AsObject = {
        index?: IndexInfo.AsObject,
    }
}

export class DeleteIndexRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): DeleteIndexRequest;
    getName(): string;
    setName(value: string): DeleteIndexRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DeleteIndexRequest.AsObject;
    static toObject(includeInstance: boolean, msg: DeleteIndexRequest): DeleteIndexRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DeleteIndexRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DeleteIndexRequest;
    static deserializeBinaryFromReader(message: DeleteIndexRequest, reader: jspb.BinaryReader): DeleteIndexRequest;
}

export namespace DeleteIndexRequest {
    export type AsObject = {
        project: string,
        name: string,
    }
}

export class DeleteIndexResponse extends jspb.Message { 
    getMessage(): string;
    setMessage(value: string): DeleteIndexResponse;
    getStatus(): string;
    setStatus(value: string): DeleteIndexResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DeleteIndexResponse.AsObject;
    static toObject(includeInstance: boolean, msg: DeleteIndexResponse): DeleteIndexResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DeleteIndexResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DeleteIndexResponse;
    static deserializeBinaryFromReader(message: DeleteIndexResponse, reader: jspb.BinaryReader): DeleteIndexResponse;
}

export namespace DeleteIndexResponse {
    export type AsObject = {
        message: string,
        status: string,
    }
}

export class ListIndexesRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): ListIndexesRequest;

    hasFilter(): boolean;
    clearFilter(): void;
    getFilter(): IndexSource | undefined;
    setFilter(value?: IndexSource): ListIndexesRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListIndexesRequest.AsObject;
    static toObject(includeInstance: boolean, msg: ListIndexesRequest): ListIndexesRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListIndexesRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListIndexesRequest;
    static deserializeBinaryFromReader(message: ListIndexesRequest, reader: jspb.BinaryReader): ListIndexesRequest;
}

export namespace ListIndexesRequest {
    export type AsObject = {
        project: string,
        filter?: IndexSource.AsObject,
    }
}

export class IndexInfo extends jspb.Message { 
    getName(): string;
    setName(value: string): IndexInfo;
    getSchema(): Uint8Array | string;
    getSchema_asU8(): Uint8Array;
    getSchema_asB64(): string;
    setSchema(value: Uint8Array | string): IndexInfo;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): IndexInfo.AsObject;
    static toObject(includeInstance: boolean, msg: IndexInfo): IndexInfo.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: IndexInfo, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): IndexInfo;
    static deserializeBinaryFromReader(message: IndexInfo, reader: jspb.BinaryReader): IndexInfo;
}

export namespace IndexInfo {
    export type AsObject = {
        name: string,
        schema: Uint8Array | string,
    }
}

export class ListIndexesResponse extends jspb.Message { 
    clearIndexesList(): void;
    getIndexesList(): Array<IndexInfo>;
    setIndexesList(value: Array<IndexInfo>): ListIndexesResponse;
    addIndexes(value?: IndexInfo, index?: number): IndexInfo;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListIndexesResponse.AsObject;
    static toObject(includeInstance: boolean, msg: ListIndexesResponse): ListIndexesResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListIndexesResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListIndexesResponse;
    static deserializeBinaryFromReader(message: ListIndexesResponse, reader: jspb.BinaryReader): ListIndexesResponse;
}

export namespace ListIndexesResponse {
    export type AsObject = {
        indexesList: Array<IndexInfo.AsObject>,
    }
}

export class DocStatus extends jspb.Message { 
    getId(): string;
    setId(value: string): DocStatus;

    hasError(): boolean;
    clearError(): void;
    getError(): server_v1_observability_pb.Error | undefined;
    setError(value?: server_v1_observability_pb.Error): DocStatus;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DocStatus.AsObject;
    static toObject(includeInstance: boolean, msg: DocStatus): DocStatus.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DocStatus, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DocStatus;
    static deserializeBinaryFromReader(message: DocStatus, reader: jspb.BinaryReader): DocStatus;
}

export namespace DocStatus {
    export type AsObject = {
        id: string,
        error?: server_v1_observability_pb.Error.AsObject,
    }
}

export class GetDocumentRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): GetDocumentRequest;
    getIndex(): string;
    setIndex(value: string): GetDocumentRequest;
    clearIdsList(): void;
    getIdsList(): Array<string>;
    setIdsList(value: Array<string>): GetDocumentRequest;
    addIds(value: string, index?: number): string;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GetDocumentRequest.AsObject;
    static toObject(includeInstance: boolean, msg: GetDocumentRequest): GetDocumentRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GetDocumentRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GetDocumentRequest;
    static deserializeBinaryFromReader(message: GetDocumentRequest, reader: jspb.BinaryReader): GetDocumentRequest;
}

export namespace GetDocumentRequest {
    export type AsObject = {
        project: string,
        index: string,
        idsList: Array<string>,
    }
}

export class GetDocumentResponse extends jspb.Message { 
    clearDocumentsList(): void;
    getDocumentsList(): Array<server_v1_api_pb.SearchHit>;
    setDocumentsList(value: Array<server_v1_api_pb.SearchHit>): GetDocumentResponse;
    addDocuments(value?: server_v1_api_pb.SearchHit, index?: number): server_v1_api_pb.SearchHit;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GetDocumentResponse.AsObject;
    static toObject(includeInstance: boolean, msg: GetDocumentResponse): GetDocumentResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GetDocumentResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GetDocumentResponse;
    static deserializeBinaryFromReader(message: GetDocumentResponse, reader: jspb.BinaryReader): GetDocumentResponse;
}

export namespace GetDocumentResponse {
    export type AsObject = {
        documentsList: Array<server_v1_api_pb.SearchHit.AsObject>,
    }
}

export class CreateByIdRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): CreateByIdRequest;
    getIndex(): string;
    setIndex(value: string): CreateByIdRequest;
    getId(): string;
    setId(value: string): CreateByIdRequest;
    getDocument(): Uint8Array | string;
    getDocument_asU8(): Uint8Array;
    getDocument_asB64(): string;
    setDocument(value: Uint8Array | string): CreateByIdRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateByIdRequest.AsObject;
    static toObject(includeInstance: boolean, msg: CreateByIdRequest): CreateByIdRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateByIdRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateByIdRequest;
    static deserializeBinaryFromReader(message: CreateByIdRequest, reader: jspb.BinaryReader): CreateByIdRequest;
}

export namespace CreateByIdRequest {
    export type AsObject = {
        project: string,
        index: string,
        id: string,
        document: Uint8Array | string,
    }
}

export class CreateByIdResponse extends jspb.Message { 
    getId(): string;
    setId(value: string): CreateByIdResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateByIdResponse.AsObject;
    static toObject(includeInstance: boolean, msg: CreateByIdResponse): CreateByIdResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateByIdResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateByIdResponse;
    static deserializeBinaryFromReader(message: CreateByIdResponse, reader: jspb.BinaryReader): CreateByIdResponse;
}

export namespace CreateByIdResponse {
    export type AsObject = {
        id: string,
    }
}

export class CreateDocumentRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): CreateDocumentRequest;
    getIndex(): string;
    setIndex(value: string): CreateDocumentRequest;
    clearDocumentsList(): void;
    getDocumentsList(): Array<Uint8Array | string>;
    getDocumentsList_asU8(): Array<Uint8Array>;
    getDocumentsList_asB64(): Array<string>;
    setDocumentsList(value: Array<Uint8Array | string>): CreateDocumentRequest;
    addDocuments(value: Uint8Array | string, index?: number): Uint8Array | string;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateDocumentRequest.AsObject;
    static toObject(includeInstance: boolean, msg: CreateDocumentRequest): CreateDocumentRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateDocumentRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateDocumentRequest;
    static deserializeBinaryFromReader(message: CreateDocumentRequest, reader: jspb.BinaryReader): CreateDocumentRequest;
}

export namespace CreateDocumentRequest {
    export type AsObject = {
        project: string,
        index: string,
        documentsList: Array<Uint8Array | string>,
    }
}

export class CreateDocumentResponse extends jspb.Message { 
    clearStatusList(): void;
    getStatusList(): Array<DocStatus>;
    setStatusList(value: Array<DocStatus>): CreateDocumentResponse;
    addStatus(value?: DocStatus, index?: number): DocStatus;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateDocumentResponse.AsObject;
    static toObject(includeInstance: boolean, msg: CreateDocumentResponse): CreateDocumentResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateDocumentResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateDocumentResponse;
    static deserializeBinaryFromReader(message: CreateDocumentResponse, reader: jspb.BinaryReader): CreateDocumentResponse;
}

export namespace CreateDocumentResponse {
    export type AsObject = {
        statusList: Array<DocStatus.AsObject>,
    }
}

export class CreateOrReplaceDocumentRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): CreateOrReplaceDocumentRequest;
    getIndex(): string;
    setIndex(value: string): CreateOrReplaceDocumentRequest;
    clearDocumentsList(): void;
    getDocumentsList(): Array<Uint8Array | string>;
    getDocumentsList_asU8(): Array<Uint8Array>;
    getDocumentsList_asB64(): Array<string>;
    setDocumentsList(value: Array<Uint8Array | string>): CreateOrReplaceDocumentRequest;
    addDocuments(value: Uint8Array | string, index?: number): Uint8Array | string;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateOrReplaceDocumentRequest.AsObject;
    static toObject(includeInstance: boolean, msg: CreateOrReplaceDocumentRequest): CreateOrReplaceDocumentRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateOrReplaceDocumentRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateOrReplaceDocumentRequest;
    static deserializeBinaryFromReader(message: CreateOrReplaceDocumentRequest, reader: jspb.BinaryReader): CreateOrReplaceDocumentRequest;
}

export namespace CreateOrReplaceDocumentRequest {
    export type AsObject = {
        project: string,
        index: string,
        documentsList: Array<Uint8Array | string>,
    }
}

export class CreateOrReplaceDocumentResponse extends jspb.Message { 
    clearStatusList(): void;
    getStatusList(): Array<DocStatus>;
    setStatusList(value: Array<DocStatus>): CreateOrReplaceDocumentResponse;
    addStatus(value?: DocStatus, index?: number): DocStatus;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateOrReplaceDocumentResponse.AsObject;
    static toObject(includeInstance: boolean, msg: CreateOrReplaceDocumentResponse): CreateOrReplaceDocumentResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateOrReplaceDocumentResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateOrReplaceDocumentResponse;
    static deserializeBinaryFromReader(message: CreateOrReplaceDocumentResponse, reader: jspb.BinaryReader): CreateOrReplaceDocumentResponse;
}

export namespace CreateOrReplaceDocumentResponse {
    export type AsObject = {
        statusList: Array<DocStatus.AsObject>,
    }
}

export class UpdateDocumentRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): UpdateDocumentRequest;
    getIndex(): string;
    setIndex(value: string): UpdateDocumentRequest;
    clearDocumentsList(): void;
    getDocumentsList(): Array<Uint8Array | string>;
    getDocumentsList_asU8(): Array<Uint8Array>;
    getDocumentsList_asB64(): Array<string>;
    setDocumentsList(value: Array<Uint8Array | string>): UpdateDocumentRequest;
    addDocuments(value: Uint8Array | string, index?: number): Uint8Array | string;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): UpdateDocumentRequest.AsObject;
    static toObject(includeInstance: boolean, msg: UpdateDocumentRequest): UpdateDocumentRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: UpdateDocumentRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): UpdateDocumentRequest;
    static deserializeBinaryFromReader(message: UpdateDocumentRequest, reader: jspb.BinaryReader): UpdateDocumentRequest;
}

export namespace UpdateDocumentRequest {
    export type AsObject = {
        project: string,
        index: string,
        documentsList: Array<Uint8Array | string>,
    }
}

export class UpdateDocumentResponse extends jspb.Message { 
    clearStatusList(): void;
    getStatusList(): Array<DocStatus>;
    setStatusList(value: Array<DocStatus>): UpdateDocumentResponse;
    addStatus(value?: DocStatus, index?: number): DocStatus;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): UpdateDocumentResponse.AsObject;
    static toObject(includeInstance: boolean, msg: UpdateDocumentResponse): UpdateDocumentResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: UpdateDocumentResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): UpdateDocumentResponse;
    static deserializeBinaryFromReader(message: UpdateDocumentResponse, reader: jspb.BinaryReader): UpdateDocumentResponse;
}

export namespace UpdateDocumentResponse {
    export type AsObject = {
        statusList: Array<DocStatus.AsObject>,
    }
}

export class DeleteDocumentRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): DeleteDocumentRequest;
    getIndex(): string;
    setIndex(value: string): DeleteDocumentRequest;
    clearIdsList(): void;
    getIdsList(): Array<string>;
    setIdsList(value: Array<string>): DeleteDocumentRequest;
    addIds(value: string, index?: number): string;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DeleteDocumentRequest.AsObject;
    static toObject(includeInstance: boolean, msg: DeleteDocumentRequest): DeleteDocumentRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DeleteDocumentRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DeleteDocumentRequest;
    static deserializeBinaryFromReader(message: DeleteDocumentRequest, reader: jspb.BinaryReader): DeleteDocumentRequest;
}

export namespace DeleteDocumentRequest {
    export type AsObject = {
        project: string,
        index: string,
        idsList: Array<string>,
    }
}

export class DeleteDocumentResponse extends jspb.Message { 
    clearStatusList(): void;
    getStatusList(): Array<DocStatus>;
    setStatusList(value: Array<DocStatus>): DeleteDocumentResponse;
    addStatus(value?: DocStatus, index?: number): DocStatus;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DeleteDocumentResponse.AsObject;
    static toObject(includeInstance: boolean, msg: DeleteDocumentResponse): DeleteDocumentResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DeleteDocumentResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DeleteDocumentResponse;
    static deserializeBinaryFromReader(message: DeleteDocumentResponse, reader: jspb.BinaryReader): DeleteDocumentResponse;
}

export namespace DeleteDocumentResponse {
    export type AsObject = {
        statusList: Array<DocStatus.AsObject>,
    }
}

export class DeleteByQueryRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): DeleteByQueryRequest;
    getIndex(): string;
    setIndex(value: string): DeleteByQueryRequest;
    getFilter(): Uint8Array | string;
    getFilter_asU8(): Uint8Array;
    getFilter_asB64(): string;
    setFilter(value: Uint8Array | string): DeleteByQueryRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DeleteByQueryRequest.AsObject;
    static toObject(includeInstance: boolean, msg: DeleteByQueryRequest): DeleteByQueryRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DeleteByQueryRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DeleteByQueryRequest;
    static deserializeBinaryFromReader(message: DeleteByQueryRequest, reader: jspb.BinaryReader): DeleteByQueryRequest;
}

export namespace DeleteByQueryRequest {
    export type AsObject = {
        project: string,
        index: string,
        filter: Uint8Array | string,
    }
}

export class DeleteByQueryResponse extends jspb.Message { 
    getCount(): number;
    setCount(value: number): DeleteByQueryResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DeleteByQueryResponse.AsObject;
    static toObject(includeInstance: boolean, msg: DeleteByQueryResponse): DeleteByQueryResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DeleteByQueryResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DeleteByQueryResponse;
    static deserializeBinaryFromReader(message: DeleteByQueryResponse, reader: jspb.BinaryReader): DeleteByQueryResponse;
}

export namespace DeleteByQueryResponse {
    export type AsObject = {
        count: number,
    }
}

export class SearchIndexRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): SearchIndexRequest;
    getIndex(): string;
    setIndex(value: string): SearchIndexRequest;
    getQ(): string;
    setQ(value: string): SearchIndexRequest;
    clearSearchFieldsList(): void;
    getSearchFieldsList(): Array<string>;
    setSearchFieldsList(value: Array<string>): SearchIndexRequest;
    addSearchFields(value: string, index?: number): string;
    getFilter(): Uint8Array | string;
    getFilter_asU8(): Uint8Array;
    getFilter_asB64(): string;
    setFilter(value: Uint8Array | string): SearchIndexRequest;
    getFacet(): Uint8Array | string;
    getFacet_asU8(): Uint8Array;
    getFacet_asB64(): string;
    setFacet(value: Uint8Array | string): SearchIndexRequest;
    getSort(): Uint8Array | string;
    getSort_asU8(): Uint8Array;
    getSort_asB64(): string;
    setSort(value: Uint8Array | string): SearchIndexRequest;
    clearIncludeFieldsList(): void;
    getIncludeFieldsList(): Array<string>;
    setIncludeFieldsList(value: Array<string>): SearchIndexRequest;
    addIncludeFields(value: string, index?: number): string;
    clearExcludeFieldsList(): void;
    getExcludeFieldsList(): Array<string>;
    setExcludeFieldsList(value: Array<string>): SearchIndexRequest;
    addExcludeFields(value: string, index?: number): string;
    getPageSize(): number;
    setPageSize(value: number): SearchIndexRequest;
    getPage(): number;
    setPage(value: number): SearchIndexRequest;

    hasCollation(): boolean;
    clearCollation(): void;
    getCollation(): server_v1_api_pb.Collation | undefined;
    setCollation(value?: server_v1_api_pb.Collation): SearchIndexRequest;
    getGroupBy(): Uint8Array | string;
    getGroupBy_asU8(): Uint8Array;
    getGroupBy_asB64(): string;
    setGroupBy(value: Uint8Array | string): SearchIndexRequest;
    getVector(): Uint8Array | string;
    getVector_asU8(): Uint8Array;
    getVector_asB64(): string;
    setVector(value: Uint8Array | string): SearchIndexRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): SearchIndexRequest.AsObject;
    static toObject(includeInstance: boolean, msg: SearchIndexRequest): SearchIndexRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: SearchIndexRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): SearchIndexRequest;
    static deserializeBinaryFromReader(message: SearchIndexRequest, reader: jspb.BinaryReader): SearchIndexRequest;
}

export namespace SearchIndexRequest {
    export type AsObject = {
        project: string,
        index: string,
        q: string,
        searchFieldsList: Array<string>,
        filter: Uint8Array | string,
        facet: Uint8Array | string,
        sort: Uint8Array | string,
        includeFieldsList: Array<string>,
        excludeFieldsList: Array<string>,
        pageSize: number,
        page: number,
        collation?: server_v1_api_pb.Collation.AsObject,
        groupBy: Uint8Array | string,
        vector: Uint8Array | string,
    }
}

export class SearchIndexResponse extends jspb.Message { 
    clearHitsList(): void;
    getHitsList(): Array<server_v1_api_pb.SearchHit>;
    setHitsList(value: Array<server_v1_api_pb.SearchHit>): SearchIndexResponse;
    addHits(value?: server_v1_api_pb.SearchHit, index?: number): server_v1_api_pb.SearchHit;

    getFacetsMap(): jspb.Map<string, server_v1_api_pb.SearchFacet>;
    clearFacetsMap(): void;

    hasMeta(): boolean;
    clearMeta(): void;
    getMeta(): server_v1_api_pb.SearchMetadata | undefined;
    setMeta(value?: server_v1_api_pb.SearchMetadata): SearchIndexResponse;
    clearGroupList(): void;
    getGroupList(): Array<server_v1_api_pb.GroupedSearchHits>;
    setGroupList(value: Array<server_v1_api_pb.GroupedSearchHits>): SearchIndexResponse;
    addGroup(value?: server_v1_api_pb.GroupedSearchHits, index?: number): server_v1_api_pb.GroupedSearchHits;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): SearchIndexResponse.AsObject;
    static toObject(includeInstance: boolean, msg: SearchIndexResponse): SearchIndexResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: SearchIndexResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): SearchIndexResponse;
    static deserializeBinaryFromReader(message: SearchIndexResponse, reader: jspb.BinaryReader): SearchIndexResponse;
}

export namespace SearchIndexResponse {
    export type AsObject = {
        hitsList: Array<server_v1_api_pb.SearchHit.AsObject>,

        facetsMap: Array<[string, server_v1_api_pb.SearchFacet.AsObject]>,
        meta?: server_v1_api_pb.SearchMetadata.AsObject,
        groupList: Array<server_v1_api_pb.GroupedSearchHits.AsObject>,
    }
}
