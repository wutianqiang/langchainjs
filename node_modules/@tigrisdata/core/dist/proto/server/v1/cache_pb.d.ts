// package: tigrisdata.cache.v1
// file: server/v1/cache.proto

/* tslint:disable */
/* eslint-disable */

import * as jspb from "google-protobuf";
import * as openapiv3_annotations_pb from "../../openapiv3/annotations_pb";

export class CreateCacheOptions extends jspb.Message { 
    getTtlMs(): number;
    setTtlMs(value: number): CreateCacheOptions;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateCacheOptions.AsObject;
    static toObject(includeInstance: boolean, msg: CreateCacheOptions): CreateCacheOptions.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateCacheOptions, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateCacheOptions;
    static deserializeBinaryFromReader(message: CreateCacheOptions, reader: jspb.BinaryReader): CreateCacheOptions;
}

export namespace CreateCacheOptions {
    export type AsObject = {
        ttlMs: number,
    }
}

export class CreateCacheRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): CreateCacheRequest;
    getName(): string;
    setName(value: string): CreateCacheRequest;

    hasOptions(): boolean;
    clearOptions(): void;
    getOptions(): CreateCacheOptions | undefined;
    setOptions(value?: CreateCacheOptions): CreateCacheRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateCacheRequest.AsObject;
    static toObject(includeInstance: boolean, msg: CreateCacheRequest): CreateCacheRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateCacheRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateCacheRequest;
    static deserializeBinaryFromReader(message: CreateCacheRequest, reader: jspb.BinaryReader): CreateCacheRequest;
}

export namespace CreateCacheRequest {
    export type AsObject = {
        project: string,
        name: string,
        options?: CreateCacheOptions.AsObject,
    }
}

export class CreateCacheResponse extends jspb.Message { 
    getMessage(): string;
    setMessage(value: string): CreateCacheResponse;
    getStatus(): string;
    setStatus(value: string): CreateCacheResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateCacheResponse.AsObject;
    static toObject(includeInstance: boolean, msg: CreateCacheResponse): CreateCacheResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateCacheResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateCacheResponse;
    static deserializeBinaryFromReader(message: CreateCacheResponse, reader: jspb.BinaryReader): CreateCacheResponse;
}

export namespace CreateCacheResponse {
    export type AsObject = {
        message: string,
        status: string,
    }
}

export class DeleteCacheRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): DeleteCacheRequest;
    getName(): string;
    setName(value: string): DeleteCacheRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DeleteCacheRequest.AsObject;
    static toObject(includeInstance: boolean, msg: DeleteCacheRequest): DeleteCacheRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DeleteCacheRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DeleteCacheRequest;
    static deserializeBinaryFromReader(message: DeleteCacheRequest, reader: jspb.BinaryReader): DeleteCacheRequest;
}

export namespace DeleteCacheRequest {
    export type AsObject = {
        project: string,
        name: string,
    }
}

export class DeleteCacheResponse extends jspb.Message { 
    getMessage(): string;
    setMessage(value: string): DeleteCacheResponse;
    getStatus(): string;
    setStatus(value: string): DeleteCacheResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DeleteCacheResponse.AsObject;
    static toObject(includeInstance: boolean, msg: DeleteCacheResponse): DeleteCacheResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DeleteCacheResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DeleteCacheResponse;
    static deserializeBinaryFromReader(message: DeleteCacheResponse, reader: jspb.BinaryReader): DeleteCacheResponse;
}

export namespace DeleteCacheResponse {
    export type AsObject = {
        message: string,
        status: string,
    }
}

export class SetRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): SetRequest;
    getName(): string;
    setName(value: string): SetRequest;
    getKey(): string;
    setKey(value: string): SetRequest;
    getValue(): Uint8Array | string;
    getValue_asU8(): Uint8Array;
    getValue_asB64(): string;
    setValue(value: Uint8Array | string): SetRequest;

    hasEx(): boolean;
    clearEx(): void;
    getEx(): number | undefined;
    setEx(value: number): SetRequest;

    hasPx(): boolean;
    clearPx(): void;
    getPx(): number | undefined;
    setPx(value: number): SetRequest;
    getNx(): boolean;
    setNx(value: boolean): SetRequest;
    getXx(): boolean;
    setXx(value: boolean): SetRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): SetRequest.AsObject;
    static toObject(includeInstance: boolean, msg: SetRequest): SetRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: SetRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): SetRequest;
    static deserializeBinaryFromReader(message: SetRequest, reader: jspb.BinaryReader): SetRequest;
}

export namespace SetRequest {
    export type AsObject = {
        project: string,
        name: string,
        key: string,
        value: Uint8Array | string,
        ex?: number,
        px?: number,
        nx: boolean,
        xx: boolean,
    }
}

export class SetResponse extends jspb.Message { 
    getMessage(): string;
    setMessage(value: string): SetResponse;
    getStatus(): string;
    setStatus(value: string): SetResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): SetResponse.AsObject;
    static toObject(includeInstance: boolean, msg: SetResponse): SetResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: SetResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): SetResponse;
    static deserializeBinaryFromReader(message: SetResponse, reader: jspb.BinaryReader): SetResponse;
}

export namespace SetResponse {
    export type AsObject = {
        message: string,
        status: string,
    }
}

export class GetSetRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): GetSetRequest;
    getName(): string;
    setName(value: string): GetSetRequest;
    getKey(): string;
    setKey(value: string): GetSetRequest;
    getValue(): Uint8Array | string;
    getValue_asU8(): Uint8Array;
    getValue_asB64(): string;
    setValue(value: Uint8Array | string): GetSetRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GetSetRequest.AsObject;
    static toObject(includeInstance: boolean, msg: GetSetRequest): GetSetRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GetSetRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GetSetRequest;
    static deserializeBinaryFromReader(message: GetSetRequest, reader: jspb.BinaryReader): GetSetRequest;
}

export namespace GetSetRequest {
    export type AsObject = {
        project: string,
        name: string,
        key: string,
        value: Uint8Array | string,
    }
}

export class GetSetResponse extends jspb.Message { 
    getMessage(): string;
    setMessage(value: string): GetSetResponse;
    getStatus(): string;
    setStatus(value: string): GetSetResponse;

    hasOldValue(): boolean;
    clearOldValue(): void;
    getOldValue(): Uint8Array | string;
    getOldValue_asU8(): Uint8Array;
    getOldValue_asB64(): string;
    setOldValue(value: Uint8Array | string): GetSetResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GetSetResponse.AsObject;
    static toObject(includeInstance: boolean, msg: GetSetResponse): GetSetResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GetSetResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GetSetResponse;
    static deserializeBinaryFromReader(message: GetSetResponse, reader: jspb.BinaryReader): GetSetResponse;
}

export namespace GetSetResponse {
    export type AsObject = {
        message: string,
        status: string,
        oldValue: Uint8Array | string,
    }
}

export class GetRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): GetRequest;
    getName(): string;
    setName(value: string): GetRequest;
    getKey(): string;
    setKey(value: string): GetRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GetRequest.AsObject;
    static toObject(includeInstance: boolean, msg: GetRequest): GetRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GetRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GetRequest;
    static deserializeBinaryFromReader(message: GetRequest, reader: jspb.BinaryReader): GetRequest;
}

export namespace GetRequest {
    export type AsObject = {
        project: string,
        name: string,
        key: string,
    }
}

export class GetResponse extends jspb.Message { 
    getValue(): Uint8Array | string;
    getValue_asU8(): Uint8Array;
    getValue_asB64(): string;
    setValue(value: Uint8Array | string): GetResponse;

    hasExpiresInMs(): boolean;
    clearExpiresInMs(): void;
    getExpiresInMs(): number | undefined;
    setExpiresInMs(value: number): GetResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GetResponse.AsObject;
    static toObject(includeInstance: boolean, msg: GetResponse): GetResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GetResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GetResponse;
    static deserializeBinaryFromReader(message: GetResponse, reader: jspb.BinaryReader): GetResponse;
}

export namespace GetResponse {
    export type AsObject = {
        value: Uint8Array | string,
        expiresInMs?: number,
    }
}

export class ListCachesRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): ListCachesRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListCachesRequest.AsObject;
    static toObject(includeInstance: boolean, msg: ListCachesRequest): ListCachesRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListCachesRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListCachesRequest;
    static deserializeBinaryFromReader(message: ListCachesRequest, reader: jspb.BinaryReader): ListCachesRequest;
}

export namespace ListCachesRequest {
    export type AsObject = {
        project: string,
    }
}

export class ListCachesResponse extends jspb.Message { 
    clearCachesList(): void;
    getCachesList(): Array<CacheMetadata>;
    setCachesList(value: Array<CacheMetadata>): ListCachesResponse;
    addCaches(value?: CacheMetadata, index?: number): CacheMetadata;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListCachesResponse.AsObject;
    static toObject(includeInstance: boolean, msg: ListCachesResponse): ListCachesResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListCachesResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListCachesResponse;
    static deserializeBinaryFromReader(message: ListCachesResponse, reader: jspb.BinaryReader): ListCachesResponse;
}

export namespace ListCachesResponse {
    export type AsObject = {
        cachesList: Array<CacheMetadata.AsObject>,
    }
}

export class CacheMetadata extends jspb.Message { 
    getName(): string;
    setName(value: string): CacheMetadata;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CacheMetadata.AsObject;
    static toObject(includeInstance: boolean, msg: CacheMetadata): CacheMetadata.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CacheMetadata, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CacheMetadata;
    static deserializeBinaryFromReader(message: CacheMetadata, reader: jspb.BinaryReader): CacheMetadata;
}

export namespace CacheMetadata {
    export type AsObject = {
        name: string,
    }
}

export class DelRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): DelRequest;
    getName(): string;
    setName(value: string): DelRequest;
    getKey(): string;
    setKey(value: string): DelRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DelRequest.AsObject;
    static toObject(includeInstance: boolean, msg: DelRequest): DelRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DelRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DelRequest;
    static deserializeBinaryFromReader(message: DelRequest, reader: jspb.BinaryReader): DelRequest;
}

export namespace DelRequest {
    export type AsObject = {
        project: string,
        name: string,
        key: string,
    }
}

export class DelResponse extends jspb.Message { 
    getMessage(): string;
    setMessage(value: string): DelResponse;
    getStatus(): string;
    setStatus(value: string): DelResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DelResponse.AsObject;
    static toObject(includeInstance: boolean, msg: DelResponse): DelResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DelResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DelResponse;
    static deserializeBinaryFromReader(message: DelResponse, reader: jspb.BinaryReader): DelResponse;
}

export namespace DelResponse {
    export type AsObject = {
        message: string,
        status: string,
    }
}

export class KeysRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): KeysRequest;
    getName(): string;
    setName(value: string): KeysRequest;

    hasCursor(): boolean;
    clearCursor(): void;
    getCursor(): number | undefined;
    setCursor(value: number): KeysRequest;

    hasCount(): boolean;
    clearCount(): void;
    getCount(): number | undefined;
    setCount(value: number): KeysRequest;

    hasPattern(): boolean;
    clearPattern(): void;
    getPattern(): string | undefined;
    setPattern(value: string): KeysRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): KeysRequest.AsObject;
    static toObject(includeInstance: boolean, msg: KeysRequest): KeysRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: KeysRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): KeysRequest;
    static deserializeBinaryFromReader(message: KeysRequest, reader: jspb.BinaryReader): KeysRequest;
}

export namespace KeysRequest {
    export type AsObject = {
        project: string,
        name: string,
        cursor?: number,
        count?: number,
        pattern?: string,
    }
}

export class KeysResponse extends jspb.Message { 
    clearKeysList(): void;
    getKeysList(): Array<string>;
    setKeysList(value: Array<string>): KeysResponse;
    addKeys(value: string, index?: number): string;

    hasCursor(): boolean;
    clearCursor(): void;
    getCursor(): number | undefined;
    setCursor(value: number): KeysResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): KeysResponse.AsObject;
    static toObject(includeInstance: boolean, msg: KeysResponse): KeysResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: KeysResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): KeysResponse;
    static deserializeBinaryFromReader(message: KeysResponse, reader: jspb.BinaryReader): KeysResponse;
}

export namespace KeysResponse {
    export type AsObject = {
        keysList: Array<string>,
        cursor?: number,
    }
}
