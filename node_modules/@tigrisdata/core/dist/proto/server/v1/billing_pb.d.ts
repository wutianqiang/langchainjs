// package: tigrisdata.billing.v1
// file: server/v1/billing.proto

/* tslint:disable */
/* eslint-disable */

import * as jspb from "google-protobuf";
import * as openapiv3_annotations_pb from "../../openapiv3/annotations_pb";
import * as google_protobuf_timestamp_pb from "google-protobuf/google/protobuf/timestamp_pb";

export class ListInvoicesRequest extends jspb.Message { 

    hasStartingOn(): boolean;
    clearStartingOn(): void;
    getStartingOn(): google_protobuf_timestamp_pb.Timestamp | undefined;
    setStartingOn(value?: google_protobuf_timestamp_pb.Timestamp): ListInvoicesRequest;

    hasEndingBefore(): boolean;
    clearEndingBefore(): void;
    getEndingBefore(): google_protobuf_timestamp_pb.Timestamp | undefined;
    setEndingBefore(value?: google_protobuf_timestamp_pb.Timestamp): ListInvoicesRequest;
    getInvoiceId(): string;
    setInvoiceId(value: string): ListInvoicesRequest;

    hasPageSize(): boolean;
    clearPageSize(): void;
    getPageSize(): number | undefined;
    setPageSize(value: number): ListInvoicesRequest;

    hasNextPage(): boolean;
    clearNextPage(): void;
    getNextPage(): string | undefined;
    setNextPage(value: string): ListInvoicesRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListInvoicesRequest.AsObject;
    static toObject(includeInstance: boolean, msg: ListInvoicesRequest): ListInvoicesRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListInvoicesRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListInvoicesRequest;
    static deserializeBinaryFromReader(message: ListInvoicesRequest, reader: jspb.BinaryReader): ListInvoicesRequest;
}

export namespace ListInvoicesRequest {
    export type AsObject = {
        startingOn?: google_protobuf_timestamp_pb.Timestamp.AsObject,
        endingBefore?: google_protobuf_timestamp_pb.Timestamp.AsObject,
        invoiceId: string,
        pageSize?: number,
        nextPage?: string,
    }
}

export class ListInvoicesResponse extends jspb.Message { 
    clearDataList(): void;
    getDataList(): Array<Invoice>;
    setDataList(value: Array<Invoice>): ListInvoicesResponse;
    addData(value?: Invoice, index?: number): Invoice;

    hasNextPage(): boolean;
    clearNextPage(): void;
    getNextPage(): string | undefined;
    setNextPage(value: string): ListInvoicesResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListInvoicesResponse.AsObject;
    static toObject(includeInstance: boolean, msg: ListInvoicesResponse): ListInvoicesResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListInvoicesResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListInvoicesResponse;
    static deserializeBinaryFromReader(message: ListInvoicesResponse, reader: jspb.BinaryReader): ListInvoicesResponse;
}

export namespace ListInvoicesResponse {
    export type AsObject = {
        dataList: Array<Invoice.AsObject>,
        nextPage?: string,
    }
}

export class Invoice extends jspb.Message { 
    getId(): string;
    setId(value: string): Invoice;
    clearEntriesList(): void;
    getEntriesList(): Array<InvoiceLineItem>;
    setEntriesList(value: Array<InvoiceLineItem>): Invoice;
    addEntries(value?: InvoiceLineItem, index?: number): InvoiceLineItem;

    hasStartTime(): boolean;
    clearStartTime(): void;
    getStartTime(): google_protobuf_timestamp_pb.Timestamp | undefined;
    setStartTime(value?: google_protobuf_timestamp_pb.Timestamp): Invoice;

    hasEndTime(): boolean;
    clearEndTime(): void;
    getEndTime(): google_protobuf_timestamp_pb.Timestamp | undefined;
    setEndTime(value?: google_protobuf_timestamp_pb.Timestamp): Invoice;
    getSubtotal(): number;
    setSubtotal(value: number): Invoice;
    getTotal(): number;
    setTotal(value: number): Invoice;
    getPlanName(): string;
    setPlanName(value: string): Invoice;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Invoice.AsObject;
    static toObject(includeInstance: boolean, msg: Invoice): Invoice.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Invoice, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Invoice;
    static deserializeBinaryFromReader(message: Invoice, reader: jspb.BinaryReader): Invoice;
}

export namespace Invoice {
    export type AsObject = {
        id: string,
        entriesList: Array<InvoiceLineItem.AsObject>,
        startTime?: google_protobuf_timestamp_pb.Timestamp.AsObject,
        endTime?: google_protobuf_timestamp_pb.Timestamp.AsObject,
        subtotal: number,
        total: number,
        planName: string,
    }
}

export class InvoiceLineItem extends jspb.Message { 
    getName(): string;
    setName(value: string): InvoiceLineItem;
    getQuantity(): number;
    setQuantity(value: number): InvoiceLineItem;
    getTotal(): number;
    setTotal(value: number): InvoiceLineItem;
    clearChargesList(): void;
    getChargesList(): Array<Charge>;
    setChargesList(value: Array<Charge>): InvoiceLineItem;
    addCharges(value?: Charge, index?: number): Charge;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): InvoiceLineItem.AsObject;
    static toObject(includeInstance: boolean, msg: InvoiceLineItem): InvoiceLineItem.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: InvoiceLineItem, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): InvoiceLineItem;
    static deserializeBinaryFromReader(message: InvoiceLineItem, reader: jspb.BinaryReader): InvoiceLineItem;
}

export namespace InvoiceLineItem {
    export type AsObject = {
        name: string,
        quantity: number,
        total: number,
        chargesList: Array<Charge.AsObject>,
    }
}

export class Charge extends jspb.Message { 
    getName(): string;
    setName(value: string): Charge;
    getQuantity(): number;
    setQuantity(value: number): Charge;
    getSubtotal(): number;
    setSubtotal(value: number): Charge;
    clearTiersList(): void;
    getTiersList(): Array<ChargeTier>;
    setTiersList(value: Array<ChargeTier>): Charge;
    addTiers(value?: ChargeTier, index?: number): ChargeTier;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Charge.AsObject;
    static toObject(includeInstance: boolean, msg: Charge): Charge.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Charge, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Charge;
    static deserializeBinaryFromReader(message: Charge, reader: jspb.BinaryReader): Charge;
}

export namespace Charge {
    export type AsObject = {
        name: string,
        quantity: number,
        subtotal: number,
        tiersList: Array<ChargeTier.AsObject>,
    }
}

export class ChargeTier extends jspb.Message { 
    getStartingAt(): number;
    setStartingAt(value: number): ChargeTier;
    getQuantity(): number;
    setQuantity(value: number): ChargeTier;
    getPrice(): number;
    setPrice(value: number): ChargeTier;
    getSubtotal(): number;
    setSubtotal(value: number): ChargeTier;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ChargeTier.AsObject;
    static toObject(includeInstance: boolean, msg: ChargeTier): ChargeTier.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ChargeTier, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ChargeTier;
    static deserializeBinaryFromReader(message: ChargeTier, reader: jspb.BinaryReader): ChargeTier;
}

export namespace ChargeTier {
    export type AsObject = {
        startingAt: number,
        quantity: number,
        price: number,
        subtotal: number,
    }
}
