// package: tigrisdata.management.v1
// file: server/v1/management.proto

/* tslint:disable */
/* eslint-disable */

import * as jspb from "google-protobuf";
import * as openapiv3_annotations_pb from "../../openapiv3/annotations_pb";

export class CreateNamespaceRequest extends jspb.Message { 
    getCode(): number;
    setCode(value: number): CreateNamespaceRequest;
    getId(): string;
    setId(value: string): CreateNamespaceRequest;
    getName(): string;
    setName(value: string): CreateNamespaceRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateNamespaceRequest.AsObject;
    static toObject(includeInstance: boolean, msg: CreateNamespaceRequest): CreateNamespaceRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateNamespaceRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateNamespaceRequest;
    static deserializeBinaryFromReader(message: CreateNamespaceRequest, reader: jspb.BinaryReader): CreateNamespaceRequest;
}

export namespace CreateNamespaceRequest {
    export type AsObject = {
        code: number,
        id: string,
        name: string,
    }
}

export class CreateNamespaceResponse extends jspb.Message { 
    getMessage(): string;
    setMessage(value: string): CreateNamespaceResponse;
    getStatus(): string;
    setStatus(value: string): CreateNamespaceResponse;

    hasNamespace(): boolean;
    clearNamespace(): void;
    getNamespace(): NamespaceInfo | undefined;
    setNamespace(value?: NamespaceInfo): CreateNamespaceResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateNamespaceResponse.AsObject;
    static toObject(includeInstance: boolean, msg: CreateNamespaceResponse): CreateNamespaceResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateNamespaceResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateNamespaceResponse;
    static deserializeBinaryFromReader(message: CreateNamespaceResponse, reader: jspb.BinaryReader): CreateNamespaceResponse;
}

export namespace CreateNamespaceResponse {
    export type AsObject = {
        message: string,
        status: string,
        namespace?: NamespaceInfo.AsObject,
    }
}

export class NamespaceInfo extends jspb.Message { 
    getCode(): number;
    setCode(value: number): NamespaceInfo;
    getId(): string;
    setId(value: string): NamespaceInfo;
    getName(): string;
    setName(value: string): NamespaceInfo;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): NamespaceInfo.AsObject;
    static toObject(includeInstance: boolean, msg: NamespaceInfo): NamespaceInfo.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: NamespaceInfo, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): NamespaceInfo;
    static deserializeBinaryFromReader(message: NamespaceInfo, reader: jspb.BinaryReader): NamespaceInfo;
}

export namespace NamespaceInfo {
    export type AsObject = {
        code: number,
        id: string,
        name: string,
    }
}

export class DescribeNamespacesData extends jspb.Message { 
    getDetails(): string;
    setDetails(value: string): DescribeNamespacesData;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DescribeNamespacesData.AsObject;
    static toObject(includeInstance: boolean, msg: DescribeNamespacesData): DescribeNamespacesData.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DescribeNamespacesData, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DescribeNamespacesData;
    static deserializeBinaryFromReader(message: DescribeNamespacesData, reader: jspb.BinaryReader): DescribeNamespacesData;
}

export namespace DescribeNamespacesData {
    export type AsObject = {
        details: string,
    }
}

export class ListNamespacesRequest extends jspb.Message { 

    hasDescribe(): boolean;
    clearDescribe(): void;
    getDescribe(): boolean | undefined;
    setDescribe(value: boolean): ListNamespacesRequest;
    getNamespaceId(): string;
    setNamespaceId(value: string): ListNamespacesRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListNamespacesRequest.AsObject;
    static toObject(includeInstance: boolean, msg: ListNamespacesRequest): ListNamespacesRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListNamespacesRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListNamespacesRequest;
    static deserializeBinaryFromReader(message: ListNamespacesRequest, reader: jspb.BinaryReader): ListNamespacesRequest;
}

export namespace ListNamespacesRequest {
    export type AsObject = {
        describe?: boolean,
        namespaceId: string,
    }
}

export class ListNamespacesResponse extends jspb.Message { 
    clearNamespacesList(): void;
    getNamespacesList(): Array<NamespaceInfo>;
    setNamespacesList(value: Array<NamespaceInfo>): ListNamespacesResponse;
    addNamespaces(value?: NamespaceInfo, index?: number): NamespaceInfo;

    hasData(): boolean;
    clearData(): void;
    getData(): DescribeNamespacesData | undefined;
    setData(value?: DescribeNamespacesData): ListNamespacesResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListNamespacesResponse.AsObject;
    static toObject(includeInstance: boolean, msg: ListNamespacesResponse): ListNamespacesResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListNamespacesResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListNamespacesResponse;
    static deserializeBinaryFromReader(message: ListNamespacesResponse, reader: jspb.BinaryReader): ListNamespacesResponse;
}

export namespace ListNamespacesResponse {
    export type AsObject = {
        namespacesList: Array<NamespaceInfo.AsObject>,
        data?: DescribeNamespacesData.AsObject,
    }
}

export class DeleteNamespaceRequest extends jspb.Message { 
    getNamespaceId(): string;
    setNamespaceId(value: string): DeleteNamespaceRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DeleteNamespaceRequest.AsObject;
    static toObject(includeInstance: boolean, msg: DeleteNamespaceRequest): DeleteNamespaceRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DeleteNamespaceRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DeleteNamespaceRequest;
    static deserializeBinaryFromReader(message: DeleteNamespaceRequest, reader: jspb.BinaryReader): DeleteNamespaceRequest;
}

export namespace DeleteNamespaceRequest {
    export type AsObject = {
        namespaceId: string,
    }
}

export class DeleteNamespaceResponse extends jspb.Message { 
    getMessage(): string;
    setMessage(value: string): DeleteNamespaceResponse;
    getStatus(): string;
    setStatus(value: string): DeleteNamespaceResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DeleteNamespaceResponse.AsObject;
    static toObject(includeInstance: boolean, msg: DeleteNamespaceResponse): DeleteNamespaceResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DeleteNamespaceResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DeleteNamespaceResponse;
    static deserializeBinaryFromReader(message: DeleteNamespaceResponse, reader: jspb.BinaryReader): DeleteNamespaceResponse;
}

export namespace DeleteNamespaceResponse {
    export type AsObject = {
        message: string,
        status: string,
    }
}

export class GetUserMetadataRequest extends jspb.Message { 
    getMetadatakey(): string;
    setMetadatakey(value: string): GetUserMetadataRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GetUserMetadataRequest.AsObject;
    static toObject(includeInstance: boolean, msg: GetUserMetadataRequest): GetUserMetadataRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GetUserMetadataRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GetUserMetadataRequest;
    static deserializeBinaryFromReader(message: GetUserMetadataRequest, reader: jspb.BinaryReader): GetUserMetadataRequest;
}

export namespace GetUserMetadataRequest {
    export type AsObject = {
        metadatakey: string,
    }
}

export class GetUserMetadataResponse extends jspb.Message { 
    getMetadatakey(): string;
    setMetadatakey(value: string): GetUserMetadataResponse;
    getUserid(): string;
    setUserid(value: string): GetUserMetadataResponse;
    getNamespaceid(): number;
    setNamespaceid(value: number): GetUserMetadataResponse;
    getValue(): Uint8Array | string;
    getValue_asU8(): Uint8Array;
    getValue_asB64(): string;
    setValue(value: Uint8Array | string): GetUserMetadataResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GetUserMetadataResponse.AsObject;
    static toObject(includeInstance: boolean, msg: GetUserMetadataResponse): GetUserMetadataResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GetUserMetadataResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GetUserMetadataResponse;
    static deserializeBinaryFromReader(message: GetUserMetadataResponse, reader: jspb.BinaryReader): GetUserMetadataResponse;
}

export namespace GetUserMetadataResponse {
    export type AsObject = {
        metadatakey: string,
        userid: string,
        namespaceid: number,
        value: Uint8Array | string,
    }
}

export class InsertUserMetadataRequest extends jspb.Message { 
    getMetadatakey(): string;
    setMetadatakey(value: string): InsertUserMetadataRequest;
    getValue(): Uint8Array | string;
    getValue_asU8(): Uint8Array;
    getValue_asB64(): string;
    setValue(value: Uint8Array | string): InsertUserMetadataRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): InsertUserMetadataRequest.AsObject;
    static toObject(includeInstance: boolean, msg: InsertUserMetadataRequest): InsertUserMetadataRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: InsertUserMetadataRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): InsertUserMetadataRequest;
    static deserializeBinaryFromReader(message: InsertUserMetadataRequest, reader: jspb.BinaryReader): InsertUserMetadataRequest;
}

export namespace InsertUserMetadataRequest {
    export type AsObject = {
        metadatakey: string,
        value: Uint8Array | string,
    }
}

export class InsertUserMetadataResponse extends jspb.Message { 
    getMetadatakey(): string;
    setMetadatakey(value: string): InsertUserMetadataResponse;
    getUserid(): string;
    setUserid(value: string): InsertUserMetadataResponse;
    getNamespaceid(): number;
    setNamespaceid(value: number): InsertUserMetadataResponse;
    getValue(): Uint8Array | string;
    getValue_asU8(): Uint8Array;
    getValue_asB64(): string;
    setValue(value: Uint8Array | string): InsertUserMetadataResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): InsertUserMetadataResponse.AsObject;
    static toObject(includeInstance: boolean, msg: InsertUserMetadataResponse): InsertUserMetadataResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: InsertUserMetadataResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): InsertUserMetadataResponse;
    static deserializeBinaryFromReader(message: InsertUserMetadataResponse, reader: jspb.BinaryReader): InsertUserMetadataResponse;
}

export namespace InsertUserMetadataResponse {
    export type AsObject = {
        metadatakey: string,
        userid: string,
        namespaceid: number,
        value: Uint8Array | string,
    }
}

export class UpdateUserMetadataRequest extends jspb.Message { 
    getMetadatakey(): string;
    setMetadatakey(value: string): UpdateUserMetadataRequest;
    getValue(): Uint8Array | string;
    getValue_asU8(): Uint8Array;
    getValue_asB64(): string;
    setValue(value: Uint8Array | string): UpdateUserMetadataRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): UpdateUserMetadataRequest.AsObject;
    static toObject(includeInstance: boolean, msg: UpdateUserMetadataRequest): UpdateUserMetadataRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: UpdateUserMetadataRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): UpdateUserMetadataRequest;
    static deserializeBinaryFromReader(message: UpdateUserMetadataRequest, reader: jspb.BinaryReader): UpdateUserMetadataRequest;
}

export namespace UpdateUserMetadataRequest {
    export type AsObject = {
        metadatakey: string,
        value: Uint8Array | string,
    }
}

export class UpdateUserMetadataResponse extends jspb.Message { 
    getMetadatakey(): string;
    setMetadatakey(value: string): UpdateUserMetadataResponse;
    getUserid(): string;
    setUserid(value: string): UpdateUserMetadataResponse;
    getNamespaceid(): number;
    setNamespaceid(value: number): UpdateUserMetadataResponse;
    getValue(): Uint8Array | string;
    getValue_asU8(): Uint8Array;
    getValue_asB64(): string;
    setValue(value: Uint8Array | string): UpdateUserMetadataResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): UpdateUserMetadataResponse.AsObject;
    static toObject(includeInstance: boolean, msg: UpdateUserMetadataResponse): UpdateUserMetadataResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: UpdateUserMetadataResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): UpdateUserMetadataResponse;
    static deserializeBinaryFromReader(message: UpdateUserMetadataResponse, reader: jspb.BinaryReader): UpdateUserMetadataResponse;
}

export namespace UpdateUserMetadataResponse {
    export type AsObject = {
        metadatakey: string,
        userid: string,
        namespaceid: number,
        value: Uint8Array | string,
    }
}

export class GetNamespaceMetadataRequest extends jspb.Message { 
    getMetadatakey(): string;
    setMetadatakey(value: string): GetNamespaceMetadataRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GetNamespaceMetadataRequest.AsObject;
    static toObject(includeInstance: boolean, msg: GetNamespaceMetadataRequest): GetNamespaceMetadataRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GetNamespaceMetadataRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GetNamespaceMetadataRequest;
    static deserializeBinaryFromReader(message: GetNamespaceMetadataRequest, reader: jspb.BinaryReader): GetNamespaceMetadataRequest;
}

export namespace GetNamespaceMetadataRequest {
    export type AsObject = {
        metadatakey: string,
    }
}

export class GetNamespaceMetadataResponse extends jspb.Message { 
    getMetadatakey(): string;
    setMetadatakey(value: string): GetNamespaceMetadataResponse;
    getNamespaceid(): number;
    setNamespaceid(value: number): GetNamespaceMetadataResponse;
    getValue(): Uint8Array | string;
    getValue_asU8(): Uint8Array;
    getValue_asB64(): string;
    setValue(value: Uint8Array | string): GetNamespaceMetadataResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GetNamespaceMetadataResponse.AsObject;
    static toObject(includeInstance: boolean, msg: GetNamespaceMetadataResponse): GetNamespaceMetadataResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GetNamespaceMetadataResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GetNamespaceMetadataResponse;
    static deserializeBinaryFromReader(message: GetNamespaceMetadataResponse, reader: jspb.BinaryReader): GetNamespaceMetadataResponse;
}

export namespace GetNamespaceMetadataResponse {
    export type AsObject = {
        metadatakey: string,
        namespaceid: number,
        value: Uint8Array | string,
    }
}

export class InsertNamespaceMetadataRequest extends jspb.Message { 
    getMetadatakey(): string;
    setMetadatakey(value: string): InsertNamespaceMetadataRequest;
    getValue(): Uint8Array | string;
    getValue_asU8(): Uint8Array;
    getValue_asB64(): string;
    setValue(value: Uint8Array | string): InsertNamespaceMetadataRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): InsertNamespaceMetadataRequest.AsObject;
    static toObject(includeInstance: boolean, msg: InsertNamespaceMetadataRequest): InsertNamespaceMetadataRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: InsertNamespaceMetadataRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): InsertNamespaceMetadataRequest;
    static deserializeBinaryFromReader(message: InsertNamespaceMetadataRequest, reader: jspb.BinaryReader): InsertNamespaceMetadataRequest;
}

export namespace InsertNamespaceMetadataRequest {
    export type AsObject = {
        metadatakey: string,
        value: Uint8Array | string,
    }
}

export class InsertNamespaceMetadataResponse extends jspb.Message { 
    getMetadatakey(): string;
    setMetadatakey(value: string): InsertNamespaceMetadataResponse;
    getNamespaceid(): number;
    setNamespaceid(value: number): InsertNamespaceMetadataResponse;
    getValue(): Uint8Array | string;
    getValue_asU8(): Uint8Array;
    getValue_asB64(): string;
    setValue(value: Uint8Array | string): InsertNamespaceMetadataResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): InsertNamespaceMetadataResponse.AsObject;
    static toObject(includeInstance: boolean, msg: InsertNamespaceMetadataResponse): InsertNamespaceMetadataResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: InsertNamespaceMetadataResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): InsertNamespaceMetadataResponse;
    static deserializeBinaryFromReader(message: InsertNamespaceMetadataResponse, reader: jspb.BinaryReader): InsertNamespaceMetadataResponse;
}

export namespace InsertNamespaceMetadataResponse {
    export type AsObject = {
        metadatakey: string,
        namespaceid: number,
        value: Uint8Array | string,
    }
}

export class UpdateNamespaceMetadataRequest extends jspb.Message { 
    getMetadatakey(): string;
    setMetadatakey(value: string): UpdateNamespaceMetadataRequest;
    getValue(): Uint8Array | string;
    getValue_asU8(): Uint8Array;
    getValue_asB64(): string;
    setValue(value: Uint8Array | string): UpdateNamespaceMetadataRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): UpdateNamespaceMetadataRequest.AsObject;
    static toObject(includeInstance: boolean, msg: UpdateNamespaceMetadataRequest): UpdateNamespaceMetadataRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: UpdateNamespaceMetadataRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): UpdateNamespaceMetadataRequest;
    static deserializeBinaryFromReader(message: UpdateNamespaceMetadataRequest, reader: jspb.BinaryReader): UpdateNamespaceMetadataRequest;
}

export namespace UpdateNamespaceMetadataRequest {
    export type AsObject = {
        metadatakey: string,
        value: Uint8Array | string,
    }
}

export class UpdateNamespaceMetadataResponse extends jspb.Message { 
    getMetadatakey(): string;
    setMetadatakey(value: string): UpdateNamespaceMetadataResponse;
    getNamespaceid(): number;
    setNamespaceid(value: number): UpdateNamespaceMetadataResponse;
    getValue(): Uint8Array | string;
    getValue_asU8(): Uint8Array;
    getValue_asB64(): string;
    setValue(value: Uint8Array | string): UpdateNamespaceMetadataResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): UpdateNamespaceMetadataResponse.AsObject;
    static toObject(includeInstance: boolean, msg: UpdateNamespaceMetadataResponse): UpdateNamespaceMetadataResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: UpdateNamespaceMetadataResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): UpdateNamespaceMetadataResponse;
    static deserializeBinaryFromReader(message: UpdateNamespaceMetadataResponse, reader: jspb.BinaryReader): UpdateNamespaceMetadataResponse;
}

export namespace UpdateNamespaceMetadataResponse {
    export type AsObject = {
        metadatakey: string,
        namespaceid: number,
        value: Uint8Array | string,
    }
}
