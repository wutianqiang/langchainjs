// package: tigrisdata.v1
// file: server/v1/api.proto

/* tslint:disable */
/* eslint-disable */

import * as jspb from "google-protobuf";
import * as google_protobuf_timestamp_pb from "google-protobuf/google/protobuf/timestamp_pb";
import * as openapiv3_annotations_pb from "../../openapiv3/annotations_pb";

export class WriteOptions extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): WriteOptions.AsObject;
    static toObject(includeInstance: boolean, msg: WriteOptions): WriteOptions.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: WriteOptions, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): WriteOptions;
    static deserializeBinaryFromReader(message: WriteOptions, reader: jspb.BinaryReader): WriteOptions;
}

export namespace WriteOptions {
    export type AsObject = {
    }
}

export class Collation extends jspb.Message { 
    getCase(): string;
    setCase(value: string): Collation;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Collation.AsObject;
    static toObject(includeInstance: boolean, msg: Collation): Collation.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Collation, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Collation;
    static deserializeBinaryFromReader(message: Collation, reader: jspb.BinaryReader): Collation;
}

export namespace Collation {
    export type AsObject = {
        pb_case: string,
    }
}

export class ReadRequestOptions extends jspb.Message { 
    getLimit(): number;
    setLimit(value: number): ReadRequestOptions;
    getSkip(): number;
    setSkip(value: number): ReadRequestOptions;
    getOffset(): Uint8Array | string;
    getOffset_asU8(): Uint8Array;
    getOffset_asB64(): string;
    setOffset(value: Uint8Array | string): ReadRequestOptions;

    hasCollation(): boolean;
    clearCollation(): void;
    getCollation(): Collation | undefined;
    setCollation(value?: Collation): ReadRequestOptions;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ReadRequestOptions.AsObject;
    static toObject(includeInstance: boolean, msg: ReadRequestOptions): ReadRequestOptions.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ReadRequestOptions, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ReadRequestOptions;
    static deserializeBinaryFromReader(message: ReadRequestOptions, reader: jspb.BinaryReader): ReadRequestOptions;
}

export namespace ReadRequestOptions {
    export type AsObject = {
        limit: number,
        skip: number,
        offset: Uint8Array | string,
        collation?: Collation.AsObject,
    }
}

export class DatabaseOptions extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DatabaseOptions.AsObject;
    static toObject(includeInstance: boolean, msg: DatabaseOptions): DatabaseOptions.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DatabaseOptions, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DatabaseOptions;
    static deserializeBinaryFromReader(message: DatabaseOptions, reader: jspb.BinaryReader): DatabaseOptions;
}

export namespace DatabaseOptions {
    export type AsObject = {
    }
}

export class CollectionOptions extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CollectionOptions.AsObject;
    static toObject(includeInstance: boolean, msg: CollectionOptions): CollectionOptions.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CollectionOptions, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CollectionOptions;
    static deserializeBinaryFromReader(message: CollectionOptions, reader: jspb.BinaryReader): CollectionOptions;
}

export namespace CollectionOptions {
    export type AsObject = {
    }
}

export class TransactionOptions extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): TransactionOptions.AsObject;
    static toObject(includeInstance: boolean, msg: TransactionOptions): TransactionOptions.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: TransactionOptions, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): TransactionOptions;
    static deserializeBinaryFromReader(message: TransactionOptions, reader: jspb.BinaryReader): TransactionOptions;
}

export namespace TransactionOptions {
    export type AsObject = {
    }
}

export class TransactionCtx extends jspb.Message { 
    getId(): string;
    setId(value: string): TransactionCtx;
    getOrigin(): string;
    setOrigin(value: string): TransactionCtx;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): TransactionCtx.AsObject;
    static toObject(includeInstance: boolean, msg: TransactionCtx): TransactionCtx.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: TransactionCtx, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): TransactionCtx;
    static deserializeBinaryFromReader(message: TransactionCtx, reader: jspb.BinaryReader): TransactionCtx;
}

export namespace TransactionCtx {
    export type AsObject = {
        id: string,
        origin: string,
    }
}

export class BeginTransactionRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): BeginTransactionRequest;

    hasOptions(): boolean;
    clearOptions(): void;
    getOptions(): TransactionOptions | undefined;
    setOptions(value?: TransactionOptions): BeginTransactionRequest;
    getBranch(): string;
    setBranch(value: string): BeginTransactionRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): BeginTransactionRequest.AsObject;
    static toObject(includeInstance: boolean, msg: BeginTransactionRequest): BeginTransactionRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: BeginTransactionRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): BeginTransactionRequest;
    static deserializeBinaryFromReader(message: BeginTransactionRequest, reader: jspb.BinaryReader): BeginTransactionRequest;
}

export namespace BeginTransactionRequest {
    export type AsObject = {
        project: string,
        options?: TransactionOptions.AsObject,
        branch: string,
    }
}

export class BeginTransactionResponse extends jspb.Message { 

    hasTxCtx(): boolean;
    clearTxCtx(): void;
    getTxCtx(): TransactionCtx | undefined;
    setTxCtx(value?: TransactionCtx): BeginTransactionResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): BeginTransactionResponse.AsObject;
    static toObject(includeInstance: boolean, msg: BeginTransactionResponse): BeginTransactionResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: BeginTransactionResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): BeginTransactionResponse;
    static deserializeBinaryFromReader(message: BeginTransactionResponse, reader: jspb.BinaryReader): BeginTransactionResponse;
}

export namespace BeginTransactionResponse {
    export type AsObject = {
        txCtx?: TransactionCtx.AsObject,
    }
}

export class CommitTransactionRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): CommitTransactionRequest;
    getBranch(): string;
    setBranch(value: string): CommitTransactionRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CommitTransactionRequest.AsObject;
    static toObject(includeInstance: boolean, msg: CommitTransactionRequest): CommitTransactionRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CommitTransactionRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CommitTransactionRequest;
    static deserializeBinaryFromReader(message: CommitTransactionRequest, reader: jspb.BinaryReader): CommitTransactionRequest;
}

export namespace CommitTransactionRequest {
    export type AsObject = {
        project: string,
        branch: string,
    }
}

export class CommitTransactionResponse extends jspb.Message { 
    getStatus(): string;
    setStatus(value: string): CommitTransactionResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CommitTransactionResponse.AsObject;
    static toObject(includeInstance: boolean, msg: CommitTransactionResponse): CommitTransactionResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CommitTransactionResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CommitTransactionResponse;
    static deserializeBinaryFromReader(message: CommitTransactionResponse, reader: jspb.BinaryReader): CommitTransactionResponse;
}

export namespace CommitTransactionResponse {
    export type AsObject = {
        status: string,
    }
}

export class RollbackTransactionRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): RollbackTransactionRequest;
    getBranch(): string;
    setBranch(value: string): RollbackTransactionRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): RollbackTransactionRequest.AsObject;
    static toObject(includeInstance: boolean, msg: RollbackTransactionRequest): RollbackTransactionRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: RollbackTransactionRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): RollbackTransactionRequest;
    static deserializeBinaryFromReader(message: RollbackTransactionRequest, reader: jspb.BinaryReader): RollbackTransactionRequest;
}

export namespace RollbackTransactionRequest {
    export type AsObject = {
        project: string,
        branch: string,
    }
}

export class RollbackTransactionResponse extends jspb.Message { 
    getStatus(): string;
    setStatus(value: string): RollbackTransactionResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): RollbackTransactionResponse.AsObject;
    static toObject(includeInstance: boolean, msg: RollbackTransactionResponse): RollbackTransactionResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: RollbackTransactionResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): RollbackTransactionResponse;
    static deserializeBinaryFromReader(message: RollbackTransactionResponse, reader: jspb.BinaryReader): RollbackTransactionResponse;
}

export namespace RollbackTransactionResponse {
    export type AsObject = {
        status: string,
    }
}

export class InsertRequestOptions extends jspb.Message { 

    hasWriteOptions(): boolean;
    clearWriteOptions(): void;
    getWriteOptions(): WriteOptions | undefined;
    setWriteOptions(value?: WriteOptions): InsertRequestOptions;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): InsertRequestOptions.AsObject;
    static toObject(includeInstance: boolean, msg: InsertRequestOptions): InsertRequestOptions.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: InsertRequestOptions, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): InsertRequestOptions;
    static deserializeBinaryFromReader(message: InsertRequestOptions, reader: jspb.BinaryReader): InsertRequestOptions;
}

export namespace InsertRequestOptions {
    export type AsObject = {
        writeOptions?: WriteOptions.AsObject,
    }
}

export class ImportRequestOptions extends jspb.Message { 

    hasWriteOptions(): boolean;
    clearWriteOptions(): void;
    getWriteOptions(): WriteOptions | undefined;
    setWriteOptions(value?: WriteOptions): ImportRequestOptions;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ImportRequestOptions.AsObject;
    static toObject(includeInstance: boolean, msg: ImportRequestOptions): ImportRequestOptions.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ImportRequestOptions, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ImportRequestOptions;
    static deserializeBinaryFromReader(message: ImportRequestOptions, reader: jspb.BinaryReader): ImportRequestOptions;
}

export namespace ImportRequestOptions {
    export type AsObject = {
        writeOptions?: WriteOptions.AsObject,
    }
}

export class ResponseMetadata extends jspb.Message { 

    hasCreatedAt(): boolean;
    clearCreatedAt(): void;
    getCreatedAt(): google_protobuf_timestamp_pb.Timestamp | undefined;
    setCreatedAt(value?: google_protobuf_timestamp_pb.Timestamp): ResponseMetadata;

    hasUpdatedAt(): boolean;
    clearUpdatedAt(): void;
    getUpdatedAt(): google_protobuf_timestamp_pb.Timestamp | undefined;
    setUpdatedAt(value?: google_protobuf_timestamp_pb.Timestamp): ResponseMetadata;

    hasDeletedAt(): boolean;
    clearDeletedAt(): void;
    getDeletedAt(): google_protobuf_timestamp_pb.Timestamp | undefined;
    setDeletedAt(value?: google_protobuf_timestamp_pb.Timestamp): ResponseMetadata;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ResponseMetadata.AsObject;
    static toObject(includeInstance: boolean, msg: ResponseMetadata): ResponseMetadata.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ResponseMetadata, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ResponseMetadata;
    static deserializeBinaryFromReader(message: ResponseMetadata, reader: jspb.BinaryReader): ResponseMetadata;
}

export namespace ResponseMetadata {
    export type AsObject = {
        createdAt?: google_protobuf_timestamp_pb.Timestamp.AsObject,
        updatedAt?: google_protobuf_timestamp_pb.Timestamp.AsObject,
        deletedAt?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    }
}

export class InsertRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): InsertRequest;
    getCollection(): string;
    setCollection(value: string): InsertRequest;
    clearDocumentsList(): void;
    getDocumentsList(): Array<Uint8Array | string>;
    getDocumentsList_asU8(): Array<Uint8Array>;
    getDocumentsList_asB64(): Array<string>;
    setDocumentsList(value: Array<Uint8Array | string>): InsertRequest;
    addDocuments(value: Uint8Array | string, index?: number): Uint8Array | string;

    hasOptions(): boolean;
    clearOptions(): void;
    getOptions(): InsertRequestOptions | undefined;
    setOptions(value?: InsertRequestOptions): InsertRequest;
    getBranch(): string;
    setBranch(value: string): InsertRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): InsertRequest.AsObject;
    static toObject(includeInstance: boolean, msg: InsertRequest): InsertRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: InsertRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): InsertRequest;
    static deserializeBinaryFromReader(message: InsertRequest, reader: jspb.BinaryReader): InsertRequest;
}

export namespace InsertRequest {
    export type AsObject = {
        project: string,
        collection: string,
        documentsList: Array<Uint8Array | string>,
        options?: InsertRequestOptions.AsObject,
        branch: string,
    }
}

export class InsertResponse extends jspb.Message { 

    hasMetadata(): boolean;
    clearMetadata(): void;
    getMetadata(): ResponseMetadata | undefined;
    setMetadata(value?: ResponseMetadata): InsertResponse;
    getStatus(): string;
    setStatus(value: string): InsertResponse;
    clearKeysList(): void;
    getKeysList(): Array<Uint8Array | string>;
    getKeysList_asU8(): Array<Uint8Array>;
    getKeysList_asB64(): Array<string>;
    setKeysList(value: Array<Uint8Array | string>): InsertResponse;
    addKeys(value: Uint8Array | string, index?: number): Uint8Array | string;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): InsertResponse.AsObject;
    static toObject(includeInstance: boolean, msg: InsertResponse): InsertResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: InsertResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): InsertResponse;
    static deserializeBinaryFromReader(message: InsertResponse, reader: jspb.BinaryReader): InsertResponse;
}

export namespace InsertResponse {
    export type AsObject = {
        metadata?: ResponseMetadata.AsObject,
        status: string,
        keysList: Array<Uint8Array | string>,
    }
}

export class ImportRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): ImportRequest;
    getCollection(): string;
    setCollection(value: string): ImportRequest;
    clearDocumentsList(): void;
    getDocumentsList(): Array<Uint8Array | string>;
    getDocumentsList_asU8(): Array<Uint8Array>;
    getDocumentsList_asB64(): Array<string>;
    setDocumentsList(value: Array<Uint8Array | string>): ImportRequest;
    addDocuments(value: Uint8Array | string, index?: number): Uint8Array | string;

    hasOptions(): boolean;
    clearOptions(): void;
    getOptions(): ImportRequestOptions | undefined;
    setOptions(value?: ImportRequestOptions): ImportRequest;
    getBranch(): string;
    setBranch(value: string): ImportRequest;
    getCreateCollection(): boolean;
    setCreateCollection(value: boolean): ImportRequest;
    clearPrimaryKeyList(): void;
    getPrimaryKeyList(): Array<string>;
    setPrimaryKeyList(value: Array<string>): ImportRequest;
    addPrimaryKey(value: string, index?: number): string;
    clearAutogeneratedList(): void;
    getAutogeneratedList(): Array<string>;
    setAutogeneratedList(value: Array<string>): ImportRequest;
    addAutogenerated(value: string, index?: number): string;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ImportRequest.AsObject;
    static toObject(includeInstance: boolean, msg: ImportRequest): ImportRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ImportRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ImportRequest;
    static deserializeBinaryFromReader(message: ImportRequest, reader: jspb.BinaryReader): ImportRequest;
}

export namespace ImportRequest {
    export type AsObject = {
        project: string,
        collection: string,
        documentsList: Array<Uint8Array | string>,
        options?: ImportRequestOptions.AsObject,
        branch: string,
        createCollection: boolean,
        primaryKeyList: Array<string>,
        autogeneratedList: Array<string>,
    }
}

export class ImportResponse extends jspb.Message { 

    hasMetadata(): boolean;
    clearMetadata(): void;
    getMetadata(): ResponseMetadata | undefined;
    setMetadata(value?: ResponseMetadata): ImportResponse;
    getStatus(): string;
    setStatus(value: string): ImportResponse;
    clearKeysList(): void;
    getKeysList(): Array<Uint8Array | string>;
    getKeysList_asU8(): Array<Uint8Array>;
    getKeysList_asB64(): Array<string>;
    setKeysList(value: Array<Uint8Array | string>): ImportResponse;
    addKeys(value: Uint8Array | string, index?: number): Uint8Array | string;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ImportResponse.AsObject;
    static toObject(includeInstance: boolean, msg: ImportResponse): ImportResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ImportResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ImportResponse;
    static deserializeBinaryFromReader(message: ImportResponse, reader: jspb.BinaryReader): ImportResponse;
}

export namespace ImportResponse {
    export type AsObject = {
        metadata?: ResponseMetadata.AsObject,
        status: string,
        keysList: Array<Uint8Array | string>,
    }
}

export class ReplaceRequestOptions extends jspb.Message { 

    hasWriteOptions(): boolean;
    clearWriteOptions(): void;
    getWriteOptions(): WriteOptions | undefined;
    setWriteOptions(value?: WriteOptions): ReplaceRequestOptions;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ReplaceRequestOptions.AsObject;
    static toObject(includeInstance: boolean, msg: ReplaceRequestOptions): ReplaceRequestOptions.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ReplaceRequestOptions, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ReplaceRequestOptions;
    static deserializeBinaryFromReader(message: ReplaceRequestOptions, reader: jspb.BinaryReader): ReplaceRequestOptions;
}

export namespace ReplaceRequestOptions {
    export type AsObject = {
        writeOptions?: WriteOptions.AsObject,
    }
}

export class ReplaceRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): ReplaceRequest;
    getCollection(): string;
    setCollection(value: string): ReplaceRequest;
    clearDocumentsList(): void;
    getDocumentsList(): Array<Uint8Array | string>;
    getDocumentsList_asU8(): Array<Uint8Array>;
    getDocumentsList_asB64(): Array<string>;
    setDocumentsList(value: Array<Uint8Array | string>): ReplaceRequest;
    addDocuments(value: Uint8Array | string, index?: number): Uint8Array | string;

    hasOptions(): boolean;
    clearOptions(): void;
    getOptions(): ReplaceRequestOptions | undefined;
    setOptions(value?: ReplaceRequestOptions): ReplaceRequest;
    getBranch(): string;
    setBranch(value: string): ReplaceRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ReplaceRequest.AsObject;
    static toObject(includeInstance: boolean, msg: ReplaceRequest): ReplaceRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ReplaceRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ReplaceRequest;
    static deserializeBinaryFromReader(message: ReplaceRequest, reader: jspb.BinaryReader): ReplaceRequest;
}

export namespace ReplaceRequest {
    export type AsObject = {
        project: string,
        collection: string,
        documentsList: Array<Uint8Array | string>,
        options?: ReplaceRequestOptions.AsObject,
        branch: string,
    }
}

export class ReplaceResponse extends jspb.Message { 

    hasMetadata(): boolean;
    clearMetadata(): void;
    getMetadata(): ResponseMetadata | undefined;
    setMetadata(value?: ResponseMetadata): ReplaceResponse;
    getStatus(): string;
    setStatus(value: string): ReplaceResponse;
    clearKeysList(): void;
    getKeysList(): Array<Uint8Array | string>;
    getKeysList_asU8(): Array<Uint8Array>;
    getKeysList_asB64(): Array<string>;
    setKeysList(value: Array<Uint8Array | string>): ReplaceResponse;
    addKeys(value: Uint8Array | string, index?: number): Uint8Array | string;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ReplaceResponse.AsObject;
    static toObject(includeInstance: boolean, msg: ReplaceResponse): ReplaceResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ReplaceResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ReplaceResponse;
    static deserializeBinaryFromReader(message: ReplaceResponse, reader: jspb.BinaryReader): ReplaceResponse;
}

export namespace ReplaceResponse {
    export type AsObject = {
        metadata?: ResponseMetadata.AsObject,
        status: string,
        keysList: Array<Uint8Array | string>,
    }
}

export class DeleteRequestOptions extends jspb.Message { 

    hasWriteOptions(): boolean;
    clearWriteOptions(): void;
    getWriteOptions(): WriteOptions | undefined;
    setWriteOptions(value?: WriteOptions): DeleteRequestOptions;

    hasCollation(): boolean;
    clearCollation(): void;
    getCollation(): Collation | undefined;
    setCollation(value?: Collation): DeleteRequestOptions;
    getLimit(): number;
    setLimit(value: number): DeleteRequestOptions;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DeleteRequestOptions.AsObject;
    static toObject(includeInstance: boolean, msg: DeleteRequestOptions): DeleteRequestOptions.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DeleteRequestOptions, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DeleteRequestOptions;
    static deserializeBinaryFromReader(message: DeleteRequestOptions, reader: jspb.BinaryReader): DeleteRequestOptions;
}

export namespace DeleteRequestOptions {
    export type AsObject = {
        writeOptions?: WriteOptions.AsObject,
        collation?: Collation.AsObject,
        limit: number,
    }
}

export class DeleteRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): DeleteRequest;
    getCollection(): string;
    setCollection(value: string): DeleteRequest;
    getFilter(): Uint8Array | string;
    getFilter_asU8(): Uint8Array;
    getFilter_asB64(): string;
    setFilter(value: Uint8Array | string): DeleteRequest;

    hasOptions(): boolean;
    clearOptions(): void;
    getOptions(): DeleteRequestOptions | undefined;
    setOptions(value?: DeleteRequestOptions): DeleteRequest;
    getBranch(): string;
    setBranch(value: string): DeleteRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DeleteRequest.AsObject;
    static toObject(includeInstance: boolean, msg: DeleteRequest): DeleteRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DeleteRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DeleteRequest;
    static deserializeBinaryFromReader(message: DeleteRequest, reader: jspb.BinaryReader): DeleteRequest;
}

export namespace DeleteRequest {
    export type AsObject = {
        project: string,
        collection: string,
        filter: Uint8Array | string,
        options?: DeleteRequestOptions.AsObject,
        branch: string,
    }
}

export class DeleteResponse extends jspb.Message { 

    hasMetadata(): boolean;
    clearMetadata(): void;
    getMetadata(): ResponseMetadata | undefined;
    setMetadata(value?: ResponseMetadata): DeleteResponse;
    getStatus(): string;
    setStatus(value: string): DeleteResponse;
    getDeletedCount(): number;
    setDeletedCount(value: number): DeleteResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DeleteResponse.AsObject;
    static toObject(includeInstance: boolean, msg: DeleteResponse): DeleteResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DeleteResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DeleteResponse;
    static deserializeBinaryFromReader(message: DeleteResponse, reader: jspb.BinaryReader): DeleteResponse;
}

export namespace DeleteResponse {
    export type AsObject = {
        metadata?: ResponseMetadata.AsObject,
        status: string,
        deletedCount: number,
    }
}

export class UpdateRequestOptions extends jspb.Message { 

    hasWriteOptions(): boolean;
    clearWriteOptions(): void;
    getWriteOptions(): WriteOptions | undefined;
    setWriteOptions(value?: WriteOptions): UpdateRequestOptions;

    hasCollation(): boolean;
    clearCollation(): void;
    getCollation(): Collation | undefined;
    setCollation(value?: Collation): UpdateRequestOptions;
    getLimit(): number;
    setLimit(value: number): UpdateRequestOptions;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): UpdateRequestOptions.AsObject;
    static toObject(includeInstance: boolean, msg: UpdateRequestOptions): UpdateRequestOptions.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: UpdateRequestOptions, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): UpdateRequestOptions;
    static deserializeBinaryFromReader(message: UpdateRequestOptions, reader: jspb.BinaryReader): UpdateRequestOptions;
}

export namespace UpdateRequestOptions {
    export type AsObject = {
        writeOptions?: WriteOptions.AsObject,
        collation?: Collation.AsObject,
        limit: number,
    }
}

export class UpdateRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): UpdateRequest;
    getCollection(): string;
    setCollection(value: string): UpdateRequest;
    getFields(): Uint8Array | string;
    getFields_asU8(): Uint8Array;
    getFields_asB64(): string;
    setFields(value: Uint8Array | string): UpdateRequest;
    getFilter(): Uint8Array | string;
    getFilter_asU8(): Uint8Array;
    getFilter_asB64(): string;
    setFilter(value: Uint8Array | string): UpdateRequest;

    hasOptions(): boolean;
    clearOptions(): void;
    getOptions(): UpdateRequestOptions | undefined;
    setOptions(value?: UpdateRequestOptions): UpdateRequest;
    getBranch(): string;
    setBranch(value: string): UpdateRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): UpdateRequest.AsObject;
    static toObject(includeInstance: boolean, msg: UpdateRequest): UpdateRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: UpdateRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): UpdateRequest;
    static deserializeBinaryFromReader(message: UpdateRequest, reader: jspb.BinaryReader): UpdateRequest;
}

export namespace UpdateRequest {
    export type AsObject = {
        project: string,
        collection: string,
        fields: Uint8Array | string,
        filter: Uint8Array | string,
        options?: UpdateRequestOptions.AsObject,
        branch: string,
    }
}

export class UpdateResponse extends jspb.Message { 

    hasMetadata(): boolean;
    clearMetadata(): void;
    getMetadata(): ResponseMetadata | undefined;
    setMetadata(value?: ResponseMetadata): UpdateResponse;
    getModifiedCount(): number;
    setModifiedCount(value: number): UpdateResponse;
    getStatus(): string;
    setStatus(value: string): UpdateResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): UpdateResponse.AsObject;
    static toObject(includeInstance: boolean, msg: UpdateResponse): UpdateResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: UpdateResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): UpdateResponse;
    static deserializeBinaryFromReader(message: UpdateResponse, reader: jspb.BinaryReader): UpdateResponse;
}

export namespace UpdateResponse {
    export type AsObject = {
        metadata?: ResponseMetadata.AsObject,
        modifiedCount: number,
        status: string,
    }
}

export class ReadRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): ReadRequest;
    getCollection(): string;
    setCollection(value: string): ReadRequest;
    getFilter(): Uint8Array | string;
    getFilter_asU8(): Uint8Array;
    getFilter_asB64(): string;
    setFilter(value: Uint8Array | string): ReadRequest;
    getFields(): Uint8Array | string;
    getFields_asU8(): Uint8Array;
    getFields_asB64(): string;
    setFields(value: Uint8Array | string): ReadRequest;

    hasOptions(): boolean;
    clearOptions(): void;
    getOptions(): ReadRequestOptions | undefined;
    setOptions(value?: ReadRequestOptions): ReadRequest;
    getSort(): Uint8Array | string;
    getSort_asU8(): Uint8Array;
    getSort_asB64(): string;
    setSort(value: Uint8Array | string): ReadRequest;
    getBranch(): string;
    setBranch(value: string): ReadRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ReadRequest.AsObject;
    static toObject(includeInstance: boolean, msg: ReadRequest): ReadRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ReadRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ReadRequest;
    static deserializeBinaryFromReader(message: ReadRequest, reader: jspb.BinaryReader): ReadRequest;
}

export namespace ReadRequest {
    export type AsObject = {
        project: string,
        collection: string,
        filter: Uint8Array | string,
        fields: Uint8Array | string,
        options?: ReadRequestOptions.AsObject,
        sort: Uint8Array | string,
        branch: string,
    }
}

export class ReadResponse extends jspb.Message { 
    getData(): Uint8Array | string;
    getData_asU8(): Uint8Array;
    getData_asB64(): string;
    setData(value: Uint8Array | string): ReadResponse;
    getResumeToken(): Uint8Array | string;
    getResumeToken_asU8(): Uint8Array;
    getResumeToken_asB64(): string;
    setResumeToken(value: Uint8Array | string): ReadResponse;

    hasMetadata(): boolean;
    clearMetadata(): void;
    getMetadata(): ResponseMetadata | undefined;
    setMetadata(value?: ResponseMetadata): ReadResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ReadResponse.AsObject;
    static toObject(includeInstance: boolean, msg: ReadResponse): ReadResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ReadResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ReadResponse;
    static deserializeBinaryFromReader(message: ReadResponse, reader: jspb.BinaryReader): ReadResponse;
}

export namespace ReadResponse {
    export type AsObject = {
        data: Uint8Array | string,
        resumeToken: Uint8Array | string,
        metadata?: ResponseMetadata.AsObject,
    }
}

export class CountRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): CountRequest;
    getCollection(): string;
    setCollection(value: string): CountRequest;
    getFilter(): Uint8Array | string;
    getFilter_asU8(): Uint8Array;
    getFilter_asB64(): string;
    setFilter(value: Uint8Array | string): CountRequest;
    getBranch(): string;
    setBranch(value: string): CountRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CountRequest.AsObject;
    static toObject(includeInstance: boolean, msg: CountRequest): CountRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CountRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CountRequest;
    static deserializeBinaryFromReader(message: CountRequest, reader: jspb.BinaryReader): CountRequest;
}

export namespace CountRequest {
    export type AsObject = {
        project: string,
        collection: string,
        filter: Uint8Array | string,
        branch: string,
    }
}

export class CountResponse extends jspb.Message { 
    getCount(): number;
    setCount(value: number): CountResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CountResponse.AsObject;
    static toObject(includeInstance: boolean, msg: CountResponse): CountResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CountResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CountResponse;
    static deserializeBinaryFromReader(message: CountResponse, reader: jspb.BinaryReader): CountResponse;
}

export namespace CountResponse {
    export type AsObject = {
        count: number,
    }
}

export class ExplainResponse extends jspb.Message { 
    getCollection(): string;
    setCollection(value: string): ExplainResponse;
    getReadType(): string;
    setReadType(value: string): ExplainResponse;
    getFilter(): string;
    setFilter(value: string): ExplainResponse;
    getSorting(): string;
    setSorting(value: string): ExplainResponse;
    clearKeyRangeList(): void;
    getKeyRangeList(): Array<string>;
    setKeyRangeList(value: Array<string>): ExplainResponse;
    addKeyRange(value: string, index?: number): string;
    getField(): string;
    setField(value: string): ExplainResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ExplainResponse.AsObject;
    static toObject(includeInstance: boolean, msg: ExplainResponse): ExplainResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ExplainResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ExplainResponse;
    static deserializeBinaryFromReader(message: ExplainResponse, reader: jspb.BinaryReader): ExplainResponse;
}

export namespace ExplainResponse {
    export type AsObject = {
        collection: string,
        readType: string,
        filter: string,
        sorting: string,
        keyRangeList: Array<string>,
        field: string,
    }
}

export class SearchRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): SearchRequest;
    getCollection(): string;
    setCollection(value: string): SearchRequest;
    getQ(): string;
    setQ(value: string): SearchRequest;
    clearSearchFieldsList(): void;
    getSearchFieldsList(): Array<string>;
    setSearchFieldsList(value: Array<string>): SearchRequest;
    addSearchFields(value: string, index?: number): string;
    getFilter(): Uint8Array | string;
    getFilter_asU8(): Uint8Array;
    getFilter_asB64(): string;
    setFilter(value: Uint8Array | string): SearchRequest;
    getFacet(): Uint8Array | string;
    getFacet_asU8(): Uint8Array;
    getFacet_asB64(): string;
    setFacet(value: Uint8Array | string): SearchRequest;
    getSort(): Uint8Array | string;
    getSort_asU8(): Uint8Array;
    getSort_asB64(): string;
    setSort(value: Uint8Array | string): SearchRequest;
    clearIncludeFieldsList(): void;
    getIncludeFieldsList(): Array<string>;
    setIncludeFieldsList(value: Array<string>): SearchRequest;
    addIncludeFields(value: string, index?: number): string;
    clearExcludeFieldsList(): void;
    getExcludeFieldsList(): Array<string>;
    setExcludeFieldsList(value: Array<string>): SearchRequest;
    addExcludeFields(value: string, index?: number): string;
    getPageSize(): number;
    setPageSize(value: number): SearchRequest;
    getPage(): number;
    setPage(value: number): SearchRequest;

    hasCollation(): boolean;
    clearCollation(): void;
    getCollation(): Collation | undefined;
    setCollation(value?: Collation): SearchRequest;
    getBranch(): string;
    setBranch(value: string): SearchRequest;
    getGroupBy(): Uint8Array | string;
    getGroupBy_asU8(): Uint8Array;
    getGroupBy_asB64(): string;
    setGroupBy(value: Uint8Array | string): SearchRequest;
    getVector(): Uint8Array | string;
    getVector_asU8(): Uint8Array;
    getVector_asB64(): string;
    setVector(value: Uint8Array | string): SearchRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): SearchRequest.AsObject;
    static toObject(includeInstance: boolean, msg: SearchRequest): SearchRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: SearchRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): SearchRequest;
    static deserializeBinaryFromReader(message: SearchRequest, reader: jspb.BinaryReader): SearchRequest;
}

export namespace SearchRequest {
    export type AsObject = {
        project: string,
        collection: string,
        q: string,
        searchFieldsList: Array<string>,
        filter: Uint8Array | string,
        facet: Uint8Array | string,
        sort: Uint8Array | string,
        includeFieldsList: Array<string>,
        excludeFieldsList: Array<string>,
        pageSize: number,
        page: number,
        collation?: Collation.AsObject,
        branch: string,
        groupBy: Uint8Array | string,
        vector: Uint8Array | string,
    }
}

export class SearchResponse extends jspb.Message { 
    clearHitsList(): void;
    getHitsList(): Array<SearchHit>;
    setHitsList(value: Array<SearchHit>): SearchResponse;
    addHits(value?: SearchHit, index?: number): SearchHit;

    getFacetsMap(): jspb.Map<string, SearchFacet>;
    clearFacetsMap(): void;

    hasMeta(): boolean;
    clearMeta(): void;
    getMeta(): SearchMetadata | undefined;
    setMeta(value?: SearchMetadata): SearchResponse;
    clearGroupList(): void;
    getGroupList(): Array<GroupedSearchHits>;
    setGroupList(value: Array<GroupedSearchHits>): SearchResponse;
    addGroup(value?: GroupedSearchHits, index?: number): GroupedSearchHits;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): SearchResponse.AsObject;
    static toObject(includeInstance: boolean, msg: SearchResponse): SearchResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: SearchResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): SearchResponse;
    static deserializeBinaryFromReader(message: SearchResponse, reader: jspb.BinaryReader): SearchResponse;
}

export namespace SearchResponse {
    export type AsObject = {
        hitsList: Array<SearchHit.AsObject>,

        facetsMap: Array<[string, SearchFacet.AsObject]>,
        meta?: SearchMetadata.AsObject,
        groupList: Array<GroupedSearchHits.AsObject>,
    }
}

export class SearchHit extends jspb.Message { 
    getData(): Uint8Array | string;
    getData_asU8(): Uint8Array;
    getData_asB64(): string;
    setData(value: Uint8Array | string): SearchHit;

    hasMetadata(): boolean;
    clearMetadata(): void;
    getMetadata(): SearchHitMeta | undefined;
    setMetadata(value?: SearchHitMeta): SearchHit;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): SearchHit.AsObject;
    static toObject(includeInstance: boolean, msg: SearchHit): SearchHit.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: SearchHit, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): SearchHit;
    static deserializeBinaryFromReader(message: SearchHit, reader: jspb.BinaryReader): SearchHit;
}

export namespace SearchHit {
    export type AsObject = {
        data: Uint8Array | string,
        metadata?: SearchHitMeta.AsObject,
    }
}

export class SearchHitMeta extends jspb.Message { 

    hasCreatedAt(): boolean;
    clearCreatedAt(): void;
    getCreatedAt(): google_protobuf_timestamp_pb.Timestamp | undefined;
    setCreatedAt(value?: google_protobuf_timestamp_pb.Timestamp): SearchHitMeta;

    hasUpdatedAt(): boolean;
    clearUpdatedAt(): void;
    getUpdatedAt(): google_protobuf_timestamp_pb.Timestamp | undefined;
    setUpdatedAt(value?: google_protobuf_timestamp_pb.Timestamp): SearchHitMeta;

    hasMatch(): boolean;
    clearMatch(): void;
    getMatch(): Match | undefined;
    setMatch(value?: Match): SearchHitMeta;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): SearchHitMeta.AsObject;
    static toObject(includeInstance: boolean, msg: SearchHitMeta): SearchHitMeta.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: SearchHitMeta, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): SearchHitMeta;
    static deserializeBinaryFromReader(message: SearchHitMeta, reader: jspb.BinaryReader): SearchHitMeta;
}

export namespace SearchHitMeta {
    export type AsObject = {
        createdAt?: google_protobuf_timestamp_pb.Timestamp.AsObject,
        updatedAt?: google_protobuf_timestamp_pb.Timestamp.AsObject,
        match?: Match.AsObject,
    }
}

export class SearchFacet extends jspb.Message { 
    clearCountsList(): void;
    getCountsList(): Array<FacetCount>;
    setCountsList(value: Array<FacetCount>): SearchFacet;
    addCounts(value?: FacetCount, index?: number): FacetCount;

    hasStats(): boolean;
    clearStats(): void;
    getStats(): FacetStats | undefined;
    setStats(value?: FacetStats): SearchFacet;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): SearchFacet.AsObject;
    static toObject(includeInstance: boolean, msg: SearchFacet): SearchFacet.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: SearchFacet, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): SearchFacet;
    static deserializeBinaryFromReader(message: SearchFacet, reader: jspb.BinaryReader): SearchFacet;
}

export namespace SearchFacet {
    export type AsObject = {
        countsList: Array<FacetCount.AsObject>,
        stats?: FacetStats.AsObject,
    }
}

export class FacetCount extends jspb.Message { 
    getCount(): number;
    setCount(value: number): FacetCount;
    getValue(): string;
    setValue(value: string): FacetCount;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): FacetCount.AsObject;
    static toObject(includeInstance: boolean, msg: FacetCount): FacetCount.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: FacetCount, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): FacetCount;
    static deserializeBinaryFromReader(message: FacetCount, reader: jspb.BinaryReader): FacetCount;
}

export namespace FacetCount {
    export type AsObject = {
        count: number,
        value: string,
    }
}

export class FacetStats extends jspb.Message { 

    hasAvg(): boolean;
    clearAvg(): void;
    getAvg(): number | undefined;
    setAvg(value: number): FacetStats;

    hasMax(): boolean;
    clearMax(): void;
    getMax(): number | undefined;
    setMax(value: number): FacetStats;

    hasMin(): boolean;
    clearMin(): void;
    getMin(): number | undefined;
    setMin(value: number): FacetStats;

    hasSum(): boolean;
    clearSum(): void;
    getSum(): number | undefined;
    setSum(value: number): FacetStats;
    getCount(): number;
    setCount(value: number): FacetStats;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): FacetStats.AsObject;
    static toObject(includeInstance: boolean, msg: FacetStats): FacetStats.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: FacetStats, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): FacetStats;
    static deserializeBinaryFromReader(message: FacetStats, reader: jspb.BinaryReader): FacetStats;
}

export namespace FacetStats {
    export type AsObject = {
        avg?: number,
        max?: number,
        min?: number,
        sum?: number,
        count: number,
    }
}

export class SearchMetadata extends jspb.Message { 
    getFound(): number;
    setFound(value: number): SearchMetadata;
    getTotalPages(): number;
    setTotalPages(value: number): SearchMetadata;

    hasPage(): boolean;
    clearPage(): void;
    getPage(): Page | undefined;
    setPage(value?: Page): SearchMetadata;
    clearMatchedFieldsList(): void;
    getMatchedFieldsList(): Array<string>;
    setMatchedFieldsList(value: Array<string>): SearchMetadata;
    addMatchedFields(value: string, index?: number): string;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): SearchMetadata.AsObject;
    static toObject(includeInstance: boolean, msg: SearchMetadata): SearchMetadata.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: SearchMetadata, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): SearchMetadata;
    static deserializeBinaryFromReader(message: SearchMetadata, reader: jspb.BinaryReader): SearchMetadata;
}

export namespace SearchMetadata {
    export type AsObject = {
        found: number,
        totalPages: number,
        page?: Page.AsObject,
        matchedFieldsList: Array<string>,
    }
}

export class MatchField extends jspb.Message { 
    getName(): string;
    setName(value: string): MatchField;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): MatchField.AsObject;
    static toObject(includeInstance: boolean, msg: MatchField): MatchField.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: MatchField, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): MatchField;
    static deserializeBinaryFromReader(message: MatchField, reader: jspb.BinaryReader): MatchField;
}

export namespace MatchField {
    export type AsObject = {
        name: string,
    }
}

export class Match extends jspb.Message { 
    clearFieldsList(): void;
    getFieldsList(): Array<MatchField>;
    setFieldsList(value: Array<MatchField>): Match;
    addFields(value?: MatchField, index?: number): MatchField;
    getScore(): string;
    setScore(value: string): Match;

    hasVectorDistance(): boolean;
    clearVectorDistance(): void;
    getVectorDistance(): number | undefined;
    setVectorDistance(value: number): Match;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Match.AsObject;
    static toObject(includeInstance: boolean, msg: Match): Match.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Match, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Match;
    static deserializeBinaryFromReader(message: Match, reader: jspb.BinaryReader): Match;
}

export namespace Match {
    export type AsObject = {
        fieldsList: Array<MatchField.AsObject>,
        score: string,
        vectorDistance?: number,
    }
}

export class GroupedSearchHits extends jspb.Message { 
    clearGroupKeysList(): void;
    getGroupKeysList(): Array<string>;
    setGroupKeysList(value: Array<string>): GroupedSearchHits;
    addGroupKeys(value: string, index?: number): string;
    clearHitsList(): void;
    getHitsList(): Array<SearchHit>;
    setHitsList(value: Array<SearchHit>): GroupedSearchHits;
    addHits(value?: SearchHit, index?: number): SearchHit;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GroupedSearchHits.AsObject;
    static toObject(includeInstance: boolean, msg: GroupedSearchHits): GroupedSearchHits.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GroupedSearchHits, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GroupedSearchHits;
    static deserializeBinaryFromReader(message: GroupedSearchHits, reader: jspb.BinaryReader): GroupedSearchHits;
}

export namespace GroupedSearchHits {
    export type AsObject = {
        groupKeysList: Array<string>,
        hitsList: Array<SearchHit.AsObject>,
    }
}

export class Page extends jspb.Message { 
    getCurrent(): number;
    setCurrent(value: number): Page;
    getSize(): number;
    setSize(value: number): Page;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Page.AsObject;
    static toObject(includeInstance: boolean, msg: Page): Page.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Page, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Page;
    static deserializeBinaryFromReader(message: Page, reader: jspb.BinaryReader): Page;
}

export namespace Page {
    export type AsObject = {
        current: number,
        size: number,
    }
}

export class CreateProjectRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): CreateProjectRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateProjectRequest.AsObject;
    static toObject(includeInstance: boolean, msg: CreateProjectRequest): CreateProjectRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateProjectRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateProjectRequest;
    static deserializeBinaryFromReader(message: CreateProjectRequest, reader: jspb.BinaryReader): CreateProjectRequest;
}

export namespace CreateProjectRequest {
    export type AsObject = {
        project: string,
    }
}

export class CreateProjectResponse extends jspb.Message { 
    getMessage(): string;
    setMessage(value: string): CreateProjectResponse;
    getStatus(): string;
    setStatus(value: string): CreateProjectResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateProjectResponse.AsObject;
    static toObject(includeInstance: boolean, msg: CreateProjectResponse): CreateProjectResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateProjectResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateProjectResponse;
    static deserializeBinaryFromReader(message: CreateProjectResponse, reader: jspb.BinaryReader): CreateProjectResponse;
}

export namespace CreateProjectResponse {
    export type AsObject = {
        message: string,
        status: string,
    }
}

export class DeleteProjectRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): DeleteProjectRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DeleteProjectRequest.AsObject;
    static toObject(includeInstance: boolean, msg: DeleteProjectRequest): DeleteProjectRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DeleteProjectRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DeleteProjectRequest;
    static deserializeBinaryFromReader(message: DeleteProjectRequest, reader: jspb.BinaryReader): DeleteProjectRequest;
}

export namespace DeleteProjectRequest {
    export type AsObject = {
        project: string,
    }
}

export class DeleteProjectResponse extends jspb.Message { 
    getMessage(): string;
    setMessage(value: string): DeleteProjectResponse;
    getStatus(): string;
    setStatus(value: string): DeleteProjectResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DeleteProjectResponse.AsObject;
    static toObject(includeInstance: boolean, msg: DeleteProjectResponse): DeleteProjectResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DeleteProjectResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DeleteProjectResponse;
    static deserializeBinaryFromReader(message: DeleteProjectResponse, reader: jspb.BinaryReader): DeleteProjectResponse;
}

export namespace DeleteProjectResponse {
    export type AsObject = {
        message: string,
        status: string,
    }
}

export class CreateBranchRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): CreateBranchRequest;
    getBranch(): string;
    setBranch(value: string): CreateBranchRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateBranchRequest.AsObject;
    static toObject(includeInstance: boolean, msg: CreateBranchRequest): CreateBranchRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateBranchRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateBranchRequest;
    static deserializeBinaryFromReader(message: CreateBranchRequest, reader: jspb.BinaryReader): CreateBranchRequest;
}

export namespace CreateBranchRequest {
    export type AsObject = {
        project: string,
        branch: string,
    }
}

export class CreateBranchResponse extends jspb.Message { 
    getMessage(): string;
    setMessage(value: string): CreateBranchResponse;
    getStatus(): string;
    setStatus(value: string): CreateBranchResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateBranchResponse.AsObject;
    static toObject(includeInstance: boolean, msg: CreateBranchResponse): CreateBranchResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateBranchResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateBranchResponse;
    static deserializeBinaryFromReader(message: CreateBranchResponse, reader: jspb.BinaryReader): CreateBranchResponse;
}

export namespace CreateBranchResponse {
    export type AsObject = {
        message: string,
        status: string,
    }
}

export class DeleteBranchRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): DeleteBranchRequest;
    getBranch(): string;
    setBranch(value: string): DeleteBranchRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DeleteBranchRequest.AsObject;
    static toObject(includeInstance: boolean, msg: DeleteBranchRequest): DeleteBranchRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DeleteBranchRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DeleteBranchRequest;
    static deserializeBinaryFromReader(message: DeleteBranchRequest, reader: jspb.BinaryReader): DeleteBranchRequest;
}

export namespace DeleteBranchRequest {
    export type AsObject = {
        project: string,
        branch: string,
    }
}

export class DeleteBranchResponse extends jspb.Message { 
    getMessage(): string;
    setMessage(value: string): DeleteBranchResponse;
    getStatus(): string;
    setStatus(value: string): DeleteBranchResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DeleteBranchResponse.AsObject;
    static toObject(includeInstance: boolean, msg: DeleteBranchResponse): DeleteBranchResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DeleteBranchResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DeleteBranchResponse;
    static deserializeBinaryFromReader(message: DeleteBranchResponse, reader: jspb.BinaryReader): DeleteBranchResponse;
}

export namespace DeleteBranchResponse {
    export type AsObject = {
        message: string,
        status: string,
    }
}

export class ListBranchesRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): ListBranchesRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListBranchesRequest.AsObject;
    static toObject(includeInstance: boolean, msg: ListBranchesRequest): ListBranchesRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListBranchesRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListBranchesRequest;
    static deserializeBinaryFromReader(message: ListBranchesRequest, reader: jspb.BinaryReader): ListBranchesRequest;
}

export namespace ListBranchesRequest {
    export type AsObject = {
        project: string,
    }
}

export class ListBranchesResponse extends jspb.Message { 
    clearBranchesList(): void;
    getBranchesList(): Array<BranchInfo>;
    setBranchesList(value: Array<BranchInfo>): ListBranchesResponse;
    addBranches(value?: BranchInfo, index?: number): BranchInfo;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListBranchesResponse.AsObject;
    static toObject(includeInstance: boolean, msg: ListBranchesResponse): ListBranchesResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListBranchesResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListBranchesResponse;
    static deserializeBinaryFromReader(message: ListBranchesResponse, reader: jspb.BinaryReader): ListBranchesResponse;
}

export namespace ListBranchesResponse {
    export type AsObject = {
        branchesList: Array<BranchInfo.AsObject>,
    }
}

export class CreateOrUpdateCollectionRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): CreateOrUpdateCollectionRequest;
    getCollection(): string;
    setCollection(value: string): CreateOrUpdateCollectionRequest;
    getSchema(): Uint8Array | string;
    getSchema_asU8(): Uint8Array;
    getSchema_asB64(): string;
    setSchema(value: Uint8Array | string): CreateOrUpdateCollectionRequest;
    getOnlyCreate(): boolean;
    setOnlyCreate(value: boolean): CreateOrUpdateCollectionRequest;

    hasOptions(): boolean;
    clearOptions(): void;
    getOptions(): CollectionOptions | undefined;
    setOptions(value?: CollectionOptions): CreateOrUpdateCollectionRequest;
    getBranch(): string;
    setBranch(value: string): CreateOrUpdateCollectionRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateOrUpdateCollectionRequest.AsObject;
    static toObject(includeInstance: boolean, msg: CreateOrUpdateCollectionRequest): CreateOrUpdateCollectionRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateOrUpdateCollectionRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateOrUpdateCollectionRequest;
    static deserializeBinaryFromReader(message: CreateOrUpdateCollectionRequest, reader: jspb.BinaryReader): CreateOrUpdateCollectionRequest;
}

export namespace CreateOrUpdateCollectionRequest {
    export type AsObject = {
        project: string,
        collection: string,
        schema: Uint8Array | string,
        onlyCreate: boolean,
        options?: CollectionOptions.AsObject,
        branch: string,
    }
}

export class CreateOrUpdateCollectionResponse extends jspb.Message { 
    getMessage(): string;
    setMessage(value: string): CreateOrUpdateCollectionResponse;
    getStatus(): string;
    setStatus(value: string): CreateOrUpdateCollectionResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateOrUpdateCollectionResponse.AsObject;
    static toObject(includeInstance: boolean, msg: CreateOrUpdateCollectionResponse): CreateOrUpdateCollectionResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateOrUpdateCollectionResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateOrUpdateCollectionResponse;
    static deserializeBinaryFromReader(message: CreateOrUpdateCollectionResponse, reader: jspb.BinaryReader): CreateOrUpdateCollectionResponse;
}

export namespace CreateOrUpdateCollectionResponse {
    export type AsObject = {
        message: string,
        status: string,
    }
}

export class DropCollectionRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): DropCollectionRequest;
    getCollection(): string;
    setCollection(value: string): DropCollectionRequest;

    hasOptions(): boolean;
    clearOptions(): void;
    getOptions(): CollectionOptions | undefined;
    setOptions(value?: CollectionOptions): DropCollectionRequest;
    getBranch(): string;
    setBranch(value: string): DropCollectionRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DropCollectionRequest.AsObject;
    static toObject(includeInstance: boolean, msg: DropCollectionRequest): DropCollectionRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DropCollectionRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DropCollectionRequest;
    static deserializeBinaryFromReader(message: DropCollectionRequest, reader: jspb.BinaryReader): DropCollectionRequest;
}

export namespace DropCollectionRequest {
    export type AsObject = {
        project: string,
        collection: string,
        options?: CollectionOptions.AsObject,
        branch: string,
    }
}

export class DropCollectionResponse extends jspb.Message { 
    getMessage(): string;
    setMessage(value: string): DropCollectionResponse;
    getStatus(): string;
    setStatus(value: string): DropCollectionResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DropCollectionResponse.AsObject;
    static toObject(includeInstance: boolean, msg: DropCollectionResponse): DropCollectionResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DropCollectionResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DropCollectionResponse;
    static deserializeBinaryFromReader(message: DropCollectionResponse, reader: jspb.BinaryReader): DropCollectionResponse;
}

export namespace DropCollectionResponse {
    export type AsObject = {
        message: string,
        status: string,
    }
}

export class ProjectInfo extends jspb.Message { 
    getProject(): string;
    setProject(value: string): ProjectInfo;

    hasMetadata(): boolean;
    clearMetadata(): void;
    getMetadata(): ProjectMetadata | undefined;
    setMetadata(value?: ProjectMetadata): ProjectInfo;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ProjectInfo.AsObject;
    static toObject(includeInstance: boolean, msg: ProjectInfo): ProjectInfo.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ProjectInfo, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ProjectInfo;
    static deserializeBinaryFromReader(message: ProjectInfo, reader: jspb.BinaryReader): ProjectInfo;
}

export namespace ProjectInfo {
    export type AsObject = {
        project: string,
        metadata?: ProjectMetadata.AsObject,
    }
}

export class CollectionInfo extends jspb.Message { 
    getCollection(): string;
    setCollection(value: string): CollectionInfo;

    hasMetadata(): boolean;
    clearMetadata(): void;
    getMetadata(): CollectionMetadata | undefined;
    setMetadata(value?: CollectionMetadata): CollectionInfo;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CollectionInfo.AsObject;
    static toObject(includeInstance: boolean, msg: CollectionInfo): CollectionInfo.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CollectionInfo, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CollectionInfo;
    static deserializeBinaryFromReader(message: CollectionInfo, reader: jspb.BinaryReader): CollectionInfo;
}

export namespace CollectionInfo {
    export type AsObject = {
        collection: string,
        metadata?: CollectionMetadata.AsObject,
    }
}

export class BranchInfo extends jspb.Message { 
    getBranch(): string;
    setBranch(value: string): BranchInfo;

    hasMetadata(): boolean;
    clearMetadata(): void;
    getMetadata(): BranchMetadata | undefined;
    setMetadata(value?: BranchMetadata): BranchInfo;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): BranchInfo.AsObject;
    static toObject(includeInstance: boolean, msg: BranchInfo): BranchInfo.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: BranchInfo, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): BranchInfo;
    static deserializeBinaryFromReader(message: BranchInfo, reader: jspb.BinaryReader): BranchInfo;
}

export namespace BranchInfo {
    export type AsObject = {
        branch: string,
        metadata?: BranchMetadata.AsObject,
    }
}

export class ListProjectsRequest extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListProjectsRequest.AsObject;
    static toObject(includeInstance: boolean, msg: ListProjectsRequest): ListProjectsRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListProjectsRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListProjectsRequest;
    static deserializeBinaryFromReader(message: ListProjectsRequest, reader: jspb.BinaryReader): ListProjectsRequest;
}

export namespace ListProjectsRequest {
    export type AsObject = {
    }
}

export class ListProjectsResponse extends jspb.Message { 
    clearProjectsList(): void;
    getProjectsList(): Array<ProjectInfo>;
    setProjectsList(value: Array<ProjectInfo>): ListProjectsResponse;
    addProjects(value?: ProjectInfo, index?: number): ProjectInfo;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListProjectsResponse.AsObject;
    static toObject(includeInstance: boolean, msg: ListProjectsResponse): ListProjectsResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListProjectsResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListProjectsResponse;
    static deserializeBinaryFromReader(message: ListProjectsResponse, reader: jspb.BinaryReader): ListProjectsResponse;
}

export namespace ListProjectsResponse {
    export type AsObject = {
        projectsList: Array<ProjectInfo.AsObject>,
    }
}

export class ListCollectionsRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): ListCollectionsRequest;

    hasOptions(): boolean;
    clearOptions(): void;
    getOptions(): CollectionOptions | undefined;
    setOptions(value?: CollectionOptions): ListCollectionsRequest;
    getBranch(): string;
    setBranch(value: string): ListCollectionsRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListCollectionsRequest.AsObject;
    static toObject(includeInstance: boolean, msg: ListCollectionsRequest): ListCollectionsRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListCollectionsRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListCollectionsRequest;
    static deserializeBinaryFromReader(message: ListCollectionsRequest, reader: jspb.BinaryReader): ListCollectionsRequest;
}

export namespace ListCollectionsRequest {
    export type AsObject = {
        project: string,
        options?: CollectionOptions.AsObject,
        branch: string,
    }
}

export class ListCollectionsResponse extends jspb.Message { 
    clearCollectionsList(): void;
    getCollectionsList(): Array<CollectionInfo>;
    setCollectionsList(value: Array<CollectionInfo>): ListCollectionsResponse;
    addCollections(value?: CollectionInfo, index?: number): CollectionInfo;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListCollectionsResponse.AsObject;
    static toObject(includeInstance: boolean, msg: ListCollectionsResponse): ListCollectionsResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListCollectionsResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListCollectionsResponse;
    static deserializeBinaryFromReader(message: ListCollectionsResponse, reader: jspb.BinaryReader): ListCollectionsResponse;
}

export namespace ListCollectionsResponse {
    export type AsObject = {
        collectionsList: Array<CollectionInfo.AsObject>,
    }
}

export class DescribeDatabaseRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): DescribeDatabaseRequest;
    getSchemaFormat(): string;
    setSchemaFormat(value: string): DescribeDatabaseRequest;
    getBranch(): string;
    setBranch(value: string): DescribeDatabaseRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DescribeDatabaseRequest.AsObject;
    static toObject(includeInstance: boolean, msg: DescribeDatabaseRequest): DescribeDatabaseRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DescribeDatabaseRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DescribeDatabaseRequest;
    static deserializeBinaryFromReader(message: DescribeDatabaseRequest, reader: jspb.BinaryReader): DescribeDatabaseRequest;
}

export namespace DescribeDatabaseRequest {
    export type AsObject = {
        project: string,
        schemaFormat: string,
        branch: string,
    }
}

export class DescribeCollectionRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): DescribeCollectionRequest;
    getCollection(): string;
    setCollection(value: string): DescribeCollectionRequest;
    getSchemaFormat(): string;
    setSchemaFormat(value: string): DescribeCollectionRequest;

    hasOptions(): boolean;
    clearOptions(): void;
    getOptions(): CollectionOptions | undefined;
    setOptions(value?: CollectionOptions): DescribeCollectionRequest;
    getBranch(): string;
    setBranch(value: string): DescribeCollectionRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DescribeCollectionRequest.AsObject;
    static toObject(includeInstance: boolean, msg: DescribeCollectionRequest): DescribeCollectionRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DescribeCollectionRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DescribeCollectionRequest;
    static deserializeBinaryFromReader(message: DescribeCollectionRequest, reader: jspb.BinaryReader): DescribeCollectionRequest;
}

export namespace DescribeCollectionRequest {
    export type AsObject = {
        project: string,
        collection: string,
        schemaFormat: string,
        options?: CollectionOptions.AsObject,
        branch: string,
    }
}

export class DescribeDatabaseResponse extends jspb.Message { 

    hasMetadata(): boolean;
    clearMetadata(): void;
    getMetadata(): DatabaseMetadata | undefined;
    setMetadata(value?: DatabaseMetadata): DescribeDatabaseResponse;
    clearCollectionsList(): void;
    getCollectionsList(): Array<CollectionDescription>;
    setCollectionsList(value: Array<CollectionDescription>): DescribeDatabaseResponse;
    addCollections(value?: CollectionDescription, index?: number): CollectionDescription;
    getSize(): number;
    setSize(value: number): DescribeDatabaseResponse;
    clearBranchesList(): void;
    getBranchesList(): Array<string>;
    setBranchesList(value: Array<string>): DescribeDatabaseResponse;
    addBranches(value: string, index?: number): string;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DescribeDatabaseResponse.AsObject;
    static toObject(includeInstance: boolean, msg: DescribeDatabaseResponse): DescribeDatabaseResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DescribeDatabaseResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DescribeDatabaseResponse;
    static deserializeBinaryFromReader(message: DescribeDatabaseResponse, reader: jspb.BinaryReader): DescribeDatabaseResponse;
}

export namespace DescribeDatabaseResponse {
    export type AsObject = {
        metadata?: DatabaseMetadata.AsObject,
        collectionsList: Array<CollectionDescription.AsObject>,
        size: number,
        branchesList: Array<string>,
    }
}

export class DescribeCollectionResponse extends jspb.Message { 
    getCollection(): string;
    setCollection(value: string): DescribeCollectionResponse;

    hasMetadata(): boolean;
    clearMetadata(): void;
    getMetadata(): CollectionMetadata | undefined;
    setMetadata(value?: CollectionMetadata): DescribeCollectionResponse;
    getSchema(): Uint8Array | string;
    getSchema_asU8(): Uint8Array;
    getSchema_asB64(): string;
    setSchema(value: Uint8Array | string): DescribeCollectionResponse;
    getSize(): number;
    setSize(value: number): DescribeCollectionResponse;
    clearIndexesList(): void;
    getIndexesList(): Array<CollectionIndex>;
    setIndexesList(value: Array<CollectionIndex>): DescribeCollectionResponse;
    addIndexes(value?: CollectionIndex, index?: number): CollectionIndex;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DescribeCollectionResponse.AsObject;
    static toObject(includeInstance: boolean, msg: DescribeCollectionResponse): DescribeCollectionResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DescribeCollectionResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DescribeCollectionResponse;
    static deserializeBinaryFromReader(message: DescribeCollectionResponse, reader: jspb.BinaryReader): DescribeCollectionResponse;
}

export namespace DescribeCollectionResponse {
    export type AsObject = {
        collection: string,
        metadata?: CollectionMetadata.AsObject,
        schema: Uint8Array | string,
        size: number,
        indexesList: Array<CollectionIndex.AsObject>,
    }
}

export class ProjectDescription extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ProjectDescription.AsObject;
    static toObject(includeInstance: boolean, msg: ProjectDescription): ProjectDescription.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ProjectDescription, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ProjectDescription;
    static deserializeBinaryFromReader(message: ProjectDescription, reader: jspb.BinaryReader): ProjectDescription;
}

export namespace ProjectDescription {
    export type AsObject = {
    }
}

export class CollectionDescription extends jspb.Message { 
    getCollection(): string;
    setCollection(value: string): CollectionDescription;

    hasMetadata(): boolean;
    clearMetadata(): void;
    getMetadata(): CollectionMetadata | undefined;
    setMetadata(value?: CollectionMetadata): CollectionDescription;
    getSchema(): Uint8Array | string;
    getSchema_asU8(): Uint8Array;
    getSchema_asB64(): string;
    setSchema(value: Uint8Array | string): CollectionDescription;
    getSize(): number;
    setSize(value: number): CollectionDescription;
    clearIndexesList(): void;
    getIndexesList(): Array<CollectionIndex>;
    setIndexesList(value: Array<CollectionIndex>): CollectionDescription;
    addIndexes(value?: CollectionIndex, index?: number): CollectionIndex;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CollectionDescription.AsObject;
    static toObject(includeInstance: boolean, msg: CollectionDescription): CollectionDescription.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CollectionDescription, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CollectionDescription;
    static deserializeBinaryFromReader(message: CollectionDescription, reader: jspb.BinaryReader): CollectionDescription;
}

export namespace CollectionDescription {
    export type AsObject = {
        collection: string,
        metadata?: CollectionMetadata.AsObject,
        schema: Uint8Array | string,
        size: number,
        indexesList: Array<CollectionIndex.AsObject>,
    }
}

export class ProjectMetadata extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ProjectMetadata.AsObject;
    static toObject(includeInstance: boolean, msg: ProjectMetadata): ProjectMetadata.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ProjectMetadata, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ProjectMetadata;
    static deserializeBinaryFromReader(message: ProjectMetadata, reader: jspb.BinaryReader): ProjectMetadata;
}

export namespace ProjectMetadata {
    export type AsObject = {
    }
}

export class DatabaseMetadata extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DatabaseMetadata.AsObject;
    static toObject(includeInstance: boolean, msg: DatabaseMetadata): DatabaseMetadata.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DatabaseMetadata, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DatabaseMetadata;
    static deserializeBinaryFromReader(message: DatabaseMetadata, reader: jspb.BinaryReader): DatabaseMetadata;
}

export namespace DatabaseMetadata {
    export type AsObject = {
    }
}

export class CollectionMetadata extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CollectionMetadata.AsObject;
    static toObject(includeInstance: boolean, msg: CollectionMetadata): CollectionMetadata.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CollectionMetadata, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CollectionMetadata;
    static deserializeBinaryFromReader(message: CollectionMetadata, reader: jspb.BinaryReader): CollectionMetadata;
}

export namespace CollectionMetadata {
    export type AsObject = {
    }
}

export class CollectionIndex extends jspb.Message { 
    getName(): string;
    setName(value: string): CollectionIndex;
    getState(): string;
    setState(value: string): CollectionIndex;
    clearFieldsList(): void;
    getFieldsList(): Array<Field>;
    setFieldsList(value: Array<Field>): CollectionIndex;
    addFields(value?: Field, index?: number): Field;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CollectionIndex.AsObject;
    static toObject(includeInstance: boolean, msg: CollectionIndex): CollectionIndex.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CollectionIndex, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CollectionIndex;
    static deserializeBinaryFromReader(message: CollectionIndex, reader: jspb.BinaryReader): CollectionIndex;
}

export namespace CollectionIndex {
    export type AsObject = {
        name: string,
        state: string,
        fieldsList: Array<Field.AsObject>,
    }
}

export class Field extends jspb.Message { 
    getName(): string;
    setName(value: string): Field;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Field.AsObject;
    static toObject(includeInstance: boolean, msg: Field): Field.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Field, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Field;
    static deserializeBinaryFromReader(message: Field, reader: jspb.BinaryReader): Field;
}

export namespace Field {
    export type AsObject = {
        name: string,
    }
}

export class BuildCollectionIndexRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): BuildCollectionIndexRequest;
    getCollection(): string;
    setCollection(value: string): BuildCollectionIndexRequest;
    getBranch(): string;
    setBranch(value: string): BuildCollectionIndexRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): BuildCollectionIndexRequest.AsObject;
    static toObject(includeInstance: boolean, msg: BuildCollectionIndexRequest): BuildCollectionIndexRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: BuildCollectionIndexRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): BuildCollectionIndexRequest;
    static deserializeBinaryFromReader(message: BuildCollectionIndexRequest, reader: jspb.BinaryReader): BuildCollectionIndexRequest;
}

export namespace BuildCollectionIndexRequest {
    export type AsObject = {
        project: string,
        collection: string,
        branch: string,
    }
}

export class BuildCollectionIndexResponse extends jspb.Message { 
    clearIndexesList(): void;
    getIndexesList(): Array<CollectionIndex>;
    setIndexesList(value: Array<CollectionIndex>): BuildCollectionIndexResponse;
    addIndexes(value?: CollectionIndex, index?: number): CollectionIndex;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): BuildCollectionIndexResponse.AsObject;
    static toObject(includeInstance: boolean, msg: BuildCollectionIndexResponse): BuildCollectionIndexResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: BuildCollectionIndexResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): BuildCollectionIndexResponse;
    static deserializeBinaryFromReader(message: BuildCollectionIndexResponse, reader: jspb.BinaryReader): BuildCollectionIndexResponse;
}

export namespace BuildCollectionIndexResponse {
    export type AsObject = {
        indexesList: Array<CollectionIndex.AsObject>,
    }
}

export class BranchMetadata extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): BranchMetadata.AsObject;
    static toObject(includeInstance: boolean, msg: BranchMetadata): BranchMetadata.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: BranchMetadata, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): BranchMetadata;
    static deserializeBinaryFromReader(message: BranchMetadata, reader: jspb.BinaryReader): BranchMetadata;
}

export namespace BranchMetadata {
    export type AsObject = {
    }
}

export class CreateAppKeyRequest extends jspb.Message { 
    getName(): string;
    setName(value: string): CreateAppKeyRequest;
    getDescription(): string;
    setDescription(value: string): CreateAppKeyRequest;
    getProject(): string;
    setProject(value: string): CreateAppKeyRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateAppKeyRequest.AsObject;
    static toObject(includeInstance: boolean, msg: CreateAppKeyRequest): CreateAppKeyRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateAppKeyRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateAppKeyRequest;
    static deserializeBinaryFromReader(message: CreateAppKeyRequest, reader: jspb.BinaryReader): CreateAppKeyRequest;
}

export namespace CreateAppKeyRequest {
    export type AsObject = {
        name: string,
        description: string,
        project: string,
    }
}

export class CreateAppKeyResponse extends jspb.Message { 

    hasCreatedAppKey(): boolean;
    clearCreatedAppKey(): void;
    getCreatedAppKey(): AppKey | undefined;
    setCreatedAppKey(value?: AppKey): CreateAppKeyResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateAppKeyResponse.AsObject;
    static toObject(includeInstance: boolean, msg: CreateAppKeyResponse): CreateAppKeyResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateAppKeyResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateAppKeyResponse;
    static deserializeBinaryFromReader(message: CreateAppKeyResponse, reader: jspb.BinaryReader): CreateAppKeyResponse;
}

export namespace CreateAppKeyResponse {
    export type AsObject = {
        createdAppKey?: AppKey.AsObject,
    }
}

export class UpdateAppKeyRequest extends jspb.Message { 
    getId(): string;
    setId(value: string): UpdateAppKeyRequest;
    getProject(): string;
    setProject(value: string): UpdateAppKeyRequest;
    getName(): string;
    setName(value: string): UpdateAppKeyRequest;
    getDescription(): string;
    setDescription(value: string): UpdateAppKeyRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): UpdateAppKeyRequest.AsObject;
    static toObject(includeInstance: boolean, msg: UpdateAppKeyRequest): UpdateAppKeyRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: UpdateAppKeyRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): UpdateAppKeyRequest;
    static deserializeBinaryFromReader(message: UpdateAppKeyRequest, reader: jspb.BinaryReader): UpdateAppKeyRequest;
}

export namespace UpdateAppKeyRequest {
    export type AsObject = {
        id: string,
        project: string,
        name: string,
        description: string,
    }
}

export class UpdateAppKeyResponse extends jspb.Message { 

    hasUpdatedAppKey(): boolean;
    clearUpdatedAppKey(): void;
    getUpdatedAppKey(): AppKey | undefined;
    setUpdatedAppKey(value?: AppKey): UpdateAppKeyResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): UpdateAppKeyResponse.AsObject;
    static toObject(includeInstance: boolean, msg: UpdateAppKeyResponse): UpdateAppKeyResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: UpdateAppKeyResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): UpdateAppKeyResponse;
    static deserializeBinaryFromReader(message: UpdateAppKeyResponse, reader: jspb.BinaryReader): UpdateAppKeyResponse;
}

export namespace UpdateAppKeyResponse {
    export type AsObject = {
        updatedAppKey?: AppKey.AsObject,
    }
}

export class AppKey extends jspb.Message { 
    getId(): string;
    setId(value: string): AppKey;
    getName(): string;
    setName(value: string): AppKey;
    getDescription(): string;
    setDescription(value: string): AppKey;
    getSecret(): string;
    setSecret(value: string): AppKey;
    getCreatedAt(): number;
    setCreatedAt(value: number): AppKey;
    getCreatedBy(): string;
    setCreatedBy(value: string): AppKey;
    getUpdatedAt(): number;
    setUpdatedAt(value: number): AppKey;
    getUpdatedBy(): string;
    setUpdatedBy(value: string): AppKey;
    getProject(): string;
    setProject(value: string): AppKey;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): AppKey.AsObject;
    static toObject(includeInstance: boolean, msg: AppKey): AppKey.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: AppKey, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): AppKey;
    static deserializeBinaryFromReader(message: AppKey, reader: jspb.BinaryReader): AppKey;
}

export namespace AppKey {
    export type AsObject = {
        id: string,
        name: string,
        description: string,
        secret: string,
        createdAt: number,
        createdBy: string,
        updatedAt: number,
        updatedBy: string,
        project: string,
    }
}

export class ListAppKeysRequest extends jspb.Message { 
    getProject(): string;
    setProject(value: string): ListAppKeysRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListAppKeysRequest.AsObject;
    static toObject(includeInstance: boolean, msg: ListAppKeysRequest): ListAppKeysRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListAppKeysRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListAppKeysRequest;
    static deserializeBinaryFromReader(message: ListAppKeysRequest, reader: jspb.BinaryReader): ListAppKeysRequest;
}

export namespace ListAppKeysRequest {
    export type AsObject = {
        project: string,
    }
}

export class ListAppKeysResponse extends jspb.Message { 
    clearAppKeysList(): void;
    getAppKeysList(): Array<AppKey>;
    setAppKeysList(value: Array<AppKey>): ListAppKeysResponse;
    addAppKeys(value?: AppKey, index?: number): AppKey;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListAppKeysResponse.AsObject;
    static toObject(includeInstance: boolean, msg: ListAppKeysResponse): ListAppKeysResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListAppKeysResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListAppKeysResponse;
    static deserializeBinaryFromReader(message: ListAppKeysResponse, reader: jspb.BinaryReader): ListAppKeysResponse;
}

export namespace ListAppKeysResponse {
    export type AsObject = {
        appKeysList: Array<AppKey.AsObject>,
    }
}

export class DeleteAppKeyRequest extends jspb.Message { 
    getId(): string;
    setId(value: string): DeleteAppKeyRequest;
    getProject(): string;
    setProject(value: string): DeleteAppKeyRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DeleteAppKeyRequest.AsObject;
    static toObject(includeInstance: boolean, msg: DeleteAppKeyRequest): DeleteAppKeyRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DeleteAppKeyRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DeleteAppKeyRequest;
    static deserializeBinaryFromReader(message: DeleteAppKeyRequest, reader: jspb.BinaryReader): DeleteAppKeyRequest;
}

export namespace DeleteAppKeyRequest {
    export type AsObject = {
        id: string,
        project: string,
    }
}

export class DeleteAppKeyResponse extends jspb.Message { 
    getDeleted(): boolean;
    setDeleted(value: boolean): DeleteAppKeyResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DeleteAppKeyResponse.AsObject;
    static toObject(includeInstance: boolean, msg: DeleteAppKeyResponse): DeleteAppKeyResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DeleteAppKeyResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DeleteAppKeyResponse;
    static deserializeBinaryFromReader(message: DeleteAppKeyResponse, reader: jspb.BinaryReader): DeleteAppKeyResponse;
}

export namespace DeleteAppKeyResponse {
    export type AsObject = {
        deleted: boolean,
    }
}

export class RotateAppKeyRequest extends jspb.Message { 
    getId(): string;
    setId(value: string): RotateAppKeyRequest;
    getProject(): string;
    setProject(value: string): RotateAppKeyRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): RotateAppKeyRequest.AsObject;
    static toObject(includeInstance: boolean, msg: RotateAppKeyRequest): RotateAppKeyRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: RotateAppKeyRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): RotateAppKeyRequest;
    static deserializeBinaryFromReader(message: RotateAppKeyRequest, reader: jspb.BinaryReader): RotateAppKeyRequest;
}

export namespace RotateAppKeyRequest {
    export type AsObject = {
        id: string,
        project: string,
    }
}

export class RotateAppKeyResponse extends jspb.Message { 

    hasAppKey(): boolean;
    clearAppKey(): void;
    getAppKey(): AppKey | undefined;
    setAppKey(value?: AppKey): RotateAppKeyResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): RotateAppKeyResponse.AsObject;
    static toObject(includeInstance: boolean, msg: RotateAppKeyResponse): RotateAppKeyResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: RotateAppKeyResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): RotateAppKeyResponse;
    static deserializeBinaryFromReader(message: RotateAppKeyResponse, reader: jspb.BinaryReader): RotateAppKeyResponse;
}

export namespace RotateAppKeyResponse {
    export type AsObject = {
        appKey?: AppKey.AsObject,
    }
}
