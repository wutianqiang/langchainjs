// package: 
// file: server/v1/health.proto

/* tslint:disable */
/* eslint-disable */

import * as jspb from "google-protobuf";
import * as openapiv3_annotations_pb from "../../openapiv3/annotations_pb";

export class HealthCheckInput extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): HealthCheckInput.AsObject;
    static toObject(includeInstance: boolean, msg: HealthCheckInput): HealthCheckInput.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: HealthCheckInput, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): HealthCheckInput;
    static deserializeBinaryFromReader(message: HealthCheckInput, reader: jspb.BinaryReader): HealthCheckInput;
}

export namespace HealthCheckInput {
    export type AsObject = {
    }
}

export class HealthCheckResponse extends jspb.Message { 
    getResponse(): string;
    setResponse(value: string): HealthCheckResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): HealthCheckResponse.AsObject;
    static toObject(includeInstance: boolean, msg: HealthCheckResponse): HealthCheckResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: HealthCheckResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): HealthCheckResponse;
    static deserializeBinaryFromReader(message: HealthCheckResponse, reader: jspb.BinaryReader): HealthCheckResponse;
}

export namespace HealthCheckResponse {
    export type AsObject = {
        response: string,
    }
}
