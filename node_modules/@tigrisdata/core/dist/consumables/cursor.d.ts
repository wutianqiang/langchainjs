import { IterableStream, Initializer } from "./iterable-stream";
import { ReadRequest, ReadResponse } from "../proto/server/v1/api_pb";
import { TigrisClient } from "../proto/server/v1/api_grpc_pb";
import { Session } from "../session";
import { ClientReadableStream } from "@grpc/grpc-js";
import { TigrisClientConfig } from "../tigris";
import { KeysRequest, KeysResponse } from "../proto/server/v1/cache_pb";
import { CacheClient } from "../proto/server/v1/cache_grpc_pb";
/** @internal */
export declare class ReadCursorInitializer implements Initializer<ReadResponse> {
    private readonly _client;
    private readonly _request;
    private readonly _session;
    constructor(client: TigrisClient, request: ReadRequest, tx: Session);
    init(): ClientReadableStream<ReadResponse>;
}
/** @internal */
export declare class CacheKeysCursorInitializer implements Initializer<KeysResponse> {
    private readonly _client;
    private readonly _request;
    constructor(client: CacheClient, request: KeysRequest);
    init(): ClientReadableStream<KeysResponse>;
}
/**
 * Cursor to supplement find() queries
 */
export declare class Cursor<T> extends IterableStream<T, ReadResponse> {
    /** @internal */
    private readonly _config;
    constructor(initializer: ReadCursorInitializer, config: TigrisClientConfig);
    /** @override */
    protected _transform(message: ReadResponse): T;
}
/**
 * Cursor to supplement keys() call for cache
 */
export declare class CacheKeysCursor extends IterableStream<string[], KeysResponse> {
    /** @internal */
    constructor(initializer: CacheKeysCursorInitializer);
    /** @override */
    protected _transform(message: KeysResponse): string[];
}
