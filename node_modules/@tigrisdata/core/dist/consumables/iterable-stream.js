"use strict";
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IterableStream = void 0;
const error_1 = require("../error");
const stream_1 = require("stream");
/** @internal */
const tStream = Symbol("stream");
/** @internal */
const tReady = Symbol("ready");
/** @internal */
const tClosed = Symbol("closed");
class IterableStream {
    /** @internal */
    constructor(initializer) {
        this._initializer = initializer;
        this[tReady] = false;
        this._initialize();
        this[tClosed] = false;
    }
    /** @internal */
    _assertNotInUse() {
        if (this[tClosed]) {
            throw new error_1.CursorInUseError();
        }
        this[tClosed] = true;
    }
    /** @internal */
    next() {
        return __asyncGenerator(this, arguments, function* next_1() {
            var e_1, _a;
            this._assertNotInUse();
            try {
                for (var _b = __asyncValues(this[tStream]), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const message = _c.value;
                    yield yield __await(this._transform(message));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
            return yield __await(void 0);
        });
    }
    /**
     * Returns a {@link Readable} stream of documents to iterate on
     *
     * @example
     * ```
     * const cursor = myCollection.find();
     * for await (const doc of cursor.stream()) {
     *     console.log(doc);
     * }
     *```
     *
     * @throws {@link TigrisCursorInUseError} - if cursor is being consumed or has been consumed.
     * @see {@link reset} to re-use a cursor.
     */
    stream() {
        return stream_1.Readable.from(this.next());
    }
    /**
     * Returns an async iterator to iterate on documents
     *
     * @example
     * ```
     * const cursor = myCollection.find();
     * for await (const doc of cursor) {
     *     console.log(doc);
     * }
     *```
     *
     * @throws {@link TigrisCursorInUseError} - if cursor is being consumed or has been consumed.
     * @see {@link reset} to re-use a cursor.
     */
    [Symbol.asyncIterator]() {
        return this.next()[Symbol.asyncIterator]();
    }
    /**
     * Returns an array of documents. The caller is responsible for making sure that there
     * is enough memory to store the results.
     *
     * @throws {@link TigrisCursorInUseError} - if cursor is being consumed or has been consumed.
     * @see {@link reset} to re-use a cursor.
     */
    toArray() {
        this._assertNotInUse();
        const buffer = new Array();
        return new Promise((resolve, reject) => {
            this[tStream].on("data", (message) => {
                buffer.push(this._transform(message));
            });
            this[tStream].on("error", reject);
            this[tStream].on("end", () => resolve(buffer));
        });
    }
    /** @internal */
    _initialize() {
        if (!this[tReady]) {
            this[tStream] = this._initializer.init();
            this[tReady] = true;
        }
    }
    /**
     * This essentially sends a new query to server and allows the cursor to be re-used. A new
     * query to server is sent even if this cursor is not yet consumed.
     *
     * <b>Note:</b> A cursor may yield different results after `reset()`
     */
    reset() {
        this[tClosed] = false;
        this[tReady] = false;
        this._initialize();
    }
}
exports.IterableStream = IterableStream;
