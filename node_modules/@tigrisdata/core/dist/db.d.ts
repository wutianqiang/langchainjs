import { TigrisClient } from "./proto/server/v1/api_grpc_pb";
import { CollectionInfo, CollectionOptions, CreateBranchResponse, DatabaseDescription, DeleteBranchResponse, DropCollectionResponse, TigrisCollectionType, TigrisSchema, TransactionOptions, TransactionResponse } from "./types";
import { Collection } from "./collection";
import { Session } from "./session";
import { TigrisClientConfig } from "./tigris";
/**
 * Tigris Database class to manage database branches, collections and execute
 * transactions.
 */
export declare class DB {
    private readonly _name;
    private readonly _branch;
    private readonly grpcClient;
    private readonly config;
    private readonly schemaProcessor;
    private readonly _metadataStorage;
    /**
     * Create an instance of Tigris Database class.
     *
     * @example Recommended way to create instance using {@link TigrisClient.getDatabase}
     * ```
     * const client = new TigrisClient();
     * const db = client.getDatabase();
     * ```
     */
    constructor(db: string, grpcClient: TigrisClient, config: TigrisClientConfig);
    /**
     * Create a new collection if not exists. Else, apply schema changes, if any.
     *
     * @param cls - A Class decorated by {@link TigrisCollection}
     *
     * @example
     *
     * ```
     * @TigrisCollection("todoItems")
     * class TodoItem {
     *   @PrimaryKey(TigrisDataTypes.INT32, { order: 1 })
     *   id: number;
     *
     *   @Field()
     *   text: string;
     *
     *   @Field()
     *   completed: boolean;
     * }
     *
     * await db.createOrUpdateCollection<TodoItem>(TodoItem);
     * ```
     */
    createOrUpdateCollection<T extends TigrisCollectionType>(cls: new () => TigrisCollectionType): Promise<Collection<T>>;
    /**
     * Create a new collection if not exists. Else, apply schema changes, if any.
     *
     * @param collectionName - Name of the Tigris Collection
     * @param schema - Collection's data model
     *
     * @example
     *
     * ```
     * const TodoItemSchema: TigrisSchema<TodoItem> = {
     *   id: {
     *     type: TigrisDataTypes.INT32,
     *     primary_key: { order: 1, autoGenerate: true }
     *   },
     *   text: { type: TigrisDataTypes.STRING },
     *   completed: { type: TigrisDataTypes.BOOLEAN }
     * };
     *
     * await db.createOrUpdateCollection<TodoItem>("todoItems", TodoItemSchema);
     * ```
     */
    createOrUpdateCollection<T extends TigrisCollectionType>(collectionName: string, schema: TigrisSchema<T>): Promise<Collection<T>>;
    private createOrUpdate;
    listCollections(options?: CollectionOptions): Promise<Array<CollectionInfo>>;
    /**
     * Drops a {@link Collection}
     *
     * @param cls - A Class decorated by {@link TigrisCollection}
     */
    dropCollection(cls: new () => TigrisCollectionType): Promise<DropCollectionResponse>;
    /**
     * Drops a {@link Collection}
     *
     * @param name - Collection name
     */
    dropCollection(name: string): Promise<DropCollectionResponse>;
    dropAllCollections(): Promise<PromiseSettledResult<DropCollectionResponse>[]>;
    describe(): Promise<DatabaseDescription>;
    /**
     * Gets a {@link Collection} object
     *
     * @param cls - A Class decorated by {@link TigrisCollection}
     */
    getCollection<T extends TigrisCollectionType>(cls: new () => TigrisCollectionType): Collection<T>;
    /**
     * Gets a {@link Collection} object
     *
     * @param name - Collection name
     */
    getCollection<T extends TigrisCollectionType>(name: string): Collection<T>;
    private resolveNameFromCollectionClass;
    transact(fn: (tx: Session) => void): Promise<TransactionResponse>;
    beginTransaction(_options?: TransactionOptions): Promise<Session>;
    createBranch(name: string): Promise<CreateBranchResponse>;
    deleteBranch(name: string): Promise<DeleteBranchResponse>;
    /**
     * Creates a database branch, if not existing already.
     *
     * @example
     * ```
     * const client = new TigrisClient();
     * const db = client.getDatabase();
     * await db.initializeBranch();
     * ```
     *
     * @throws {@link Promise.reject} - Error if branch cannot be created
     */
    initializeBranch(): Promise<void>;
    get name(): string;
    get branch(): string;
    get usingDefaultBranch(): boolean;
}
