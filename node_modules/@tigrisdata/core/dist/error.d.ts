/**
 * Generic TigrisError
 */
export declare class TigrisError extends Error {
    readonly errMsg: string;
    constructor(message: string);
    get name(): string;
}
/**
 * An error thrown when the user attempts to consume a cursor that has already been
 * used
 *
 * @public
 */
export declare class CursorInUseError extends TigrisError {
    constructor(message?: string);
}
export declare class ReflectionNotEnabled extends TigrisError {
    constructor(object: Object, propertyName: string);
    get name(): string;
}
export declare class MissingArgumentError extends TigrisError {
    constructor(propertyName: string);
    get name(): string;
}
export declare class CannotInferFieldTypeError extends TigrisError {
    constructor(object: Object, propertyName: string);
    get name(): string;
}
export declare class IncompleteArrayTypeDefError extends TigrisError {
    constructor(object: Object, propertyName: string);
    get name(): string;
}
export declare class IncorrectVectorDefError extends TigrisError {
    constructor(object: Object, propertyName: string);
    get name(): string;
}
export declare class MissingPrimaryKeyOrderInSchemaDefinitionError extends TigrisError {
    constructor(propertyName: string);
    get name(): string;
}
export declare class DuplicatePrimaryKeyOrderError extends TigrisError {
    constructor(order: string, propertyName: string);
    get name(): string;
}
export declare class IncompletePrimaryKeyOrderError extends TigrisError {
    constructor(name: string, collectionName: string);
    get name(): string;
}
export declare class CollectionNotFoundError extends TigrisError {
    constructor(name: string);
    get name(): string;
}
export declare class BranchNameRequiredError extends TigrisError {
    constructor();
    get name(): string;
}
