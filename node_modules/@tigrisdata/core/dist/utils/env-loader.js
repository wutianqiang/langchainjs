"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeEnvironment = void 0;
const app_root_path_1 = __importDefault(require("app-root-path"));
const dotenv = __importStar(require("dotenv"));
const path_1 = __importDefault(require("path"));
const fs = __importStar(require("fs"));
const logger_1 = require("./logger");
/**
 * Uses dotenv() to initialize `.env` config files based on the **NODE_ENV**
 * environment variable in order -:
 * 1. `.env.${NODE_ENV}.local`
 * 2. `.env.local`
 * 3. `.env.${NODE_ENV}`
 * 4. `.env`
 *
 * @example If `NODE_ENV = production`
 * ```
 * export NODE_ENV=production
 *
 * // will load following 4 config files in order:
 * .env.production.local
 * .env.local
 * .env.production
 * .env
 * ```
 */
function initializeEnvironment() {
    const envFiles = getEnvFiles(app_root_path_1.default.toString());
    for (const f of envFiles) {
        dotenv.config({ path: f });
    }
}
exports.initializeEnvironment = initializeEnvironment;
function getEnvFiles(dir) {
    const nodeEnv = process.env.NODE_ENV;
    const dotEnvFiles = [];
    switch (nodeEnv) {
        case "test":
            dotEnvFiles.push(`.env.${nodeEnv}.local`);
            break;
        case "development":
        case "production":
            dotEnvFiles.push(`.env.${nodeEnv}.local`, ".env.local");
            break;
    }
    dotEnvFiles.push(`.env.${nodeEnv}`, ".env");
    const envFilePaths = [];
    for (const envFile of dotEnvFiles) {
        const envFilePath = path_1.default.join(dir, envFile);
        try {
            const stats = fs.statSync(envFilePath);
            // make sure to only attempt to read files
            if (!stats.isFile()) {
                continue;
            }
            envFilePaths.push(envFilePath);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
        }
        catch (error) {
            if (error.code !== "ENOENT") {
                logger_1.Log.error(`Failed to read env from '${envFile}'`, error.message);
            }
        }
    }
    return envFilePaths;
}
