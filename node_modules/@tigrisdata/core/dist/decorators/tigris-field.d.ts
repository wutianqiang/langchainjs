import "reflect-metadata";
import { CollectionFieldOptions, TigrisDataTypes } from "../types";
import { EmbeddedFieldOptions } from "./options/embedded-field-options";
/**
 * Field decorator is used to mark a class property as Collection field. Only properties
 * decorated with `@Field` will be used in Schema.
 *
 * Uses `Reflection` to determine the data type of schema Field.
 */
export declare function Field(): PropertyDecorator;
/**
 * Field decorator is used to mark a class property as Collection field. Only properties
 * decorated with `@Field` will be used in Schema.
 *
 * @param type - Schema field's data type
 */
export declare function Field(type: TigrisDataTypes): PropertyDecorator;
/**
 * Field decorator is used to mark a class property as Collection field. Only properties
 * decorated with `@Field` will be used in Schema.
 *
 * Uses `Reflection` to determine the data type of schema Field.
 *
 * @param options - `EmbeddedFieldOptions` are only applicable to Array and Object types
 * 									of schema field.
 */
export declare function Field(options: EmbeddedFieldOptions & CollectionFieldOptions): PropertyDecorator;
/**
 * Field decorator is used to mark a class property as Collection field. Only properties
 * decorated with `@Field` will be used in Schema.
 *
 * Uses `Reflection` to determine the data type of schema Field.
 *
 * @param type - Schema field's data type
 * @param options - `EmbeddedFieldOptions` are only applicable to Array and Object types
 * 									of schema field.
 */
export declare function Field(type: TigrisDataTypes, options?: EmbeddedFieldOptions & CollectionFieldOptions): PropertyDecorator;
