"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrimaryKey = void 0;
require("reflect-metadata");
const types_1 = require("../types");
const error_1 = require("../error");
const globals_1 = require("../globals");
const logger_1 = require("../utils/logger");
/**
 * PrimaryKey decorator is used to mark a class property as Primary Key in a collection.
 */
function PrimaryKey(typeOrOptions, options) {
    return function (target, propertyName) {
        propertyName = propertyName.toString();
        let propertyType;
        if (typeof typeOrOptions === "string") {
            propertyType = typeOrOptions;
        }
        else if (typeof typeOrOptions === "object") {
            options = typeOrOptions;
        }
        // infer type from reflection
        if (!propertyType) {
            logger_1.Log.info(`Using reflection to infer type of ${target.constructor.name}#${propertyName}`);
            try {
                const reflectedType = Reflect && Reflect.getMetadata
                    ? Reflect.getMetadata("design:type", target, propertyName)
                    : undefined;
                propertyType = ReflectedTypeToTigrisType.get(reflectedType.name);
            }
            catch (_a) {
                throw new error_1.ReflectionNotEnabled(target, propertyName);
            }
        }
        if (!propertyType) {
            throw new error_1.CannotInferFieldTypeError(target, propertyName);
        }
        (0, globals_1.getDecoratorMetaStorage)().primaryKeys.push({
            name: propertyName,
            type: propertyType,
            target: target.constructor,
            options: options,
        });
    };
}
exports.PrimaryKey = PrimaryKey;
const ReflectedTypeToTigrisType = new Map([
    ["String", types_1.TigrisDataTypes.STRING],
    ["Number", types_1.TigrisDataTypes.NUMBER],
    ["BigInt", types_1.TigrisDataTypes.NUMBER_BIGINT],
]);
