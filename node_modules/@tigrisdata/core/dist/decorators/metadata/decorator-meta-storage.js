"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DecoratorMetaStorage = void 0;
/**
 * Temporary storage for storing metadata processed by decorators. Classes can
 * be loaded in any order, schema generation cannot start until all class metadata
 * is available.
 *
 * @internal
 */
class DecoratorMetaStorage {
    constructor() {
        this.collections = new Map();
        this.collectionFields = new Array();
        this.primaryKeys = new Array();
        this.indexes = new Array();
        this.searchFields = new Array();
    }
    getCollectionByTarget(target) {
        for (const collection of this.collections.values()) {
            if (collection.target === target) {
                return collection;
            }
        }
    }
    getIndexByTarget(target) {
        for (const index of this.indexes.values()) {
            if (index.target === target) {
                return index;
            }
        }
    }
    getCollectionFieldsByTarget(target) {
        return this.collectionFields.filter(function (field) {
            return field.target === target;
        });
    }
    getSearchFieldsByTarget(target) {
        return this.searchFields.filter(function (field) {
            return field.target === target;
        });
    }
    getPKsByTarget(target) {
        return this.primaryKeys.filter(function (pk) {
            return pk.target === target;
        });
    }
}
exports.DecoratorMetaStorage = DecoratorMetaStorage;
