import { CollectionMetadata } from "./collection-metadata";
import { FieldMetadata } from "./field-metadata";
import { PrimaryKeyMetadata } from "./primary-key-metadata";
import { SearchIndexMetadata } from "./search-index-metadata";
import { SearchFieldMetadata } from "./search-field-metadata";
/**
 * Temporary storage for storing metadata processed by decorators. Classes can
 * be loaded in any order, schema generation cannot start until all class metadata
 * is available.
 *
 * @internal
 */
export declare class DecoratorMetaStorage {
    readonly collections: Map<string, CollectionMetadata>;
    readonly collectionFields: Array<FieldMetadata>;
    readonly primaryKeys: Array<PrimaryKeyMetadata>;
    readonly indexes: Array<SearchIndexMetadata>;
    readonly searchFields: Array<SearchFieldMetadata>;
    getCollectionByTarget(target: Function): CollectionMetadata;
    getIndexByTarget(target: Function): SearchIndexMetadata;
    getCollectionFieldsByTarget(target: Function): Array<FieldMetadata>;
    getSearchFieldsByTarget(target: Function): Array<SearchFieldMetadata>;
    getPKsByTarget(target: Function): Array<PrimaryKeyMetadata>;
}
