import { CacheDelResponse, CacheGetResponse, CacheGetSetResponse, CacheSetOptions, CacheSetResponse } from "./types";
import { CacheClient } from "./proto/server/v1/cache_grpc_pb";
import { TigrisClientConfig } from "./tigris";
import { CacheKeysCursor } from "./consumables/cursor";
export declare class Cache {
    private readonly _projectName;
    private readonly _cacheName;
    private readonly _cacheClient;
    private readonly _config;
    constructor(projectName: string, cacheName: string, cacheClient: CacheClient, config: TigrisClientConfig);
    /**
     * returns cache name
     */
    getCacheName(): string;
    /**
     * Sets the key with value. It will override the value if already exists
     * @param key - key to set
     * @param value - value for the key
     * @param options - optionally set params.
     * @example
     * ```
     * const c1 = tigris.GetCache("c1);
     * const setResp = await c1.set("k1", "v1");
     * console.log(setResp.status);
     * ```
     */
    set(key: string, value: string | number | boolean | object, options?: CacheSetOptions): Promise<CacheSetResponse>;
    /**
     * Sets the key with value. And returns the old value (if exists)
     *
     * @param key - key to set
     * @param value - value for the key
     * @example
     * ```
     * const c1 = tigris.GetCache("c1);
     * const getSetResp = await c1.getSet("k1", "v1");
     * console.log(getSetResp.old_value);
     * ```
     */
    getSet(key: string, value: string | number | boolean | object): Promise<CacheGetSetResponse>;
    /**
     * Get the value for the key, errors if the key doesn't exist or expired
     *
     * @param key - key to retrieve value for
     * @example
     * ```
     * const c1 = tigris.GetCache("c1);
     * const getResp = await c1.get("k1");
     * console.log(getResp.value);
     * ```
     */
    get(key: string): Promise<CacheGetResponse>;
    /**
     * Deletes a key from cache
     *
     * @param key - key to delete
     * @example
     * ```
     * const c1 = tigris.GetCache("c1);
     * const delResp = await c1.del("k1");
     * console.log(delResp.status);
     * ```
     */
    del(key: string): Promise<CacheDelResponse>;
    /**
     * returns an array of keys, complying the pattern
     * @param pattern - optional argument to filter keys
     * @example
     * ```
     * const c1 = tigris.GetCache("c1);
     * const keysCursor = await c1.keys();
     * for await (const keys of keysCursor) {
     *	console.log(keys);
     * }
     * ```
     */
    keys(pattern?: string): CacheKeysCursor;
}
