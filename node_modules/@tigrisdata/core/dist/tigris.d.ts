import { DeleteCacheResponse, ListCachesResponse, ServerMetadata, TigrisCollectionType } from "./types";
import { DB } from "./db";
import { Cache } from "./cache";
import { Search } from "./search";
export interface TigrisClientConfig {
    serverUrl?: string;
    projectName?: string;
    /**
     * Use clientId/clientSecret to authenticate production services.
     * Obtains at console.preview.tigrisdata.cloud in `Applications Keys` section
     * or by running `tigris create application {app_name} {app_description}` CLI command
     */
    clientId?: string;
    clientSecret?: string;
    /**
     * Tigris uses custom deserialization to support `bigint`. By default, the `bigint` from JSON
     * string will be converted back to model object as a `string` field. If user wants to
     * convert it back to `bigint`, set this property to `true`.
     */
    supportBigInt?: boolean;
    /**
     * Tigris can make periodic ping to server in order to keep connection alive in case if user's
     * workload is pub/sub with no messages for long period.
     */
    enablePing?: boolean;
    /**
     * Controls the ping interval, if not specified defaults to 300_000ms (i.e. 5 min)
     */
    pingIntervalMs?: number;
    /**
     * Database branch name
     */
    branch?: string;
}
/**
 * Tigris client
 */
export declare class Tigris {
    private readonly grpcClient;
    private readonly observabilityClient;
    private readonly cacheClient;
    private readonly searchClient;
    private readonly healthAPIClient;
    private readonly _config;
    private readonly _metadataStorage;
    private readonly _ping;
    private readonly pingId;
    /**
     * Create Tigris client
     *
     * @param  config - {@link TigrisClientConfig} configuration
     */
    constructor(config?: TigrisClientConfig);
    getDatabase(): DB;
    /**
     * Creates the cache for this project, if the cache doesn't already exist
     * @param name - cache identifier
     */
    createCacheIfNotExists(name: string): Promise<Cache>;
    /**
     * Deletes the entire cache from this project.
     * @param name - cache identifier
     */
    deleteCache(name: string): Promise<DeleteCacheResponse>;
    /**
     * Lists all the caches for this project
     */
    listCaches(): Promise<ListCachesResponse>;
    getCache(cacheName: string): Cache;
    getSearch(): Search;
    getServerMetadata(): Promise<ServerMetadata>;
    /**
     * Automatically create Project and create or update Collections.
     * Collection classes decorated with {@link TigrisCollection} decorator will be
     * created if not already existing. If Collection already exists, schema changes
     * will be applied, if any.
     *
     * @param collections - Array of Collection classes
     *
     * @example
     * ```
     * @TigrisCollection("todoItems")
     * class TodoItem {
     *   @PrimaryKey(TigrisDataTypes.INT32, { order: 1 })
     *   id: number;
     *
     *   @Field()
     *   text: string;
     * }
     *
     * await db.registerSchemas([TodoItem]);
     * ```
     */
    registerSchemas(collections: Array<TigrisCollectionType>): Promise<void>;
    /**
     * Shutdown, if ping is being used in order to keep connection alive.
     */
    close(): void;
}
