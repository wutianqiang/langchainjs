import { DeleteIndexResponse, DocStatus, Search, SearchIndex } from "@tigrisdata/core";
import { VectorStoreConfig, Document, DocumentSchema } from "./types";
/**
 * A vector store that uses Tigris to store and search for documents.
 */
export declare class VectorDocumentStore {
    private _searchClient;
    private _indexName;
    private _numDimensions;
    private _index;
    constructor(config: VectorStoreConfig);
    /**
     * Ensure that the index exists and is ready to use. Will not do anything if
     * the index already exists.
     */
    enusreIndex(): Promise<void>;
    /**
     * Deletes the index.
     * @returns A promise that resolves when the index has been deleted
     */
    deleteIndex(): Promise<DeleteIndexResponse>;
    /**
     * Add documents to the index.
     * @param ids The IDs of the documents to add
     * @param embeddings The embeddings of the documents to add
     * @param documents The documents to add
     * @returns A promise that resolves when the documents have been added
     */
    addDocumentsWithVectors({ ids, embeddings, documents, }: {
        ids: string[];
        embeddings: number[][];
        documents: Document[];
    }): Promise<DocStatus[]>;
    /**
     * Delete documents from the index.
     * @param ids The IDs of the documents to delete
     * @returns A promise that resolves when the documents have been deleted
     * successfully
     */
    deleteDocuments(ids: string[]): Promise<DocStatus[]>;
    /**
     * Delete documents from the index by filter.
     * @param filter The filter to apply to the documents to delete
     * @returns A promise that resolves when the documents have been deleted
     * successfully
     */
    deleteDocumentsByFilter(filter: object): Promise<number>;
    /**
     * Get documents from the index by ID.
     * @param ids The IDs of the documents to get
     * @returns A promise that resolves to an array of documents fetched
     * successfully
     */
    getDocuments(ids: string[]): Promise<Document[]>;
    /**
     * Search for the most similar documents to a query,
     * when you already have the embedding of the query.
     * @param embeddings The embeddings to search for
     * @param k The number of results to return
     * @param filter An optional filter to apply to the search
     * @returns A promise that resolves to an array of matched documents
     */
    similaritySearchVector({ query, k, filter, }: {
        query: number[];
        k: number;
        filter?: object;
    }): Promise<Document[]>;
    /**
     * Search for the most similar documents to a query,
     * when you already have the embedding of the query.
     * @param embeddings The embeddings to search for
     * @param k The number of results to return
     * @param filter An optional filter to apply to the search
     * @returns A promise that resolves to an array of matched documents and their scores
     */
    similaritySearchVectorWithScore({ query, k, filter, }: {
        query: number[];
        k: number;
        filter?: object;
    }): Promise<[Document, number][]>;
    /**
     * Search for the most similar documents to a query,
     * when you already have the embedding of the query.
     * @param query The embeddings to search for
     * @param k The number of results to return
     * @param filter An optional filter to apply to the search
     * @returns A promise that resolves to the search results
     */
    private search;
    get searchClient(): Search;
    get index(): SearchIndex<DocumentSchema>;
}
