"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const index_1 = require("../src/index");
jest.mock('axios');
const mockedAxios = axios_1.default;
const API_KEY = 'api-key';
const CLIENT_ID = 'client-id';
const BASE_URL = 'https://google.com';
const AXIOS_MANAGED_OPTS = {
    headers: {
        'Content-Type': 'application/json',
        'x-metal-api-key': API_KEY,
        'x-metal-client-id': CLIENT_ID,
    },
};
const AXIOS_NON_MANAGED_OPTS = {
    headers: {
        'Content-Type': 'application/json',
    },
};
describe('Motorhead', () => {
    beforeEach(() => {
        mockedAxios.post.mockClear();
    });
    it('should be defined', () => {
        expect(index_1.Motorhead).toBeDefined();
    });
    it('should instantiate (managed)', () => {
        const motorhead = new index_1.Motorhead({ apiKey: API_KEY, clientId: CLIENT_ID });
        expect(motorhead.apiKey).toBe(API_KEY);
        expect(motorhead.clientId).toBe(CLIENT_ID);
    });
    it('should instantiate (non-managed)', () => {
        const motorhead = new index_1.Motorhead({ baseUrl: BASE_URL });
        expect(motorhead.baseUrl).toBe(BASE_URL);
    });
    it('should error without apiKey for managed', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(() => {
            // eslint-disable-next-line no-new
            new index_1.Motorhead({ clientId: CLIENT_ID });
        }).toThrowError('apiKey and clientId required for managed motorhead');
    }));
    it('should error without clientId for managed', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(() => {
            // eslint-disable-next-line no-new
            new index_1.Motorhead({ apiKey: API_KEY });
        }).toThrowError('apiKey and clientId required for managed motorhead');
    }));
    describe('addMemory()', () => {
        it('should send payload for managed', () => __awaiter(void 0, void 0, void 0, function* () {
            const MOCK_SESSION = 'session-id';
            const MOCK_PAYLOAD = { messages: [{ role: 'AI', content: 'hey' }] };
            const motorhead = new index_1.Motorhead({ apiKey: API_KEY, clientId: CLIENT_ID });
            mockedAxios.post.mockResolvedValue({ data: null });
            yield motorhead.addMemory(MOCK_SESSION, MOCK_PAYLOAD);
            expect(axios_1.default.post).toHaveBeenCalledWith(`https://api.getmetal.io/v1/motorhead/sessions/${MOCK_SESSION}/memory`, MOCK_PAYLOAD, AXIOS_MANAGED_OPTS);
        }));
        it('should send payload for non-managed', () => __awaiter(void 0, void 0, void 0, function* () {
            const MOCK_SESSION = 'session-id';
            const MOCK_PAYLOAD = { messages: [{ role: 'AI', content: 'hey' }] };
            const motorhead = new index_1.Motorhead({ baseUrl: BASE_URL });
            mockedAxios.post.mockResolvedValue({ data: null });
            yield motorhead.addMemory(MOCK_SESSION, MOCK_PAYLOAD);
            expect(axios_1.default.post).toHaveBeenCalledWith(`${BASE_URL}/sessions/${MOCK_SESSION}/memory`, MOCK_PAYLOAD, AXIOS_NON_MANAGED_OPTS);
        }));
    });
    describe('getMemory()', () => {
        it('should send payload for managed', () => __awaiter(void 0, void 0, void 0, function* () {
            const MOCK_SESSION = 'session-id';
            const MOCK_PAYLOAD = { messages: [{ role: 'AI', content: 'hey' }] };
            const motorhead = new index_1.Motorhead({ apiKey: API_KEY, clientId: CLIENT_ID });
            mockedAxios.get.mockResolvedValue({ data: MOCK_PAYLOAD });
            const res = yield motorhead.getMemory(MOCK_SESSION);
            expect(res).toEqual(MOCK_PAYLOAD);
            expect(axios_1.default.get).toHaveBeenCalledWith(`https://api.getmetal.io/v1/motorhead/sessions/${MOCK_SESSION}/memory`, AXIOS_MANAGED_OPTS);
        }));
        it('should send payload for non-managed', () => __awaiter(void 0, void 0, void 0, function* () {
            const MOCK_SESSION = 'session-id';
            const MOCK_PAYLOAD = { messages: [{ role: 'AI', content: 'hey' }] };
            const motorhead = new index_1.Motorhead({ baseUrl: BASE_URL });
            mockedAxios.get.mockResolvedValue({ data: MOCK_PAYLOAD });
            const res = yield motorhead.getMemory(MOCK_SESSION);
            expect(res).toEqual(MOCK_PAYLOAD);
            expect(axios_1.default.get).toHaveBeenCalledWith(`${BASE_URL}/sessions/${MOCK_SESSION}/memory`, AXIOS_NON_MANAGED_OPTS);
        }));
    });
    describe('deleteMemory()', () => {
        it('should send payload for managed', () => __awaiter(void 0, void 0, void 0, function* () {
            const MOCK_SESSION = 'session-id';
            const motorhead = new index_1.Motorhead({ apiKey: API_KEY, clientId: CLIENT_ID });
            mockedAxios.delete.mockResolvedValue({ data: null });
            yield motorhead.deleteMemory(MOCK_SESSION);
            expect(axios_1.default.delete).toHaveBeenCalledWith(`https://api.getmetal.io/v1/motorhead/sessions/${MOCK_SESSION}/memory`, AXIOS_MANAGED_OPTS);
        }));
        it('should send payload for non-managed', () => __awaiter(void 0, void 0, void 0, function* () {
            const MOCK_SESSION = 'session-id';
            const motorhead = new index_1.Motorhead({ baseUrl: BASE_URL });
            mockedAxios.delete.mockResolvedValue({ data: null });
            yield motorhead.deleteMemory(MOCK_SESSION);
            expect(axios_1.default.delete).toHaveBeenCalledWith(`${BASE_URL}/sessions/${MOCK_SESSION}/memory`, AXIOS_NON_MANAGED_OPTS);
        }));
    });
});
