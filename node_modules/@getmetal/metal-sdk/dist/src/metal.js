"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const axios_1 = __importDefault(require("axios"));
const constants_1 = require("./constants");
class MetalSDK {
    constructor(apiKey, clientId, indexId) {
        this.apiKey = apiKey;
        this.indexId = indexId;
        this.clientId = clientId;
    }
    index(payload) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const index = (_a = payload.indexId) !== null && _a !== void 0 ? _a : this.indexId;
            if (!index) {
                throw new Error('indexId required');
            }
            const { imageBase64, imageUrl, text, embedding } = payload;
            if (!imageBase64 && !imageUrl && !text && !embedding) {
                throw new Error('payload required');
            }
            const body = { index };
            if (payload === null || payload === void 0 ? void 0 : payload.id) {
                body.id = payload.id;
            }
            if (payload === null || payload === void 0 ? void 0 : payload.metadata) {
                body.metadata = payload.metadata;
            }
            if (imageBase64) {
                body.imageBase64 = imageBase64;
            }
            else if (imageUrl) {
                body.imageUrl = imageUrl;
            }
            else if (text) {
                body.text = text;
            }
            else if (embedding != null) {
                body.embedding = embedding;
            }
            const { data } = yield axios_1.default.post(`${constants_1.API_URL}/v1/index`, body, {
                headers: {
                    'Content-Type': 'application/json',
                    'x-metal-api-key': this.apiKey,
                    'x-metal-client-id': this.clientId,
                },
            });
            return (_b = data === null || data === void 0 ? void 0 : data.data) !== null && _b !== void 0 ? _b : data;
        });
    }
    indexMany(payload) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const body = { data: payload };
            const { data } = yield axios_1.default.post(`${constants_1.API_URL}/v1/index/bulk`, body, {
                headers: {
                    'Content-Type': 'application/json',
                    'x-metal-api-key': this.apiKey,
                    'x-metal-client-id': this.clientId,
                },
            });
            return (_a = data === null || data === void 0 ? void 0 : data.data) !== null && _a !== void 0 ? _a : data;
        });
    }
    search(payload = {}) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const index = (_a = payload.indexId) !== null && _a !== void 0 ? _a : this.indexId;
            if (!index) {
                throw new Error('indexId required');
            }
            const { imageBase64, imageUrl, text, filters } = payload;
            const body = { index, filters };
            if (imageBase64) {
                body.imageBase64 = imageBase64;
            }
            else if (imageUrl) {
                body.imageUrl = imageUrl;
            }
            else if (text) {
                body.text = text;
            }
            const limit = (_b = payload.limit) !== null && _b !== void 0 ? _b : 10;
            let url = `${constants_1.API_URL}/v1/search?limit=${limit}`;
            if (payload.idsOnly) {
                url += '&idsOnly=true';
            }
            const { data } = yield axios_1.default.post(url, body, {
                headers: {
                    'Content-Type': 'application/json',
                    'x-metal-api-key': this.apiKey,
                    'x-metal-client-id': this.clientId,
                },
            });
            return (_c = data === null || data === void 0 ? void 0 : data.data) !== null && _c !== void 0 ? _c : data;
        });
    }
    tune(payload) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const index = (_a = payload.indexId) !== null && _a !== void 0 ? _a : this.indexId;
            if (!index) {
                throw new Error('indexId required');
            }
            if (!payload.idA || !payload.idB || Number.isNaN(payload.label)) {
                throw new Error('idA, idB, & label required for payload');
            }
            const body = Object.assign({ index }, payload);
            const { data } = yield axios_1.default.post(`${constants_1.API_URL}/v1/tune`, body, {
                headers: {
                    'Content-Type': 'application/json',
                    'x-metal-api-key': this.apiKey,
                    'x-metal-client-id': this.clientId,
                },
            });
            return (_b = data === null || data === void 0 ? void 0 : data.data) !== null && _b !== void 0 ? _b : data;
        });
    }
    getOne(id, indexId) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const index = indexId !== null && indexId !== void 0 ? indexId : this.indexId;
            if (!id) {
                throw new Error('id required');
            }
            if (!index) {
                throw new Error('indexId required');
            }
            const { data } = yield axios_1.default.get(`${constants_1.API_URL}/v1/indexes/${index}/documents/${id}`, {
                headers: {
                    'Content-Type': 'application/json',
                    'x-metal-api-key': this.apiKey,
                    'x-metal-client-id': this.clientId,
                },
            });
            return (_a = data === null || data === void 0 ? void 0 : data.data) !== null && _a !== void 0 ? _a : data;
        });
    }
    deleteOne(id, indexId) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const index = indexId !== null && indexId !== void 0 ? indexId : this.indexId;
            if (!id) {
                throw new Error('id required');
            }
            if (!index) {
                throw new Error('indexId required');
            }
            const { data } = yield axios_1.default.delete(`${constants_1.API_URL}/v1/indexes/${index}/documents/${id}`, {
                headers: {
                    'Content-Type': 'application/json',
                    'x-metal-api-key': this.apiKey,
                    'x-metal-client-id': this.clientId,
                },
            });
            return (_a = data === null || data === void 0 ? void 0 : data.data) !== null && _a !== void 0 ? _a : data;
        });
    }
    deleteMany(ids) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (!(ids === null || ids === void 0 ? void 0 : ids.length)) {
                throw new Error('ids required');
            }
            const { data } = yield axios_1.default.delete(`${constants_1.API_URL}/v1/documents/bulk`, {
                headers: {
                    'Content-Type': 'application/json',
                    'x-metal-api-key': this.apiKey,
                    'x-metal-client-id': this.clientId,
                },
                data: { ids },
            });
            return (_a = data === null || data === void 0 ? void 0 : data.data) !== null && _a !== void 0 ? _a : data;
        });
    }
}
module.exports = MetalSDK;
